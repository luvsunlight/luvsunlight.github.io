<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Prozac’s blog</title>
  
  <subtitle>记录学习的技能和遇到的问题</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-10-30T07:07:55.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Prozac</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《黑客与画家》读书笔记</title>
    <link href="http://yoursite.com/2017/10/29/%E3%80%8A%E9%BB%91%E5%AE%A2%E4%B8%8E%E7%94%BB%E5%AE%B6%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/10/29/《黑客与画家》读书笔记/</id>
    <published>2017-10-29T07:11:50.000Z</published>
    <updated>2017-10-30T07:07:55.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>黑客与画家并不单单意味着编程是一门艺术，实际上这本书的作者 Paul Graham 本身也是一个程序员和画家的结合（他原本想成为一名画家，最后迫于生计不得不编程维生）。本书的译者为<a href="http://www.ruanyifeng.com/home.html" target="_blank" rel="external">阮一峰</a>，也是一名非常了不起的牛人。</p></blockquote><a id="more"></a><h1 id="译者序"><a href="#译者序" class="headerlink" title="译者序"></a>译者序</h1><h2 id="黑客的六条“伦理”"><a href="#黑客的六条“伦理”" class="headerlink" title="黑客的六条“伦理”"></a>黑客的六条“伦理”</h2><ul><li>使用计算机以及所有有助于了解这个世界本质的事物都不应该受到任何限制，任何事情都应该亲手尝试</li><li>所有信息都应该是自由的</li><li>不信任权威，提倡去中心化</li><li>判断一名黑客的水平应该看他的技术能力</li><li>你可以使用计算机创造美和艺术</li><li>计算机使生活更美好</li></ul><h2 id="全书大概分为三个部分"><a href="#全书大概分为三个部分" class="headerlink" title="全书大概分为三个部分"></a>全书大概分为三个部分</h2><ul><li>1-4章：介绍黑客是如何成长的，以及他们看待世界的一些观点</li><li>5-9章：解释了黑客如何做出自己的成果，这些成果如何对全世界产生影响</li><li>10-15章：黑客的工具（编程语言）和工作方法，这是黑客文化的基础和核心</li></ul><h1 id="为什么书呆子不受欢迎"><a href="#为什么书呆子不受欢迎" class="headerlink" title="为什么书呆子不受欢迎"></a>为什么书呆子不受欢迎</h1><p>书呆子不受欢迎的真正原因，是他们脑子里想着别的事情（smarter），他们有其他的兴趣，没有多余的经理来使自己更加受欢迎。同时，其他伙伴们也喜欢欺负书呆子，因为这与“受欢迎”的心理有关（这在美国校园环境中很重要），没有什么比一个共同的敌人更能使得人们团结起来了。而且通常情况下，喜欢捉弄书呆子的人都是“焦虑的中间层”</p><h1 id="黑客与画家"><a href="#黑客与画家" class="headerlink" title="黑客与画家"></a>黑客与画家</h1><p>优美的软件并不总是论文的合适题材，黑客真正想做的是设计优美的软件，考核这种工作是非常困难的，你本人需要有良好的设计感，才能去考核别人的设计是否良好。但是“你觉得你具有良好的设计感和你实际是否具有，不存在相关联系。</p><p>别人无法考核你的工作，甚至误解你的工作，都不是最糟糕的事，更大的危险是你自己也会误解自己的工作。我发现自己以为需要记住各种理论实际上是错误的，何可不需要搞懂太多的概念，黑客新想法的最佳来源是其他创作领域。</p><p>黑客如何才能做自己喜欢的事情？找一份养家糊口的“day job”，然后业余时间做自己喜欢的事情</p><p><strong>黑客也可以从绘画中学习一些经验</strong></p><ul><li>画家学习绘画的方法主要是动手去画，黑客学习编程的方法也应该如此（这一点我比较有感触，看书上讲了一堆设计模式，但实际上还是要结合实际才能有更深的体会，但这与那是本好书不矛盾）</li><li>我们不应该期待现有一个完美的规格设计，然后再动手编程设计。应该是动态设计的，也就是说一开始搭好框架，然后慢慢修改</li><li>优秀的软件应该要要求对美的狂热追求。如果你查看优秀软件的内容时，就会发现那些预料中没有人会看见的部分也是优美的</li><li>黑客就像画家，工作起来是有心理周期的，最开始有一个令人兴奋的新周期时，你愿意为之每天工作16个小时，等过完这一阵，你又会觉得无聊。你在工作时，必须把这种因素考虑在内，解决办法是<strong>你可以把解决bug放在最后（因为消灭bug对作者来说很简单）</strong></li><li>在多人合作时，最好是分工尽量分板块进行，不要太重合了</li><li>设计软件时，尽量人性化设计，为了吸引用户，你必须理解用户需要什么，举例来说，几乎所有伟大的绘画作品都是画人的，因为人类总是对自身感兴趣的</li><li>源代码应该能做到自己解释自己，SICP中有一句说道“程序是给人看的，附带能在机器上运行”。一种好的编程语言，应该比英语更容易理解软件，同时把代码写得便于阅读，并不意味着要塞进去很多注释。只有在那些不太成熟，容易出错的地方才需要加上注释<h1 id="不能说的话"><a href="#不能说的话" class="headerlink" title="不能说的话"></a>不能说的话</h1></li><li>不能说出口</li><li>它们是正确的</li></ul><p>一些给别人人贴诸如“失败主义者/制造分裂”的标签的行为是很可怕的</p><p>我们可以自以为是地相信，当代人比古代人更聪明，更高尚，但是，了解的历史越多，就能明白事实并非如此，古人适合我们一样的人，不管他们产生怎样的想法，都是正常人的想法。因此，时长回顾历史或者和当代的其他文化进行比较，如果一种行为只有在我们现在这个社会里当做禁忌，那么很有可能是我们出错了</p><p>道德禁忌的最大制造者是那些权力斗争中略占上风的乙方，这一方有实力推行禁忌，但同时也需要积极保护自己的利益</p><p>大多数的斗争，不管它们实际上争的是什么，都会以思想斗争的形式表现出来</p><h1 id="良好的坏习惯"><a href="#良好的坏习惯" class="headerlink" title="良好的坏习惯"></a>良好的坏习惯</h1><h1 id="另一条路"><a href="#另一条路" class="headerlink" title="另一条路"></a>另一条路</h1><h1 id="如何创造财富"><a href="#如何创造财富" class="headerlink" title="如何创造财富"></a>如何创造财富</h1><h1 id="关注贫富分化"><a href="#关注贫富分化" class="headerlink" title="关注贫富分化"></a>关注贫富分化</h1><h1 id="防止垃圾邮件的一种方法"><a href="#防止垃圾邮件的一种方法" class="headerlink" title="防止垃圾邮件的一种方法"></a>防止垃圾邮件的一种方法</h1><h1 id="设计者的品味"><a href="#设计者的品味" class="headerlink" title="设计者的品味"></a>设计者的品味</h1><h1 id="编程语言解析"><a href="#编程语言解析" class="headerlink" title="编程语言解析"></a>编程语言解析</h1><h1 id="一百年后的编程语言"><a href="#一百年后的编程语言" class="headerlink" title="一百年后的编程语言"></a>一百年后的编程语言</h1><h1 id="拒绝平庸"><a href="#拒绝平庸" class="headerlink" title="拒绝平庸"></a>拒绝平庸</h1><h1 id="书呆子的复仇"><a href="#书呆子的复仇" class="headerlink" title="书呆子的复仇"></a>书呆子的复仇</h1><h1 id="梦寐以求的编程语言"><a href="#梦寐以求的编程语言" class="headerlink" title="梦寐以求的编程语言"></a>梦寐以求的编程语言</h1><h1 id="设计与研究"><a href="#设计与研究" class="headerlink" title="设计与研究"></a>设计与研究</h1>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;黑客与画家并不单单意味着编程是一门艺术，实际上这本书的作者 Paul Graham 本身也是一个程序员和画家的结合（他原本想成为一名画家，最后迫于生计不得不编程维生）。本书的译者为&lt;a href=&quot;http://www.ruanyifeng.com/home.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;阮一峰&lt;/a&gt;，也是一名非常了不起的牛人。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="http://yoursite.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="编程" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>《暗时间》读书笔记</title>
    <link href="http://yoursite.com/2017/10/25/%E3%80%8A%E6%9A%97%E6%97%B6%E9%97%B4%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/10/25/《暗时间》读书笔记/</id>
    <published>2017-10-25T05:50:37.000Z</published>
    <updated>2017-10-29T07:17:37.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>刘伟鹏的博客可以堪称国内程序员的典范了吧，我也是两年前就看了这本书，现在重新翻了出来，作为自己博客上读书笔记的开端吧</p></blockquote><a id="more"></a><h1 id="读书笔记之前的杂谈"><a href="#读书笔记之前的杂谈" class="headerlink" title="读书笔记之前的杂谈"></a>读书笔记之前的杂谈</h1><h2 id="一些唏嘘"><a href="#一些唏嘘" class="headerlink" title="一些唏嘘"></a>一些唏嘘</h2><p>在看了这么多书之后，我发现一个简单但深刻的道理：对于一本书，如果你读完之后觉得有价值。一定要写（或者说最好要写，因为有的书写不出来什么）读书笔记，尤其是对我这种记性差的人来说。我大一大二看的书很多，基本上空闲的时间六成都放在了看书上。可是我读过的这些书，一部分是确实没什么价值，剩余有价值的书，部分没做笔记，部分做了笔记但是放在了OneNote上。不可否认onenote是一个非常好的知识管理工具，事实上我到现在一些私人的信息都在用它来管理，但是把它来当做一个知识输出的平台那还是不够的。一个是输出的方式不够多样化，对于现在熟悉了markdown之后的我来说，一个不支持markdown功能的平台简直是不可原谅的。另外一个也是最重要的原因：在onenote上你所有记录的东西都是给自己看的，而发布在blog或者是知乎/简书等平台能起到一个公众督导的效果。这一点很重要，哪怕我的博客没有人看，但是我只要一想到这是一个公众的平台，就会尽力用心对待之，努力地收集资料以及认真记录文字。</p><h2 id="关于kindle"><a href="#关于kindle" class="headerlink" title="关于kindle"></a>关于kindle</h2><p>想要大量看书的话，还是买一个kindle更划算。我大二时也买过一个kpw2.但是怎么说呢，对于我个人而言，我还是更偏向于纸质书一些，我一般只用kindle来看一些散文和小说。它的阅读感还是不如纸质书来得流畅。也许是我没有掌握正确的看书技巧吧，但不管怎么说，纸质书的价格和携带型始终是爱书之人心中的一个巨大的创伤…希望以后能捡起来这个工具吧</p><h2 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h2><p>最开始接触作者刘未鹏是想订一些<code>rss</code>看，知乎里有些人提到了他。<a href="http://mindhacks.cn/" target="_blank" rel="external">他的博客</a>里有他个人完整的介绍的信息。当我视图给自己的博客做出精准的定位时，我发现，刘未鹏的博客就是我心中理想的博客。换句话说，刘未鹏的生活轨迹，实际上就是我梦想的轨迹，倒不是说多么高薪。高薪只是一个层面，毕竟做技术做到这个层面都差不到哪去，最关键的是，我非常佩服他在搞好自己本职工作的同时，能够阅读这么多的书，并且自己有着非常深刻的体会和感悟，这一点从他的文字里能够很好地看出来。我自己最希望的就是两件事情，一是不断提高自己的编程能力，养家糊口的同时能够源源不断地获取成就感，二是看很多的书，丰富精神世界的同时也深刻自己的思想。刘未鹏很好地做到了这两点的结合。这本书就是他将自己多年来写的博客精选一部分然后集结成册，最后出版。希望我能从再一次拜读这份作品的同时，有意识地学习点什么。</p><h1 id="序言：为什么人人都该学点心理学"><a href="#序言：为什么人人都该学点心理学" class="headerlink" title="序言：为什么人人都该学点心理学"></a>序言：为什么人人都该学点心理学</h1><p>心理学早就从弗洛伊德那一套中走出来，并结合现代科学技术手段和研究方法，跨学科研究人脑思维的特点以及和现实生活的关系。心理学与日常生活息息相关的另一方面就是日常判断与决策.</p><p>人的大脑和思维是目前已知最为复杂的系统，对这个系统的研究是一件极其迷人的事情，即便对于像我们这样的芸芸众生来说，纵使不去做研究，学习一些这方面的科普知识，对于学会正确的思考也有极大的益处。</p><p>大脑是我们最重要的工具，要正确利用这个工具，唯一的途径就是去了解他，尤其是了解他的弱点。人们的思维充满了各种各样的结晶，每一条捷径都是一把双刃剑，一方面，它降低了大脑的认知复杂度，有助于做出绝大多数时刻都正确的判断，但另一方面，它也常常导致人们把大部分情况下成立的法则当场了放之四海皆准的。</p><p>以上构成了人类思维中的种种谬误，而学会思考，就是学会认识到这些谬误。</p><h1 id="第一篇：暗时间"><a href="#第一篇：暗时间" class="headerlink" title="第一篇：暗时间"></a>第一篇：暗时间</h1><h2 id="暗时间"><a href="#暗时间" class="headerlink" title="暗时间"></a>暗时间</h2><ul><li><code>实际投入</code>是时间和效率的乘积</li><li>专注做一件事，就不会有效率的损失。因为大脑在开始一件任务时必须要要有一定的时间来热身</li><li>倾向于创造大块的时间来阅读重要的东西</li><li>能够迅速进入专注状态，以及能够长期保持专注，是高效学习的两个最重要的习惯</li><li>可以考虑在嘈杂的环境里训练自己的抗干扰能力</li></ul><h2 id="设计你自己的进度条"><a href="#设计你自己的进度条" class="headerlink" title="设计你自己的进度条"></a>设计你自己的进度条</h2><ul><li><strong>在尝试新领域时，不要过早退出循环</strong>（我心头的一记重击…）<br>过早退出的原因往往在于对未来的不确定性，对于投资时间最终无法收到回报的恐惧。</li><li>没有勇气去问别人问题，一般原因是1）被批评了怎么办2）认为问了也没有什么特别的信息。但事实可能是1）被批评了算不上什么实质性的损失2）你认为问不出什么，不代表真的问不出什么。<strong>别把不知道当做没有！</strong></li><li>靠专业技能的成功是最具可复制性的（在一个领域选择一个靠谱的方向，然后专心致志地钻研下去，最后必定成为高手）</li><li>饿死在干草堆之间的驴子（一个寓意）</li><li>一生的知识积累，自学起码占90%，程序员是最适合自学的行业</li></ul><h2 id="如何有效地记忆和学习"><a href="#如何有效地记忆和学习" class="headerlink" title="如何有效地记忆和学习"></a>如何有效地记忆和学习</h2><blockquote><p>你所拥有的知识并不取决于你记得多少，而在于它们能否在恰当的时候被回忆起来</p></blockquote><ul><li>记忆技巧：空间记忆法</li><li>在记忆知识时，加上自己的理解</li><li>尽量多和别人讲知识</li><li>整理笔记（这个比较可行）</li><li>书写</li></ul><h2 id="学习密度和专注度"><a href="#学习密度和专注度" class="headerlink" title="学习密度和专注度"></a>学习密度和专注度</h2><ul><li>在大学期间，最不缺的就是业余时间，最缺的就是专注精神</li><li>真正的动力还不是自制力，应该是追求</li></ul><h2 id="一直以来伴随我的一些学习习惯"><a href="#一直以来伴随我的一些学习习惯" class="headerlink" title="一直以来伴随我的一些学习习惯"></a>一直以来伴随我的一些学习习惯</h2><ul><li>google&amp;wiki(中文维基被墙了，访问英文的把)</li><li>看书只看经典</li><li>做好读书笔记（思考记录下来+记录书上的片段）</li><li>利用生活的片段思考（这个我觉得有点难）</li><li>多看思维和心理学的书（元知识）</li><li>学习一项知识，必须问自己三个重要的问题 1）它的本质是什么 2）它的第一原则是什么 3）它的知识结构是什么 （这个做到我觉得有点困难，但还是放在dahsoboard里提醒自己吧）</li><li>学习和思考中，问自己：1）你的问题是什么2）我到底有什么收获3）设想自己在给别人讲4）将给一个不懂得人5）养成反驳自己的习惯（实在有些强人所难，不过还是尝试一下吧，不过学习完一个知识/看完一本书，真的需要做一下总结）</li><li>趁着对一件事有热情的时候，一股脑把万事开头的最难的阶段熬过去</li><li>时不时反省一下，自己现在做的事，到底是什么？它们重要吗？你需要在这个时候学习这个吗？</li><li>有时间吗？总结最近得到的新知识把！</li><li>有时间吗？看本书把！</li><li><strong>学习一个新东西之前，首先在大脑中积累充分的疑惑感</strong>（这个说到了点子上）</li></ul><blockquote><p>的确，也许真的有更好的路，但事前真的很难判断哪条路是最有的，我能做到的，是把一条路走透了，走深了，只要不是一条太不靠谱的路，深入的过程中总会有很多的收获，只要不是太顽固，善于反省，总有一天也会意识到越来越靠谱的路</p></blockquote><h1 id="第二篇：思维改变生活"><a href="#第二篇：思维改变生活" class="headerlink" title="第二篇：思维改变生活"></a>第二篇：思维改变生活</h1><h2 id="逃出你的肖恩克"><a href="#逃出你的肖恩克" class="headerlink" title="逃出你的肖恩克"></a>逃出你的肖恩克</h2><h2 id="书写是为了更好地思考"><a href="#书写是为了更好地思考" class="headerlink" title="书写是为了更好地思考"></a>书写是为了更好地思考</h2><p>书写有几点好处</p><ul><li>书写是对思维的备忘（方便罗列框架以及及时回溯）</li><li>书写是对思维的缓存（笔纸构成一个作家）</li><li>书写是和自己的对话（这个我深有感触，每次写随想时都能深刻体会到这一点）</li><li>书写是和别人的交流（这点我还没做到，希望以后能做到）</li><li>有时候，语言自己也会思考</li></ul><blockquote><p>如果你逼着自己将一些不成熟的想法写下来，看着自己写的内容，试着进一步扩展它们，就有可能在理性的道路上走得很远</p></blockquote><h2 id="为什么你从现在就应该开始写博客"><a href="#为什么你从现在就应该开始写博客" class="headerlink" title="为什么你从现在就应该开始写博客"></a>为什么你从现在就应该开始写博客</h2><blockquote><p>写博客有很多好处，却没有任何明显的坏处</p></blockquote><ul><li>能交到很多志同道合的朋友（当我看完了一个写了好几年的博客，仿佛和这个人交流了很久）</li><li>书写是为了更好地思考</li><li>“教”是最好的“学”（这个也是我比较推崇的一点，从建立这个新博客之后，我尽量每学习一个新知识，就在理解了之后写一篇博客来记录下来）</li><li>讨论是绝佳的反思</li><li>激励你去持续学习和思考（为了让你的博客有价值，你必须不断总结自己学习的结果，你必须不断思考，给出比别人深刻，独到的见解。这看起来有些本末倒置，但很快本和末就会纠正过来）</li><li>学会持之以恒地做一件事（这一点我有较深的体会，忙了很久之后终于把自己的博客调得很炫酷了，以后每次打开博客都很有成就感，写博客的积极性就会很高）</li><li>一份长期的博客是一份很好的简历（主要是说作为别人了解你的窗口）</li></ul><h2 id="我不想和我不能"><a href="#我不想和我不能" class="headerlink" title="我不想和我不能"></a>我不想和我不能</h2><ul><li><code>自利归因</code>就是把一件事发生的的原因归于对自己有利的那种情况。</li></ul><h2 id="遇到问题为什么应该自己动手"><a href="#遇到问题为什么应该自己动手" class="headerlink" title="遇到问题为什么应该自己动手"></a>遇到问题为什么应该自己动手</h2><ul><li>现代很多新知识都是知识密集型的，我们很多情况对困难会高估</li><li>只要智商上没有根本的差别，别人的大脑能够掌握的知识，你也能。你所感受的困难，不过是因为<code>unknown unknown</code>带来的</li><li>解决问题的过程可能艰辛，但是你收获的绝不仅是结果本身</li><li>解决问题越多，你解决问题也会越发熟练：知道可能是哪方面出了问题，知道应该在哪里寻找答案</li></ul><blockquote><p>原来的我也总是遇到困难再三尝试无果之后就会选择放弃，现在随着知识网的扩大，部分问题也能慢慢尝试自己解决了，这对我来说很重要。困难的路越走越简单，简单的路越走越难</p></blockquote><h2 id="什么才是你的不可替代性和核心竞争力"><a href="#什么才是你的不可替代性和核心竞争力" class="headerlink" title="什么才是你的不可替代性和核心竞争力"></a>什么才是你的不可替代性和核心竞争力</h2><ul><li>技术路线的选择重要但不具有决定性</li><li>专业领域技能</li><li>跨领域的技能（解决问题的能力，创新思维，判断与决策能力，批判性思维，表达沟通能力）</li><li>学习能力</li><li>性格要素</li></ul><h1 id="第三篇：跟波西亚学解题"><a href="#第三篇：跟波西亚学解题" class="headerlink" title="第三篇：跟波西亚学解题"></a>第三篇：跟波西亚学解题</h1><h2 id="跟波利亚学解题"><a href="#跟波利亚学解题" class="headerlink" title="跟波利亚学解题"></a>跟波利亚学解题</h2><h2 id="锤子和钉子"><a href="#锤子和钉子" class="headerlink" title="锤子和钉子"></a>锤子和钉子</h2><h2 id="鱼是最后一个看到水的"><a href="#鱼是最后一个看到水的" class="headerlink" title="鱼是最后一个看到水的"></a>鱼是最后一个看到水的</h2><h2 id="知其所以然"><a href="#知其所以然" class="headerlink" title="知其所以然"></a>知其所以然</h2><h2 id="为什么有必要知其所以然"><a href="#为什么有必要知其所以然" class="headerlink" title="为什么有必要知其所以然"></a>为什么有必要知其所以然</h2><h2 id="康托尔，哥德尔，图灵——永恒的金色对角线"><a href="#康托尔，哥德尔，图灵——永恒的金色对角线" class="headerlink" title="康托尔，哥德尔，图灵——永恒的金色对角线"></a>康托尔，哥德尔，图灵——永恒的金色对角线</h2><h2 id="快排为什么那么快"><a href="#快排为什么那么快" class="headerlink" title="快排为什么那么快"></a>快排为什么那么快</h2><h2 id="贝叶斯方法"><a href="#贝叶斯方法" class="headerlink" title="贝叶斯方法"></a>贝叶斯方法</h2><h1 id="推荐书籍"><a href="#推荐书籍" class="headerlink" title="推荐书籍"></a>推荐书籍</h1><ul><li>nudge</li><li>paradox-why more is less</li><li>made to stick</li><li>the social animal</li><li>searching for memory</li><li>outliers</li><li>the tipping point</li><li>psychology of judgement and decision making</li><li>别做正常的傻瓜</li><li>怪诞行为学</li><li>mistakes were made, but not by me</li><li>askIng the right question</li><li>影响力</li><li>how we decide</li><li>我是一只IT小小鸟</li><li>像外行一样思考，像专家一样实践</li><li>高效能人士的七个习惯</li><li>奇特的一生</li><li>合作的金华</li><li>mean genes</li><li>sway</li><li>随机致富的傻瓜</li><li>黑天鹅</li><li>20世纪最伟大的心理学实验</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;刘伟鹏的博客可以堪称国内程序员的典范了吧，我也是两年前就看了这本书，现在重新翻了出来，作为自己博客上读书笔记的开端吧&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="http://yoursite.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="效率" scheme="http://yoursite.com/tags/%E6%95%88%E7%8E%87/"/>
    
      <category term="个人成长" scheme="http://yoursite.com/tags/%E4%B8%AA%E4%BA%BA%E6%88%90%E9%95%BF/"/>
    
  </entry>
  
  <entry>
    <title>一键图床指南</title>
    <link href="http://yoursite.com/2017/10/19/%E4%B8%80%E9%94%AE%E5%9B%BE%E5%BA%8A%E6%8C%87%E5%8D%97/"/>
    <id>http://yoursite.com/2017/10/19/一键图床指南/</id>
    <published>2017-10-19T11:14:10.000Z</published>
    <updated>2017-10-25T05:53:30.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>写<code>markdown</code>的过程是非常爽的，但是有一点始终是我心中的一根刺，那就是图床。博客理论上来说是可以把图片存在本地然后调用相对路径的，但是这么做一方面加重了上传的负担，一方面加重了网站的负担。比较推荐的方式是<a href="https://baike.baidu.com/item/%E5%9B%BE%E5%BA%8A/10721348?fr=aladdin" target="_blank" rel="external">图床</a>。但是图床虽然副作用小，但当一篇博客里需要引用的图片变多时，图床繁琐的步骤往往会成为你发疯的诱因.我在尝试了一个晚上之后终于解决了这个问题</p></blockquote><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="传统图床步骤"><a href="#传统图床步骤" class="headerlink" title="传统图床步骤"></a>传统图床步骤</h2><p>一般来说，正常途径下我们写博客使用图床需要经过以下几个步骤</p><ul><li>使用快捷键截图</li><li>打开<a href="https://www.qiniu.com/?hmsr=biaoti&amp;hmpl=pinzhuan&amp;hmcu=biaoti&amp;hmkw=&amp;hmci=" target="_blank" rel="external">七牛云存储</a></li><li>上传本地图片</li><li>复制外链</li></ul><p>当然你可以说我可以开始写博客时把七牛打开，然后需要时往里面塞就好了。事实告诉我，当我在网上看见截完图之后立刻上传并且生成外链一气呵成时，前面的4个固定步骤在我看来就如同原罪一般不可原谅。于是开始了改造之旅…</p><blockquote><p>首先说明，我在网上找了很多办法，但是很多都不一而終（手残如我…）。本文中会把可能的方法都列出来，但是我尝试失败了的就不细说了，只提我自己做好了的。我自己没有实现不代表方法不可行，理论上来说都是可以的</p></blockquote><h1 id="可用方法"><a href="#可用方法" class="headerlink" title="可用方法"></a>可用方法</h1><h2 id="系统自带截图的设置"><a href="#系统自带截图的设置" class="headerlink" title="系统自带截图的设置"></a>系统自带截图的设置</h2><p>首先在讲各个方法之前，先把系统给的截图给改一下。默认的设置里<code>command+shitf+4</code>是截图,<code>command+shift+4+control</code>是截图并且存入剪切板，后者对我们来说更为实用，但是更难按，在系统的键盘设置里把前者的默认按键和后者换一下即可</p><h2 id="workflow"><a href="#workflow" class="headerlink" title="workflow"></a>workflow</h2><p><a href="https://github.com/tiann/markdown-img-upload" target="_blank" rel="external">参考链接</a></p><p>这个是<a href="https://www.alfredapp.com/" target="_blank" rel="external">alfred</a>的特殊技能（alfred的文章我之后会专门写），并且需要购买<code>powerback</code>包。具备了上述条件之后，只需要按照参考链接里的步骤，安装里面的wordflow，配置好七牛的信息，应该就可以运行了。我自己是一切都搞好了，但是实践起来发现不是这回事，总是报网络的错，我估摸着可能是七牛的api改了，但是也没那个闲工夫去琢磨workflow里的东西，遂作罢。</p><p>|补充| 后来找到原因了，原来是存储空间是不在华东的缘故，重新建立了一个华东的存储区，并且重新修改了一下配置文件，可以运行了。而且我在另外一个同学的电脑上也查看了效果，并没有它说的分辨率丢失的问题，那么workflow就是目前我非常完美的一个解决方案了，快捷（只需要截图然后粘贴），安全（可以在七牛上管理）。</p><h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><ul><li><code>command+shift+4</code>截图</li><li>在编辑器里<code>command+control+v</code>粘贴</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>这个workflow已经非常强大了，简单易懂，但是还是存在缺陷，那就是粘贴出来之后的是html里的img格式，更让我震惊的是markdown竟然也支持这个格式！（感觉不是markdown支持，应该算是本身markdown就是嵌在html里通过markdown解释器编译成dom元素吧）。作者给出来的理由是retina屏幕上截的图在其他屏幕上非常模糊，通过这个方法能够避免这种问题的出现。我试图修改python文件，让它返回markdown里正常的链接，可以是可以，但是还是有点害怕作者说的问题…另外还有一个小缺点是有一点点的阻塞感…（逼死强迫症）</p><blockquote><p>用起来很简便，但是我总觉得一个<code>img</code>元素的出现很诡异…</p></blockquote><h2 id="atom的插件"><a href="#atom的插件" class="headerlink" title="atom的插件"></a>atom的插件</h2><p><a href="http://www.jianshu.com/p/af4d34d39797" target="_blank" rel="external">参考链接</a></p><p>正好我最近在配置atom，但说实话我是不太想用atom来做markdown的（界面没<code>macdown</code>好看+操作空间太小了）。但是既然这个方法可行那还是姑且尝试一下把，我把里面两个插件都下下来了，但又一次报错，这次是包本身的问题，又是个什么函数找不到了，怒删之。更何况这个解决方案本身就不太好，因为只能解决atom这一个平台的问题。</p><h2 id="iPic"><a href="#iPic" class="headerlink" title="iPic"></a>iPic</h2><p><a href="https://toolinbox.net/iPic/" target="_blank" rel="external">参考链接</a></p><p>这个我最后是配置好了的，但是还是感觉有一个缺陷，那就是只能默认存储在微博上（而且是存储在匿名账户上！）这样一方面感觉是没有安全感，另一方面是觉得日后不好管理，但是付费版需要56元/年…总体来说这个软件总体来说除了安全性之外还是不错的</p><h3 id="操作步骤-1"><a href="#操作步骤-1" class="headerlink" title="操作步骤"></a>操作步骤</h3><ul><li><code>command+shift+4</code>截图</li><li><code>command+u</code>上传图片</li><li><code>command+v</code>粘贴</li></ul><h2 id="photocloud"><a href="#photocloud" class="headerlink" title="photocloud"></a>photocloud</h2><p><a href="https://www.v2ex.com/t/318201" target="_blank" rel="external">参考链接</a></p><p>这个软件需要在appstore官网上下载，看了晚上的宣传，感觉还是不错的，但是当我真正使用时才发现完全不是这回事。首先，截图方式太傻，完全没有本地截图然后自动上传到剪切板那么便捷，其次，七牛云存储！！！我发现按要求配置好了之后，还是会报错<code>incorrect region</code>，网上搜了一下，好像是存储空间应该选华东（默认是华东），要么我换一个存储在华东的空间，要么修改远吗（可是这是一个软件并不能修改…）可是当我修改成华东之后发现还是报了一样的错，服了，遂删之。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>最后还是两种方法都实现了，<code>ipics</code>真的挺不错的，但是微博链接还是有点不放心。workflows的方法真心强，而且更改了链接之后发现还是非常完美的。workflow虽然好但是那是相对于购买了alfred的powerback的用户来说的，对于没有购买alfred的powerback的人，我的建议还是<code>ipic</code>。<code>photocloud</code>不仅截图不好用，而且七牛设置总是出问题，差评…</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;写&lt;code&gt;markdown&lt;/code&gt;的过程是非常爽的，但是有一点始终是我心中的一根刺，那就是图床。博客理论上来说是可以把图片存在本地然后调用相对路径的，但是这么做一方面加重了上传的负担，一方面加重了网站的负担。比较推荐的方式是&lt;a href=&quot;https://baike.baidu.com/item/%E5%9B%BE%E5%BA%8A/10721348?fr=aladdin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;图床&lt;/a&gt;。但是图床虽然副作用小，但当一篇博客里需要引用的图片变多时，图床繁琐的步骤往往会成为你发疯的诱因.我在尝试了一个晚上之后终于解决了这个问题&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="技术细节" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E7%BB%86%E8%8A%82/"/>
    
    
  </entry>
  
  <entry>
    <title>Atom改造计划</title>
    <link href="http://yoursite.com/2017/10/19/Atom%E6%94%B9%E9%80%A0%E8%AE%A1%E5%88%92/"/>
    <id>http://yoursite.com/2017/10/19/Atom改造计划/</id>
    <published>2017-10-19T05:47:46.000Z</published>
    <updated>2017-10-20T05:41:34.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>之前写前端一直使用的是<code>webstorm</code>,这个ide很好，功能也集成得不错，但是缺点太显著那就是慢，启动慢，打字有时候还会卡帧，这导致我不得不寻找一个轻量级的替代品，这次我考虑的由<code>vsc</code>和<code>atom</code>，最终还是决定使用atom，理由就是好看且顺手。我从今天上午开始到现在已经下载了很多好用的插件，写了这篇博客来梳理一下思绪</p></blockquote><a id="more"></a><h1 id="关于atom"><a href="#关于atom" class="headerlink" title="关于atom"></a>关于atom</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>atom是<code>github</code>出版的编辑器，插件也非常丰富。<a href="https://atom.io/" target="_blank" rel="external">官网</a></p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="http://www.cnblogs.com/fuhuixiang/p/4840866.html" target="_blank" rel="external">1</a></li><li><a href="https://github.com/shery15/awesome-atom-packages/blob/master/README-zh.md" target="_blank" rel="external">2</a></li></ul><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>UI好看(感觉比spacemacs还好看)<br><img src="http://oy2kvpd7z.bkt.clouddn.com/md/1508417989030.png" alt=""></li><li>前端友好</li><li>插件市场简便且强大</li></ul><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>在介绍atom配置之前首先需要更改一下源（参考<a href="http://blog.csdn.net/qianghaohao/article/details/52331432" target="_blank" rel="external">这篇文章</a>），我最开始的时候就没有改，下载速度非常慢而且易出错，f**kGFW！</p><p>首先找到这个路径<code>\Users\用户名\.atom</code>，在这个下面新建一个<code>.apmrc</code>的文件，代码如下</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">registry</span>=https://registry.npm.taobao.org/  </div><div class="line"><span class="attr">strict-ssl</span>=<span class="literal">false</span></div></pre></td></tr></table></figure><p>也就是把源换成淘宝源（brew，npm，pip也应该同理换一下，当然这就不是本文的讨论范围了）</p><h2 id="atom安装插件"><a href="#atom安装插件" class="headerlink" title="atom安装插件"></a>atom安装插件</h2><h3 id="应用内打开"><a href="#应用内打开" class="headerlink" title="应用内打开"></a>应用内打开</h3><p>我更偏爱这种方法，一是简单，而是内容也更丰富（可以看到评价和简介）mac下直接按<code>command + ,</code>，在里面找到<code>install</code>栏即可</p><h3 id="终端安装"><a href="#终端安装" class="headerlink" title="终端安装"></a>终端安装</h3><p><code>apm install + 插件名</code>，不太推荐这种方法，不要为了装逼冒这个风险。python，node都可以通过终端安装包，但atom没必要，应用内更丰富且易定制。</p><h2 id="atom快捷键"><a href="#atom快捷键" class="headerlink" title="atom快捷键"></a>atom快捷键</h2><ul><li><code>command+\</code> toggle文件夹</li><li><code>command+p</code> 查找文件</li><li><code>command+enter</code>跳转到下一行</li><li><code>command+k  + 方向键</code>分屏</li></ul><h1 id="插件篇"><a href="#插件篇" class="headerlink" title="插件篇"></a>插件篇</h1><h2 id="主题插件"><a href="#主题插件" class="headerlink" title="主题插件"></a>主题插件</h2><h3 id="atom-material-ui"><a href="#atom-material-ui" class="headerlink" title="atom-material-ui"></a>atom-material-ui</h3><h2 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h2><ul><li>git-plus<br>这个方便git使用，我之后写git的文章时会结合这个来说的（主要是方便我这种不记命令的懒人XD）<br>##markdown<br>说一下，我最开始的时候也是想把atom改造成一个markdown编辑器的，后来尝试了很多插件，最后发现还是<code>macdown</code>好用，配色鲜明（这个很重要）+空间大（屏幕小的痛）</li></ul><h2 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h2><h3 id="project-manager"><a href="#project-manager" class="headerlink" title="project-manager"></a>project-manager</h3><p>暂时没有搞明白</p><h3 id="file-icons"><a href="#file-icons" class="headerlink" title="file-icons"></a>file-icons</h3><p>为文件添加各种icon，方便识别</p><h3 id="expose"><a href="#expose" class="headerlink" title="expose"></a>expose</h3><p>主要就是呈现跟手机端一样，当tab栏过多时，按下<code>comamnd+shift+e</code>查看所有的tab</p><h2 id="自动补全"><a href="#自动补全" class="headerlink" title="自动补全"></a>自动补全</h2><h3 id="emmet"><a href="#emmet" class="headerlink" title="emmet"></a>emmet</h3><p>不解释</p><h3 id="auto-completepaths"><a href="#auto-completepaths" class="headerlink" title="auto-completepaths"></a>auto-completepaths</h3><p>文件路径补全</p><h3 id="autocomplete-modules"><a href="#autocomplete-modules" class="headerlink" title="autocomplete-modules"></a>autocomplete-modules</h3><p>自动补全模组名</p><h3 id="atom-ternjs"><a href="#atom-ternjs" class="headerlink" title="atom-ternjs"></a>atom-ternjs</h3><p>ES5, ES6, ES7, Node.js, jQuery, Angular 等等 js 代码自动补全</p><h3 id="css-snippets"><a href="#css-snippets" class="headerlink" title="css-snippets"></a>css-snippets</h3><h2 id="代码检查"><a href="#代码检查" class="headerlink" title="代码检查"></a>代码检查</h2><h3 id="linter"><a href="#linter" class="headerlink" title="linter"></a>linter</h3><p>这是一个系列，主要作用是代码优化和检测</p><h3 id="linter-jshint"><a href="#linter-jshint" class="headerlink" title="linter-jshint"></a>linter-jshint</h3><p>基于 jshint 的 JavaScript 语法检查插件</p><h3 id="linter-eslint"><a href="#linter-eslint" class="headerlink" title="linter-eslint"></a>linter-eslint</h3><p>基于 ESLint 的 JavaScript 语法检查插件</p><h3 id="linter-htmlhint"><a href="#linter-htmlhint" class="headerlink" title="linter-htmlhint"></a>linter-htmlhint</h3><h3 id="linter-jsonhint"><a href="#linter-jsonhint" class="headerlink" title="linter-jsonhint"></a>linter-jsonhint</h3><h3 id="linter-csslint"><a href="#linter-csslint" class="headerlink" title="linter-csslint"></a>linter-csslint</h3><h2 id="前端细节"><a href="#前端细节" class="headerlink" title="前端细节"></a>前端细节</h2><h3 id="autoprefixer"><a href="#autoprefixer" class="headerlink" title="autoprefixer"></a>autoprefixer</h3><p>这个是用来解决兼容性前缀的，你只需要写完之后，使用控制命令调用<code>autofixer</code>即可，非常方便</p><h3 id="open-in-browser"><a href="#open-in-browser" class="headerlink" title="open-in-browser"></a>open-in-browser</h3><p>按下组合键<code>control+alt+o</code>，即可使用默认浏览器打开当前html（默认是chrome），当然也可以通过底栏的按钮来打开html</p><h3 id="hyperclick"><a href="#hyperclick" class="headerlink" title="hyperclick"></a>hyperclick</h3><h3 id="js-hyperclick"><a href="#js-hyperclick" class="headerlink" title="js-hyperclick"></a>js-hyperclick</h3><h2 id="拓展功能"><a href="#拓展功能" class="headerlink" title="拓展功能"></a>拓展功能</h2><h3 id="color-picker"><a href="#color-picker" class="headerlink" title="color-picker"></a>color-picker</h3><p><code>conmand+shift+c</code>直接显示出选色器，非常方便！！！！</p><h3 id="docblockr"><a href="#docblockr" class="headerlink" title="docblockr"></a>docblockr</h3><p>这个功能<strong>非常强大</strong>，可定制型也比较高…我琢磨了很久也只挖掘了几个我目前暂时能用到的。主打功能：高级注释。<code>/*</code>或<code>/**</code>之后按下<code>tab</code>，就能自动转化成批量注释。另外，在函数前使用这个功能，就能自动衍生出有关函数的相关注释</p><h3 id="minimap"><a href="#minimap" class="headerlink" title="minimap"></a>minimap</h3><p><img src="http://oy2kvpd7z.bkt.clouddn.com/md/1508423304575.png" alt=""><br>缩略图</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;之前写前端一直使用的是&lt;code&gt;webstorm&lt;/code&gt;,这个ide很好，功能也集成得不错，但是缺点太显著那就是慢，启动慢，打字有时候还会卡帧，这导致我不得不寻找一个轻量级的替代品，这次我考虑的由&lt;code&gt;vsc&lt;/code&gt;和&lt;code&gt;atom&lt;/code&gt;，最终还是决定使用atom，理由就是好看且顺手。我从今天上午开始到现在已经下载了很多好用的插件，写了这篇博客来梳理一下思绪&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="系统学习" scheme="http://yoursite.com/categories/%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="atom" scheme="http://yoursite.com/tags/atom/"/>
    
      <category term="编辑器" scheme="http://yoursite.com/tags/%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>近期开荒计划</title>
    <link href="http://yoursite.com/2017/10/18/%E8%BF%91%E6%9C%9F%E5%BC%80%E8%8D%92%E8%AE%A1%E5%88%92/"/>
    <id>http://yoursite.com/2017/10/18/近期开荒计划/</id>
    <published>2017-10-18T10:24:20.000Z</published>
    <updated>2017-10-18T12:23:24.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ol><li>git</li><li>数据库</li><li>sass</li><li>dash</li><li>alfred</li><li>框架</li><li>配置一款顺手的编辑器</li></ol></blockquote><a id="more"></a><h1 id="近期开荒计划"><a href="#近期开荒计划" class="headerlink" title="近期开荒计划"></a>近期开荒计划</h1><blockquote><p>因为webstorm太过笨重，于是想着找些轻量级的替代品。配置环境这种事情最是消磨时间也最能打击人，我花了一下午加半晚上的时间尝试了现行的较优的选择<code>atom</code>和<code>vsc</code>，事实证明，我可能真的比较蠢，也可能是缺乏耐心，没有一项我觉得比较好用，编辑器的事还是之后再说把</p></blockquote><h1 id="我对编辑器的要求"><a href="#我对编辑器的要求" class="headerlink" title="我对编辑器的要求"></a>我对编辑器的要求</h1><ul><li>配色好看（atom的配色是我目前看过最好看的）</li><li>对前端支持较好（atom比较优异）</li><li>对markdown支持较好（说实话我两款编辑器的markdown都用过了，还是觉得<code>macdown</code>好用且好看且轻便）</li><li>插件下载快速且可配置型高（这个vsc比atom好，atom下载太慢了，而且可配置项少，有的插件官网上都没说明白…）</li></ul><blockquote><p>我对编程应该还是持有兴趣的，但是感觉自己耐心不足且能力极其有限，唉，还是只能走一步看一步了</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;git&lt;/li&gt;
&lt;li&gt;数据库&lt;/li&gt;
&lt;li&gt;sass&lt;/li&gt;
&lt;li&gt;dash&lt;/li&gt;
&lt;li&gt;alfred&lt;/li&gt;
&lt;li&gt;框架&lt;/li&gt;
&lt;li&gt;配置一款顺手的编辑器&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="系统学习" scheme="http://yoursite.com/categories/%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>应对DNS污染</title>
    <link href="http://yoursite.com/2017/10/14/%E5%BA%94%E5%AF%B9DNS%E6%B1%A1%E6%9F%93/"/>
    <id>http://yoursite.com/2017/10/14/应对DNS污染/</id>
    <published>2017-10-13T23:37:59.000Z</published>
    <updated>2017-10-15T07:01:13.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>事情的起因是昨天室友跟我反映说他们b站上不去了，看我能不能登录。我发现我的电脑当时能够登录，但是当晚却始终load不出来，不仅如此，还有很多其他的网站如最近关注的个人博客登录不上，后来通过一系列分析确定应该是DNS污染的问题，并通过修改本地dns服务器来成功解决此问题</p></blockquote><a id="more"></a><h1 id="分析问题"><a href="#分析问题" class="headerlink" title="分析问题"></a>分析问题</h1><h2 id="问题的出现"><a href="#问题的出现" class="headerlink" title="问题的出现"></a>问题的出现</h2><p>2017/10/13日我和室友的电脑先后出现了部分网站上不去的问题（网速经测验没有问题），以我个人为例，打不开的网页有以下几个：</p><ul><li><a href="https://www.bilibili.com/" target="_blank" rel="external">b站</a></li><li><a href="https://www.qiniu.com/" target="_blank" rel="external">七牛云存储</a></li><li><a href="http://peihao.space/" target="_blank" rel="external">关注的私人博客</a></li></ul><p>这些网站都有一个特点，网页的title能解析出来，但是dom始终是一片空白，说明网页的服务器没问题，html能收到，可能是某个资源解析阻塞了。打开了调试之后发现，bootstrap的<a href="http://www.bootcdn.cn/" target="_blank" rel="external">cdn服务</a>的资源始终加载不出来，看来问题可能在这里。bootstrap的cdn是非常普遍的cdn解决方案，很多网站都采用了。也就是说如果这个问题不解决，很有可能会对我们的上网体验造成很大的困扰。遂上网查询了类似问题，有网友提到了可能是dns污染。我对计算机网络的了解也是一知半解，正好借这个机会捋一捋知识网。</p><h1 id="关于DNS污染和DNS劫持"><a href="#关于DNS污染和DNS劫持" class="headerlink" title="关于DNS污染和DNS劫持"></a>关于DNS污染和DNS劫持</h1><h2 id="什么是DNS"><a href="#什么是DNS" class="headerlink" title="什么是DNS"></a>什么是DNS</h2><p>在讲<code>DNS</code>之前，还是先提一下<code>计算机网络通讯</code>，<a href="https://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/001386832511628f1fe2c65534a46aa86b8e654b6d3567c000" target="_blank" rel="external">具体</a>不细说，大概意思就是计算机们之间是通过协议来进行通讯，最基本的协议有<code>TCP</code>和<code>UDP</code>，这些协议只需要知道对方的<code>ip</code>和<code>端口号</code>（web服务的端口统一是<code>80</code>）。实际上也就是说理论上你只要知道对方电脑的<code>ip</code>就可以访问。但是世界上计算机这么多,想要记住别人的ip何其苦难而且也没必要。于是人们开发出了<code>域名</code>系统，比如<code>www.baidu.com</code>对应的就是百度服务器的<code>ip</code>，那么我们在浏览器中输入对应的域名，这个域名怎么解析成对应的ip呢？这时候就要靠我们的<code>dns</code>系统了。</p><blockquote><p>DNS（Domain Name System，域名系统），因特网上作为域名和IP地址相互映射的一个分布式数据库，能够使用户更方便的访问互联网，而不用去记住能够被机器直接读取的IP数串。通过主机名，最终得到该主机名对应的IP地址的过程叫做域名解析（或主机名解析）。DNS协议运行在UDP协议之上，使用端口号53</p></blockquote><p>这是官方对dns的解释，实际上就是一个<code>域名字典</code>，能够根据域名来解析出对应主机的ip地址.我们打开<code>终端</code>，输入</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$<span class="built_in"> ping </span>www.zhihu.com</div></pre></td></tr></table></figure><p>得到的结果为</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">PING 6ej19t5k0le6q937.alicloudlayer.com (118.178.213.186): 56 data bytes</div><div class="line">64 bytes <span class="keyword">from</span> 118.178.213.186: <span class="attribute">icmp_seq</span>=0 <span class="attribute">ttl</span>=29 <span class="attribute">time</span>=27.525 ms</div><div class="line">64 bytes <span class="keyword">from</span> 118.178.213.186: <span class="attribute">icmp_seq</span>=1 <span class="attribute">ttl</span>=29 <span class="attribute">time</span>=27.360 ms</div><div class="line">64 bytes <span class="keyword">from</span> 118.178.213.186: <span class="attribute">icmp_seq</span>=2 <span class="attribute">ttl</span>=29 <span class="attribute">time</span>=24.600 ms</div></pre></td></tr></table></figure><p>说明我们本机能够访问<code>www.zhihu.com</code>,并且能够看到，解析出来的ip是<code>118.178。213.186</code></p><h2 id="DNS污染"><a href="#DNS污染" class="headerlink" title="DNS污染"></a>DNS污染</h2><blockquote><p>DNS污染是一种让一般用户由于得到虚假目标主机IP而不能与其通信的方法，是一种DNS缓存投毒攻击（DNS cache poisoning）。其工作方式是：由于通常的DNS查询没有任何认证机制，而且DNS查询通常基于的UDP是无连接不可靠的协议，因此DNS的查询非常容易被篡改，通过对UDP端口53上的DNS查询进行入侵检测，一经发现与关键词相匹配的请求则立即伪装成目标域名的解析服务器（NS，Name Server）给查询者返回虚假结果。</p></blockquote><p>百度百科上的解释已经很明白了，事实上就是路由器对用户发送的<code>dns请求包</code>做出了<code>假传圣旨</code>的举措（本来它只是个传话的公公）</p><h2 id="DNS劫持"><a href="#DNS劫持" class="headerlink" title="DNS劫持"></a>DNS劫持</h2><blockquote><p>DNS劫持就是通过劫持了DNS服务器，通过某些手段取得某域名的解析记录控制权，进而修改此域名的解析结果，导致对该域名的访问由原IP地址转入到修改后的指定IP，其结果就是对特定的网址不能访问或访问的是假网址，从而实现窃取资料或者破坏原有正常服务的目的。DNS劫持通过篡改DNS服务器上的数据返回给用户一个错误的查询结果来实现的。</p></blockquote><p>DNS劫持症状：在某些地区的用户在成功连接宽带后，首次打开任何页面都指向ISP提供的“电信互联星空”、“网通黄页广告”等内容页面。还有就是曾经出现过用户访问Google域名的时候出现了百度的网站。这些都属于DNS劫持。<br>　　<br>校园网的实现方式应该也算<code>dns挟持</code></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="DNS劫持-1"><a href="#DNS劫持-1" class="headerlink" title="DNS劫持"></a>DNS劫持</h3><p>就是指用户访问一个被标记的地址时，DNS服务器故意将此地址指向一个错误的IP地址的行为。范例，网通、电信、铁通的某些用户有时候会发现自己打算访问一个地址，却被转向了各种推送广告等网站，这就是DNS劫持。</p><h3 id="DNS污染-1"><a href="#DNS污染-1" class="headerlink" title="DNS污染"></a>DNS污染</h3><p>指的是用户访问一个地址，国内的服务器(非DNS)监控到用户访问的已经被标记地址时，服务器伪装成DNS服务器向用户发回错误的地址的行为。范例，访问Youtube、Facebook之类网站等出现的状况。</p><h1 id="应对方法"><a href="#应对方法" class="headerlink" title="应对方法"></a>应对方法</h1><h2 id="应对DNS劫持"><a href="#应对DNS劫持" class="headerlink" title="应对DNS劫持"></a>应对DNS劫持</h2><p>可以采用使用国外免费公用的DNS服务器解决。例如OpenDNS（208.67.222.222）或GoogleDNS（8.8.8.8）</p><h2 id="应对DNS污染"><a href="#应对DNS污染" class="headerlink" title="应对DNS污染"></a>应对DNS污染</h2><p>对于DNS污染，可以说，个人用户很难单单靠设置解决，通常可以使用VPN或者域名远程解析的方法解决，但这大多需要购买付费的VPN或SSH等，也可以通过修改Hosts的方法，手动设置域名正确的IP地址。</p><h2 id="本次问题的解决"><a href="#本次问题的解决" class="headerlink" title="本次问题的解决"></a>本次问题的解决</h2><p>单从形式上来看，本次事故更像是DNS污染，因为并不是指向了错误的网站，而是资源加载不出来，但是最后通过修改DNS的方法也成功地解决了这个问题，我的猜测是dns劫持了之后单纯返回了错误的ip。不过更大的疑点是：只有我们宿舍出现了这种情况！（我跑到对面宿舍去借同学的电脑登录我之前登不上的网站发现都没问题…）有种不对的感觉Orz</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;事情的起因是昨天室友跟我反映说他们b站上不去了，看我能不能登录。我发现我的电脑当时能够登录，但是当晚却始终load不出来，不仅如此，还有很多其他的网站如最近关注的个人博客登录不上，后来通过一系列分析确定应该是DNS污染的问题，并通过修改本地dns服务器来成功解决此问题&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="技术细节" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E7%BB%86%E8%8A%82/"/>
    
    
      <category term="DNS" scheme="http://yoursite.com/tags/DNS/"/>
    
  </entry>
  
  <entry>
    <title>gulp入门之入门</title>
    <link href="http://yoursite.com/2017/10/12/gulp%E5%85%A5%E9%97%A8%E4%B9%8B%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2017/10/12/gulp入门之入门/</id>
    <published>2017-10-12T09:41:22.000Z</published>
    <updated>2017-10-12T10:25:46.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>之所以这篇文章取名为“入门之入门”，因为连入门都算不上，只是暂时了解一下这门技术，并且应用于我的博客的优化中。其实<code>gulp</code>很早之前就有所接触了，这次终于有机会体验一把了</p></blockquote><a id="more"></a><p>我的gulp学习历程比较奇葩，是首先按教程和自己摸索，使用gulp把网站优化了之后再去看gulp的有关资料的，事实证明gulp的源码非常明了，我从来没接触过的人看一眼也能明白每段代码具体是干什么的。首先还是介绍一下如何使用<code>gulp</code>优化网站吧。</p><h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>因为我们发现每次<code>deploy</code>都是先将<code>public</code>文件夹下的内容清理干净（事实上，public文件夹就是你上传到github上的最终内容），然后把全部文件编译生成一遍，再次生成<code>public</code>文件夹，再上传，如果博客数一旦变多，这个过程就会很慢且效率底下，我们需要<code>gulp</code>这个工具来压缩代码（这个功能是教程里提供的，事实上<code>gulp</code>能做的远不止这么些）</p><h1 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h1><h2 id="安装gulp"><a href="#安装gulp" class="headerlink" title="安装gulp"></a>安装gulp</h2><p>在博客的<code>根目录</code>，执行以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> npm install gulp -g</span></div><div class="line"><span class="meta">$</span><span class="bash"> npm install gulp-minify-css gulp-uglify gulp-htmlmin gulp-htmlclean gulp --save</span></div><div class="line"><span class="meta">$</span><span class="bash"> npm install gulp-babel</span></div></pre></td></tr></table></figure><blockquote><p>这里的<code>gulp-babel</code>是我后来自己加的，原教程没有加，但是在之后的<code>deploy</code>会出错</p></blockquote><h2 id="新建配置文件"><a href="#新建配置文件" class="headerlink" title="新建配置文件"></a>新建配置文件</h2><p>在博客的根目录下，新建名为<code>gulp.js</code>的文件，文件内容为</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line"><span class="keyword">var</span> minifycss = <span class="built_in">require</span>(<span class="string">'gulp-minify-css'</span>);</div><div class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</div><div class="line"><span class="keyword">var</span> babel = <span class="built_in">require</span>(<span class="string">'gulp-babel'</span>);</div><div class="line"><span class="keyword">var</span> htmlmin = <span class="built_in">require</span>(<span class="string">'gulp-htmlmin'</span>);</div><div class="line"><span class="keyword">var</span> htmlclean = <span class="built_in">require</span>(<span class="string">'gulp-htmlclean'</span>);</div><div class="line"><span class="comment">// 压缩 public 目录 css</span></div><div class="line">gulp.task(<span class="string">'minify-css'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.css'</span>)</div><div class="line">        .pipe(minifycss())</div><div class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>));</div><div class="line">&#125;);</div><div class="line"><span class="comment">// 压缩 public 目录 html</span></div><div class="line">gulp.task(<span class="string">'minify-html'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.html'</span>)</div><div class="line">    .pipe(htmlclean())</div><div class="line">    .pipe(htmlmin(&#123;</div><div class="line">         removeComments: <span class="literal">true</span>,</div><div class="line">         minifyJS: <span class="literal">true</span>,</div><div class="line">         minifyCSS: <span class="literal">true</span>,</div><div class="line">         minifyURLs: <span class="literal">true</span>,</div><div class="line">    &#125;))</div><div class="line">    .pipe(gulp.dest(<span class="string">'./public'</span>))</div><div class="line">&#125;);</div><div class="line"><span class="comment">// 压缩 public/js 目录 js</span></div><div class="line">gulp.task(<span class="string">'minify-js'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.js'</span>)</div><div class="line">        .pipe(babel())</div><div class="line">        .pipe(uglify())</div><div class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>));</div><div class="line">&#125;);</div><div class="line"><span class="comment">// 执行 gulp 命令时执行的任务</span></div><div class="line">gulp.task(<span class="string">'default'</span>, [</div><div class="line">    <span class="string">'minify-html'</span>,<span class="string">'minify-css'</span>,<span class="string">'minify-js'</span></div><div class="line">]);</div></pre></td></tr></table></figure><blockquote><p>没有添加<code>babel()</code>环节时，终端会报错说压缩js文件出错，我查了一下，说是es6需要编译，那么还需要引入<code>gulp-babel</code>文件，并且在<code>gulp</code>的<code>pipe</code>里添加一个<code>.pipe(babel())</code></p></blockquote><h2 id="修改deploy-sh文件"><a href="#修改deploy-sh文件" class="headerlink" title="修改deploy.sh文件"></a>修改deploy.sh文件</h2><p>gulp的基本配置已经完成了，我们只需要在生成hexo的public文件时，使用之就可以了，具体操作是，打开<code>deploy.sh</code>文件，将其</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">hexo g</span></div></pre></td></tr></table></figure><p>修改为</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo g <span class="meta">&amp; gulp</span></div></pre></td></tr></table></figure><p>完成，这样每次运行`deploy.sh脚本时，在生成文件都会提高效率</p><h1 id="关于gulp"><a href="#关于gulp" class="headerlink" title="关于gulp"></a>关于gulp</h1><p>接下来就是我对<code>gulp</code>的一些了解，看一下一位前端工作者对<code>gulp</code>的描述</p><blockquote><p>Gulp / Grunt 是工具链、构建工具，它们能够优化前端工作流程。比如自动刷新页面、combo、压缩css、js、编译less等等。使用Gulp/Grunt，然后配置你需要的插件，就可以替代手工实现自动化工作。</p></blockquote><p>我自己的理解就是是一个自动化工具，配合各种插件（几千种），能够自定义实现很多流水线工作，尤其是和<code>less</code>或者<code>sass</code>等css预编译语言配合，但是现在还不是我学习这个的最佳时机，因为我暂时平时用到这个的地方很少，等到研究生阶段做项目的时候再深入理解之。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>越学习发现需要学习的东西越多，自己掌握的还是太少了。通过这次实践之后，坚定了我学习<code>gulp</code>&amp;<code>less</code>&amp;<code>脚手架工具</code>的决心。此外，我还深切体会到了<code>懒是程序员的第一动力</code>这句话的真谛，要始终明白，程序员的首要工作是<code>创造</code>，而不是<code>重复性工作</code>。感觉好像回到了学习<code>SICP</code>的时候，当时被书里抽象了又抽象的思想震撼到了。唉，要不是被考研束缚住了，我现在就想每天抱着笔记本再买些书天天泡前端…（bu cun zai de）</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;之所以这篇文章取名为“入门之入门”，因为连入门都算不上，只是暂时了解一下这门技术，并且应用于我的博客的优化中。其实&lt;code&gt;gulp&lt;/code&gt;很早之前就有所接触了，这次终于有机会体验一把了&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="系统学习" scheme="http://yoursite.com/categories/%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="gulp" scheme="http://yoursite.com/tags/gulp/"/>
    
  </entry>
  
  <entry>
    <title>初识shell</title>
    <link href="http://yoursite.com/2017/10/12/%E5%88%9D%E8%AF%86shell/"/>
    <id>http://yoursite.com/2017/10/12/初识shell/</id>
    <published>2017-10-12T02:54:56.000Z</published>
    <updated>2017-10-18T14:22:32.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>事情的初衷是我在测试站点配置时需要不断重复一些步骤，比如<code>depoly三连</code>，<code>建站二连</code>，虽然使用终端操控已经很简便了，但是尝试多了之后也会厌烦。于是想到写一个shell脚本来帮助我完成以上的任务，这样的话我每次只要打开终端，按一个小小的<code>up</code>键调用历史命令就可以完成上述任务了。同时这也是我真正意义上第一次接触<code>shell脚本编程</code></p></blockquote><a id="more"></a><h1 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h1><p>在开始写脚本之前还需要进行一些基础的环境配置</p><h2 id="新建shell文件夹"><a href="#新建shell文件夹" class="headerlink" title="新建shell文件夹"></a>新建shell文件夹</h2><p>这个主要是方便管理shell文件，因为以后肯定还要写的，干脆用一个统一的文件夹存起来好了，我的存储路径是<code>/Users/lizhiyuan/Documents/Shell</code></p><h2 id="将上述文件夹路径添加至环境变量"><a href="#将上述文件夹路径添加至环境变量" class="headerlink" title="将上述文件夹路径添加至环境变量"></a>将上述文件夹路径添加至环境变量</h2><p>主要是每次启动终端想要打开shell文件，都需要首先<code>cd</code>到上述路径里，太麻烦了，不如直接添加到环境变量里，这样的话每次只需要在终端里敲shell文件名就可以运行shell文件了</p><p>mac下自带的终端是<code>bash</code>，我之前换成了<code>zsh</code>，影响都不大。如果是<code>bash</code>，就打开<code>.bash_profile</code>文件，如果是<code>zsh</code>，就打开<code>.zshrc</code>，然后添加如下代码</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=/Users/lizhiyuan/Documents/Shell:$PATH</div></pre></td></tr></table></figure><p>大意就是将上述路径添加至环境变量，当然我为了懒，还在里面添加了</p><figure class="highlight monkey"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">alias</span> <span class="title">shfile</span>=<span class="string">"/Users/lizhiyuan/Documents/Shell"</span></div></pre></td></tr></table></figure><p>就是将上述路径命了一个别名叫<code>shfile</code>，这样我每次在终端里输入<code>shfile</code>就可以进入上述路径了</p><p>当然这里可以一次搞完，再添加一下博客的别名</p><figure class="highlight monkey"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">alias</span> <span class="title">blog</span>=<span class="string">"/Users/lizhiyuan/Documents/blog"</span></div></pre></td></tr></table></figure><h2 id="检验效果"><a href="#检验效果" class="headerlink" title="检验效果"></a>检验效果</h2><p>重启终端，直接键入之前的关键词，如<code>blog</code>，<code>shfile</code>，如果能直接显示进入路径则表示更改成功，当然也可以通过输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> PATH</span></div></pre></td></tr></table></figure><p>来查看当前环境变量</p><h1 id="deploy三连"><a href="#deploy三连" class="headerlink" title="deploy三连"></a>deploy三连</h1><p>哈哈这个名字是起着好玩的，实际上就是每次需要把本地hexo博客上传至github或者其他托管的网站上需要的三个步骤，现在我将其简化，只需要一个<code>deploy.sh</code>就可以完成步骤</p><h2 id="新建shell文件"><a href="#新建shell文件" class="headerlink" title="新建shell文件"></a>新建shell文件</h2><p>在之前的<code>shell</code>文件夹下，新建一个名为<code>deploy.sh</code>（或者其他你认为可以表示这样一个过程的名字）的文件</p><h2 id="添加代码"><a href="#添加代码" class="headerlink" title="添加代码"></a>添加代码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/zsh</span></div><div class="line"></div><div class="line"><span class="built_in">cd</span> ~/Documents/blog</div><div class="line"></div><div class="line">hexo clean</div><div class="line"></div><div class="line">hexo g</div><div class="line"></div><div class="line">hexo d</div></pre></td></tr></table></figure><p>其中第一行表示这个文件由<code>zsh</code>来解释,如果你的电脑是<code>bash</code>，就改成<code>#!/bin/bash</code></p><h2 id="赋予权限"><a href="#赋予权限" class="headerlink" title="赋予权限"></a>赋予权限</h2><p>如果直接在终端里运行上述文件，终端会提示你没有权限，这个时候我们需要<code>cd</code>到<code>shell</code>的根目录下，比如我的电脑就是<code>cd ~/Documents/shell</code>，然后输入<code>chmod +x  deploy.sh</code>,权限问题解决</p><h2 id="newSite二连"><a href="#newSite二连" class="headerlink" title="newSite二连"></a>newSite二连</h2><blockquote><p>这个问题说实话我还没有很好地解决，目前只是用了一个替代方法。</p></blockquote><p>首先说明这个文件的需要，背景是我每次调试网站时，有些变化需要重新部署环境才能看到的，也就是说我需要</p><ol><li>终止当前<code>hexo serve</code>服务</li><li>查看当前端口<code>4001</code>被什么进程占用了（我默认是用4001，因为4000被<code>node</code>占用了）</li><li>kill 上述进程</li><li>cd blog目录</li><li><code>hexo serve --port 4001</code></li></ol><p>前三步可以用关掉当前终端来解决，但是用多了之后还是会觉得麻烦，最好是用一个脚本解决上述所有问题，不需要关闭终端，脚本自动找到端口<code>4001</code>占用的进程，并且kill掉上述进程，之后启动<code>serve</code>服务。</p><p>问题就出在找到指定端口对应的进程，原来我是采用<code>$ lsof -i:4001</code>来查看，但是这个命令只能log当前进程，我不知道能不能返回当前进程，再加上我对shell的语法不是很熟悉，所以只能在网上寻求帮助，但是搜索一圈之后也无果。后来发现<code>netstat</code>命令也可以实现类似的功能，但是在自己尝试解析<code>netstat</code>时，发现终端似乎无能为力</p><p>我目前采取的解决方案是写一个脚本运行上述的<code>4，5</code>步骤，其他的用关闭终端来解决。脚本命名为<code>newSite.sh</code>，内容如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/zsh</span></div><div class="line"></div><div class="line"><span class="built_in">cd</span> ~/Documents/blog</div><div class="line"></div><div class="line">hexo serve --port 4001</div></pre></td></tr></table></figure><blockquote><p>以后彻底解决了这个问题再来补充</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;事情的初衷是我在测试站点配置时需要不断重复一些步骤，比如&lt;code&gt;depoly三连&lt;/code&gt;，&lt;code&gt;建站二连&lt;/code&gt;，虽然使用终端操控已经很简便了，但是尝试多了之后也会厌烦。于是想到写一个shell脚本来帮助我完成以上的任务，这样的话我每次只要打开终端，按一个小小的&lt;code&gt;up&lt;/code&gt;键调用历史命令就可以完成上述任务了。同时这也是我真正意义上第一次接触&lt;code&gt;shell脚本编程&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="系统学习" scheme="http://yoursite.com/categories/%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="shell" scheme="http://yoursite.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 绑定个性域名</title>
    <link href="http://yoursite.com/2017/10/11/Hexo-%E7%BB%91%E5%AE%9A%E4%B8%AA%E6%80%A7%E5%9F%9F%E5%90%8D/"/>
    <id>http://yoursite.com/2017/10/11/Hexo-绑定个性域名/</id>
    <published>2017-10-11T12:49:26.000Z</published>
    <updated>2017-10-11T12:50:28.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>每次都通过githubpages来访问可能稍显冗长，而且github最近越来越不稳定，几次我都以为是被墙了。在偷懒心的作用下我开始了一场有惊无险的更换域名之旅…</p></blockquote><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>关于<code>github pages</code>+<code>hexo</code>+<code>个性域名</code>的教程网上很多，我这里只列出我自己的亲身经历，以供参考</p><h1 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a>购买域名</h1><p>域名的购买有很多途径</p><ul><li><a href="https://wanwang.aliyun.com/?spm=a2c0j.8903112.388261.221.5348e51fe828vr" target="_blank" rel="external">阿里云</a></li><li><a href="https://dcc.godaddy.com/" target="_blank" rel="external">godaddy</a></li></ul><p>以上两个都可以,随便选一个自己喜欢的就可以了。首先进入上述链接，在搜索栏里输入自己理想的域名，如果未被抢注就可以购买之，一般价格在几十块一年。我最终选用的是<a href="https://dcc.godaddy.com/" target="_blank" rel="external">godaddy</a>的，以下的教程也以其为例。（其实阿里云更好，可以域名+解析一条龙）</p><h1 id="设置域名解析"><a href="#设置域名解析" class="headerlink" title="设置域名解析"></a>设置域名解析</h1><p>如果是买的阿里云的域名的话，应该可以直接在<code>我的产品</code>里找到解析选项，我这里虽然购买的是<code>godaddy</code>的域名，但是并没有使用它提供的DNS解析服务，因为<code>dodaddy</code>是一个新加坡的网站，因为某些不可描述的原因，为了稳定性着想，最好是采用国内的域名解析服务，我采用的是<a href="www.dnspod.cn">DNSPod</a>，这个是腾讯的服务，而且是免费的</p><h1 id="添加域名"><a href="#添加域名" class="headerlink" title="添加域名"></a>添加域名</h1><p><img src="http://img.hb.aicdn.com/d1afe5b8fbf2cfd74fc9394f15092c7c1c7a5ef91181c-0vZed9_fw192" alt=""></p><p>在这里点击添加域名，输入你刚购买的个性域名，如我的就是<a href="prozac-laputa.com">prozac-laputa.com</a></p><p>点进去按这样设置</p><p><img src="http://img.hb.aicdn.com/1863242101714f5ed882842add7328112b804acb2ad95-SmHU1s_fw192" alt=""></p><p>其中，第一项第二项为gituhub的ip，三四项无法修改，第五项，类型设置为<code>CNAME</code>,值设置为githubpages的链接如<code>username.github.io</code></p><h1 id="设置域名服务器"><a href="#设置域名服务器" class="headerlink" title="设置域名服务器"></a>设置域名服务器</h1><p>因为我这个购买域名的网站和域名解析的服务商不是一家，所以需要在<code>域名商</code>也就是<code>godaddy</code>这里设置<code>域名服务器</code>。</p><p><img src="http://img.hb.aicdn.com/5e8d8502cd63107258a3096f1b21d8b79cd4fded23f88-fSsMGp_fw192" alt=""></p><blockquote><p>注意，上述这个页面是要邮箱验证之后才会显示。我其实一星期前就买了这个网站，但是发现一直无法修改，突然在另外一个博客里看到域名购买之后需要马上验证，要不然会有被<strong>封锁的风险</strong>。急忙打开邮箱，完成了验证</p></blockquote><p>将域名服务器的两个值分别设置为我图中的设置即可</p><h1 id="设置github的CNAME"><a href="#设置github的CNAME" class="headerlink" title="设置github的CNAME"></a>设置github的CNAME</h1><p>需要在github里你这个项目的根目录下创建一个名为<code>CNAME</code>的文件（注意没有后缀），里面就写上你购买的域名即可，但是这样麻烦的是每次<code>deploy</code>之后就需要重新建立一次，非常麻烦。实际上，只需要在你本地的<code>source</code>（hexo的source，不是主题的source）里新建这个<code>CNAME</code>即可，这样就可以每次自动生成CNAME文件</p><h1 id="我的经历"><a href="#我的经历" class="headerlink" title="我的经历"></a>我的经历</h1><p>设置完上面的各个步骤之后，理论上应该只需要等待即可。但是我因为是第一次设置比较紧张，经历了一个非常惊心动魄的过程。我在完成上述步骤之后，突然发现不仅新网站打不开，原来的githubpages页面也自动定向到了<code>yoursite.com</code>这个页面，把我吓了一跳，可是当我把<code>DNSPod</code>的解析服务给停了之后，我的githubpages还是没有恢复！也就是说，还有dns服务商在解析我这个网址!使用网上的解析跟踪服务时发现，<code>github.io</code>这个后缀的根本解析不到，也就是说暂时找不到谁在解析我github域名.瞬间有种博客废掉了的感觉，只能自己本地访问的博客有什么用…我甚至还有换个github账号的冲动，还好等待了一段时间之后我发现新域名可以访问了，原来的链接依旧链接为<code>yoursite.com</code>，这才明白这就是解析本身的问题，相当于dns服务器会把我的githubpages链接解析成新地址的ip，但是新地址还没有部署好，所以就会出现之前那样的错误，至于为什么会是<code>yoursite.com</code>，我也不太清楚，可能是因为我最开始的时候CNAME里的值为默认的<code>yoursite.com</code>没有修改（但是我还是没有想明白为什么在停掉dns解析服务之后还是会出现那样的错误…）</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><blockquote><p>遇到问题不要轻易放弃，要尽可能地想办法解决（本来我计划是之后找学校计院的老师问一下的…）</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;每次都通过githubpages来访问可能稍显冗长，而且github最近越来越不稳定，几次我都以为是被墙了。在偷懒心的作用下我开始了一场有惊无险的更换域名之旅…&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="技术细节" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E7%BB%86%E8%8A%82/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Next主题配置</title>
    <link href="http://yoursite.com/2017/10/10/hexo-next%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2017/10/10/hexo-next主题配置/</id>
    <published>2017-10-10T06:49:51.000Z</published>
    <updated>2017-10-15T07:16:23.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>解决了博客的最基本的发文章和上传至同步之后，面临的问题自然是为自己的网站添加更多功能，当然可以选择DIY，但是想到自己能力有限，就算做出来想必也是优化和性能上有很大问题，就还是按部就班地来吧</p></blockquote><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>说实话，网上的教程很多，但是我仔细观察，发现基本上都是抄来抄去，也就是说错误类型一致，我配置站点的过程中参考了n篇教程，列一篇最有效的以供参考<a href="http://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.html" target="_blank" rel="external">Moorez</a>。本文大部分配置都是参考之，非常感谢大大。如果大家想要手把手从头开始配置建议参考他的文章，因为我的文章没有附图，很难看到效果，但是本文的坑全是我自己踩出来的，是得到了实践证明的。</p><h1 id="配置选项"><a href="#配置选项" class="headerlink" title="配置选项"></a>配置选项</h1><h2 id="本地搜索"><a href="#本地搜索" class="headerlink" title="本地搜索"></a>本地搜索</h2><h3 id="在站点根目录下执行以下命令"><a href="#在站点根目录下执行以下命令" class="headerlink" title="在站点根目录下执行以下命令"></a>在站点根目录下执行以下命令</h3><p><code>$ npm install hexo-generator-searchdb --save</code></p><h3 id="在站点文件里任意位置加上"><a href="#在站点文件里任意位置加上" class="headerlink" title="在站点文件里任意位置加上"></a>在站点文件里任意位置加上</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">search:</div><div class="line">path: search.xml</div><div class="line">field: post</div></pre></td></tr></table></figure><h3 id="在主题配置文件里更改（默认为false）"><a href="#在主题配置文件里更改（默认为false）" class="headerlink" title="在主题配置文件里更改（默认为false）"></a>在主题配置文件里更改（默认为false）</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Local search</span></div><div class="line"><span class="attr">local_search:</span></div><div class="line"><span class="attr">enable:</span> <span class="literal">true</span></div></pre></td></tr></table></figure><p>顺便多说一句，网上的大部分教程都只说了前两步，而没有提到第三步，最后的结果应该是这样的<br><img src="http://img.hb.aicdn.com/bccc1873543ce6864c59fdbb24e1f0d6e2aff05d4140-y62wsw_fw192" alt="search"></p><h2 id="百度统计"><a href="#百度统计" class="headerlink" title="百度统计"></a>百度统计</h2><h3 id="首先登录百度统计"><a href="#首先登录百度统计" class="headerlink" title="首先登录百度统计"></a>首先登录<a href="http://tongji.baidu.com/" target="_blank" rel="external">百度统计</a></h3><p>注意这个账号不是你的百度账号（搞不懂为什么明明是一家人不用一组账号…），之后跳出来的页面中，只需要复制<code>hm.js?</code>后面的id即可</p><h3 id="编辑主题配置文件"><a href="#编辑主题配置文件" class="headerlink" title="编辑主题配置文件"></a>编辑主题配置文件</h3><p>修改<code>baidu_analytics</code>的值为你之前复制的id即可</p><h3 id="最后成果"><a href="#最后成果" class="headerlink" title="最后成果"></a>最后成果</h3><p>当我兴高采烈地弄完上面的步骤后发现还是不对，始终没有刷新出来，后来才恍然大悟，原来我还是在用本地的seerver看，而百度的服务是针对你的网站本身的，所以在上传之后应该是可以成功显示百度统计的功能的</p><h2 id="评论区"><a href="#评论区" class="headerlink" title="评论区"></a>评论区</h2><blockquote><p>在参考了网上的多篇文章之后，最终还是决定使用<a href="https://livere.com/" target="_blank" rel="external">来必力</a></p></blockquote><p>原因有几点</p><ol><li>界面好看</li><li>没有奇怪的标语</li><li>UI美观</li></ol><h3 id="登录来必力，获取id"><a href="#登录来必力，获取id" class="headerlink" title="登录来必力，获取id"></a>登录<a href="https://livere.com/" target="_blank" rel="external">来必力</a>，获取id</h3><blockquote><p>注册时可能需要梯子</p></blockquote><p>来必力的官网有点奇怪，明明都是正常的中文，但是在登录时会莫名其妙地切换成汉语，原本是打算在chromedev里更改html的head里的<code>lang</code>为<code>ko</code>然后让Chrome自动翻译，但是这个方法行不通，它需要页面一开始加载时<code>lang</code>值更改才会出现需要翻译的提示。当然我们也可以选择百度翻译，这才知道原来是向我的邮箱里发送了验证码，一番折腾之后终于得到了id</p><h3 id="编辑主题配置文件-1"><a href="#编辑主题配置文件-1" class="headerlink" title="编辑主题配置文件"></a>编辑主题配置文件</h3><p>编辑<code>livere_uid</code>字段如下</p><p><code>livere_uid: #your livere_uid</code>    </p><h2 id="文章内链接颜色修改"><a href="#文章内链接颜色修改" class="headerlink" title="文章内链接颜色修改"></a>文章内链接颜色修改</h2><p>实际上就是修改css的事，只要知道了css的位置就能很容易地修改（但是说实话这个项目不愧是大工程，我还没讲过分类这么细的css，以后接触的项目越多应该就会习以为常吧）<br>进入文件</p><p><code>themes\next\source\css\_common\components\post\post.styl</code></p><p>在末尾加上</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 文章内链接文本样式</span></div><div class="line"><span class="selector-class">.post-body</span> <span class="selector-tag">p</span> <span class="selector-tag">a</span>&#123;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#0593d3</span>;</div><div class="line">  <span class="attribute">border-bottom</span>: none;</div><div class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#0593d3</span>;</div><div class="line">  &amp;:hover &#123;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#fc6423</span>;</div><div class="line">    <span class="attribute">border-bottom</span>: none;</div><div class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#fc6423</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>其中选择<code>.post-body</code>是为了不影响标题，选择<code>p</code>是为了不影响首页“阅读全文”的显示样式,颜色可以自己定义。</p><h2 id="修改代码块自定义样式"><a href="#修改代码块自定义样式" class="headerlink" title="修改代码块自定义样式"></a>修改代码块自定义样式</h2><p>打开<code>\themes\next\source\css\_custom\custom.styl</code>修改为</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Custom styles.</span></div><div class="line"><span class="selector-tag">code</span> &#123;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#ff7600</span>;</div><div class="line">    <span class="attribute">background</span>: <span class="number">#fbf7f8</span>;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">2px</span>;</div><div class="line">&#125;</div><div class="line">&lt;!--<span class="comment">// 大代码块的自定义样式</span></div><div class="line"><span class="selector-class">.highlight</span>, pre &#123;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">5px</span> <span class="number">0</span>;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">5px</span>;</div><div class="line">    <span class="attribute">border-radius</span>: <span class="number">3px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.highlight</span>, <span class="selector-tag">code</span>, pre &#123;</div><div class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#d6d6d6</span>;</div><div class="line">&#125;--&gt;</div></pre></td></tr></table></figure><h2 id="主页文章添加阴影效果"><a href="#主页文章添加阴影效果" class="headerlink" title="主页文章添加阴影效果"></a>主页文章添加阴影效果</h2><p>同上，在<code>custom</code>里添加</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 主页文章添加阴影效果</span></div><div class="line"> <span class="selector-class">.post</span> &#123;</div><div class="line">   <span class="attribute">margin-top</span>: <span class="number">60px</span>;</div><div class="line">   <span class="attribute">margin-bottom</span>: <span class="number">60px</span>;</div><div class="line">   <span class="attribute">padding</span>: <span class="number">25px</span>;</div><div class="line">   -webkit-<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> rgba(<span class="number">202</span>, <span class="number">203</span>, <span class="number">203</span>, .<span class="number">5</span>);</div><div class="line">   -moz-<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> rgba(<span class="number">202</span>, <span class="number">203</span>, <span class="number">204</span>, .<span class="number">5</span>);</div><div class="line">  &#125;</div></pre></td></tr></table></figure><h2 id="显示每篇文章的字数和大概阅读时间"><a href="#显示每篇文章的字数和大概阅读时间" class="headerlink" title="显示每篇文章的字数和大概阅读时间"></a>显示每篇文章的字数和大概阅读时间</h2><h3 id="在根目录下安装hexo-wordcount"><a href="#在根目录下安装hexo-wordcount" class="headerlink" title="在根目录下安装hexo-wordcount"></a>在根目录下安装<code>hexo-wordcount</code></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> npm install hexo-wordcount --save</span></div></pre></td></tr></table></figure><h3 id="在主题的配置文件中，修改如下"><a href="#在主题的配置文件中，修改如下" class="headerlink" title="在主题的配置文件中，修改如下"></a>在主题的配置文件中，修改如下</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Post wordcount display settings</span></div><div class="line"><span class="comment"># Dependencies: https://github.com/willin/hexo-wordcount</span></div><div class="line"><span class="attr">post_wordcount:</span></div><div class="line"><span class="attr">  item_text:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  wordcount:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  min2read:</span> <span class="literal">true</span></div></pre></td></tr></table></figure><p>但是，如果光是这样设置，我们会发现没有单位显示。这时候打开<code>Blog\themes\next\layout\_macro\post.swig</code><br>找到</p><figure class="highlight django"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">title</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; __('post.wordcount') &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></div><div class="line"><span class="xml">     </span><span class="template-variable">&#123;&#123; wordcount(post.content) &#125;&#125;</span><span class="xml"></span></div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></div></pre></td></tr></table></figure><p>修改成</p><figure class="highlight django"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">title</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; __('post.wordcount') &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></div><div class="line"><span class="xml">     </span><span class="template-variable">&#123;&#123; wordcount(post.content) &#125;&#125;</span><span class="xml"> 字</span></div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></div></pre></td></tr></table></figure><p>后面一个修改时间的同理，找到</p><figure class="highlight django"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">title</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; __('post.min2read') &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></div><div class="line"><span class="xml">   </span><span class="template-variable">&#123;&#123; min2read(post.content) &#125;&#125;</span><span class="xml"></span></div><div class="line"><span class="xml"> <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></div></pre></td></tr></table></figure><p>改成</p><figure class="highlight django"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">title</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; __('post.min2read') &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></div><div class="line"><span class="xml">   </span><span class="template-variable">&#123;&#123; min2read(post.content) &#125;&#125;</span><span class="xml"> 分钟</span></div><div class="line"><span class="xml"> <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></div></pre></td></tr></table></figure><p>事实就是修改span的内容，说起来很简单的东西，但是我发现修改了之后死活没有变化，按理来说这里的原理并不复杂应该不会有什么变数才对，后来我发现需要重新配置环境，直接刷新是不行的，关闭终端，重新<code>hexo serve</code>就ok了</p><h2 id="添加顶部加载条"><a href="#添加顶部加载条" class="headerlink" title="添加顶部加载条"></a>添加顶部加载条</h2><p>因为我参考的文章作者的pull request被merge了，所以现在只需要在<strong>站点配置文件</strong>中修改<code>pace</code>为<code>true</code>即可.<strong>站点配置文件</strong>里还有各种loading的主题可以选择,我把里面的主题都尝试了一遍，最终还是决定采用<code>pace-theme-minimal</code>主题。</p><h2 id="添加动态背景"><a href="#添加动态背景" class="headerlink" title="添加动态背景"></a>添加动态背景</h2><p>如果<code>hexo</code>是最新版本的话，只需要在<strong>主题配置文件</strong>里找到<code>canvas-nest</code>，将其属性改为<code>true</code>。当然，事实上文档里有很多主题，我选用的是另外一个<code>canvas-lines</code></p><blockquote><p>但是，我发现添加了动态背景之后主页文章透明度太低了，有点奇怪的感觉。那还是打开刚才的<code>costom.styl</code>,添加如下的代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> backgroung-color: rgba(255, 255, 255, .5);</span></div><div class="line"><span class="meta">&gt;</span><span class="bash"></span></div></pre></td></tr></table></figure></blockquote><p>我之前还奇怪为什么hexo的库里会有three，现在终于明白了，是用来当背景使用的</p><h2 id="推荐网站"><a href="#推荐网站" class="headerlink" title="推荐网站"></a>推荐网站</h2><p>也就是在文章的右侧可以设置推荐网站，其实很简单，打开<code>主题配置文件</code>，找到<code>links</code>,将代码更改为</p><h3 id="设置推荐网站"><a href="#设置推荐网站" class="headerlink" title="设置推荐网站"></a>设置推荐网站</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># Blog rolls</span></div><div class="line"><span class="symbol">links_icon:</span> link</div><div class="line"><span class="symbol">links_title:</span> 不妨看看</div><div class="line"><span class="meta">#links_layout: block</span></div><div class="line"><span class="symbol">links_layout:</span> inline</div><div class="line"><span class="symbol">links:</span></div><div class="line">  小土刀: http:<span class="comment">//wdxtub.com/1997/09/11/booklist-page/</span></div><div class="line">  羡辙: http:<span class="comment">//zhangwenli.com/</span></div></pre></td></tr></table></figure><h2 id="修改推荐网站icon"><a href="#修改推荐网站icon" class="headerlink" title="修改推荐网站icon"></a>修改推荐网站icon</h2><p>实际上就是修改<code>不妨看看</code>前面的icon样式，默认是一个链接，在<a href="http://fontawesome.io/icons/" target="_blank" rel="external">font-awesome</a>中找到你喜欢的样式之后把代码拷贝，打开<code>/theme/next/layout/_macro/sidebar.swig</code>中，找到<code>blogroll</code>（这个名字是通过chrome开发者工具找到的），将部分代码修改如下</p><figure class="highlight django"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="xml"></span><span class="comment">&#123;# Blogroll #&#125;</span><span class="xml"></span></div><div class="line"><span class="xml">          </span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> theme.links %&#125;</span><span class="xml"></span></div><div class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"links-of-blogroll motion-element </span></span></span><span class="template-variable">&#123;&#123; "links-of-blogroll-" + theme.links_layout | default('inline') &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></div><div class="line"><span class="xml">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"links-of-blogroll-title"</span>&gt;</span></span></div><div class="line"><span class="xml">                <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-yourfavicon"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></div><div class="line"><span class="xml">                </span><span class="template-variable">&#123;&#123; theme.links_title &#125;&#125;</span><span class="xml"></span></div><div class="line"><span class="xml">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line"><span class="xml">              <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"links-of-blogroll-list"</span>&gt;</span></span></div><div class="line"><span class="xml">                </span><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> name, link <span class="keyword">in</span> theme.links %&#125;</span><span class="xml"></span></div><div class="line"><span class="xml">                  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"links-of-blogroll-item"</span>&gt;</span></span></div><div class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; link &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">title</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; name &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span></span><span class="template-variable">&#123;&#123; name &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></div><div class="line"><span class="xml">                  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line"><span class="xml">                </span><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span><span class="xml"></span></div><div class="line"><span class="xml">              <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></div><div class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line"><span class="xml">          </span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="xml"></span></div></pre></td></tr></table></figure><p>这里代码里的<code>fa-yourfavicon</code>就是之前说过的代码名称，改完之后重新部署即可</p><h2 id="更改网站icon"><a href="#更改网站icon" class="headerlink" title="更改网站icon"></a>更改网站icon</h2><p>这个折腾了我好久…</p><h3 id="下载图标"><a href="#下载图标" class="headerlink" title="下载图标"></a>下载图标</h3><p>在<a href="http://www.easyicon.net/" target="_blank" rel="external">easyicon</a>中下载一个32x32的文件，并存为<br><code>favicon.ico</code></p><h3 id="存入本地"><a href="#存入本地" class="headerlink" title="存入本地"></a>存入本地</h3><p>图标的存储位置一定要搞清楚，<strong>主题配置文件</strong>里的默认路径都是站点下的source里的，而且它在代码里特意注明了source里的文件夹不能取名为<code>images</code>，因为和next里的<code>images</code>冲突了，于是我在source下的文件夹取名为<code>image</code>，然后把<code>favicon.ico</code>存入这个目录下，</p><h3 id="修改主题配置文件"><a href="#修改主题配置文件" class="headerlink" title="修改主题配置文件"></a>修改<strong>主题配置文件</strong></h3><p>将favicon部分改为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">favicon: </div><div class="line"><span class="meta">  #</span><span class="bash">small: /images/favicon-16x16-next.png</span></div><div class="line">  medium: /image/favicon.ico</div><div class="line"><span class="meta">  #</span><span class="bash">apple_touch_icon: /images/apple-touch-icon-next.png</span></div><div class="line"><span class="meta">  #</span><span class="bash">safari_pinned_tab: /images/logo.svg</span></div><div class="line"><span class="meta">  #</span><span class="bash">android_manifest: /images/manifest.json</span></div><div class="line"><span class="meta">  #</span><span class="bash">ms_browserconfig: /images/browserconfig.xml</span></div></pre></td></tr></table></figure><p>反正我是这么改的，很多人说直接写成这样的形式</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">favicon:</span> <span class="meta-keyword">/image/</span>favicon.ico</div></pre></td></tr></table></figure><p>但是我亲身尝试好像出了点问题，后台返回说路径有问题，我估计这个favicon是一个像类的东西（也有可能是改版了）,所以还是像我这样写比较稳妥</p><h2 id="修改Tag样式"><a href="#修改Tag样式" class="headerlink" title="修改Tag样式"></a>修改Tag样式</h2><p>修改<code>/themes/next/layout/_macro/post.swig</code>文件，搜索 <code>rel=&quot;tag&quot;&gt;#</code>，将 <code>#</code>换成<code>&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</code></p><blockquote><p>注意：应重启环境才能看到效果应用</p></blockquote><h2 id="每篇文章末尾统一添加本文"><a href="#每篇文章末尾统一添加本文" class="headerlink" title="每篇文章末尾统一添加本文"></a>每篇文章末尾统一添加本文</h2><p>在<code>\themes\next\layout\_macro</code>中新建<code>passage-end-tag.swig</code>文件，其中添加如下代码</p><figure class="highlight django"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> not is_index %&#125;</span><span class="xml"></span></div><div class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"text-align:center;color: #ccc;font-size:14px;"</span>&gt;</span>-------------本文结束,感谢您的阅读-------------<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="xml"></span></div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div></pre></td></tr></table></figure><p>接着打开<code>\themes\next\layout\_macro\post.swig</code>文件，在<code>post-footer</code>之前添加如下代码</p><figure class="highlight django"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line"><span class="xml">  </span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> not is_index %&#125;</span><span class="xml"></span></div><div class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">include</span></span> 'passage-end-tag.swig' %&#125;</span><span class="xml"></span></div><div class="line"><span class="xml">  </span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="xml"></span></div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div></pre></td></tr></table></figure><p>最后在主题配置文件最后加入如下代码</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 文章末尾添加“本文结束”标记</span></div><div class="line"><span class="attr">passage-endtag:</span></div><div class="line"><span class="attr">  enabled:</span> <span class="literal">true</span></div></pre></td></tr></table></figure><p>原文这里代码还打错了，我直到看了后台返回的log才知道名字拼错了。做完了以上三个步骤应该就可以实现每篇文章末尾都有指定的格式了，当然第一段html可以自拟。</p><h2 id="添加RSS"><a href="#添加RSS" class="headerlink" title="添加RSS"></a>添加RSS</h2><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> npm install --save hexo-generator-feed</span></div></pre></td></tr></table></figure><h3 id="打开站点配置文件"><a href="#打开站点配置文件" class="headerlink" title="打开站点配置文件"></a>打开站点配置文件</h3><p>找到<code>plugin</code>，修改如下</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># Extensions</div><div class="line">## Plugins: http:<span class="comment">//hexo.io/plugins/</span></div><div class="line">plugins: hexo-<span class="keyword">generate</span>-feed</div></pre></td></tr></table></figure><h3 id="打开主题配置文件"><a href="#打开主题配置文件" class="headerlink" title="打开主题配置文件"></a>打开主题配置文件</h3><p>修改如下</p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># <span class="keyword">Set</span> rss <span class="keyword">to</span> <span class="literal">false</span> <span class="keyword">to</span> disable feed link.</div><div class="line"># Leave rss as <span class="literal">empty</span> <span class="keyword">to</span> use site<span class="comment">'s feed link.</span></div><div class="line"># <span class="keyword">Set</span> rss <span class="keyword">to</span> specific value <span class="keyword">if</span> you have burned your feed already.</div><div class="line">rss: /atom.xml</div></pre></td></tr></table></figure><p>修改完之后<code>hexo g</code>，然后重新配置环境，应该就有rss的效果了</p><blockquote><p>直接点击RSS图标是没用的，应该复制链接然后在RSS软件中订阅</p></blockquote><h2 id="文章写作方式"><a href="#文章写作方式" class="headerlink" title="文章写作方式"></a>文章写作方式</h2><p>这个严格意义上来说不算是配置，而是一种写作习惯，但是我觉得作者这样的方式非常优雅，于是我也决定采用，就是每篇文章<code>more</code>之前的部分，用<strong>区域块</strong>来表示</p><h2 id="更改默认的markdown渲染css"><a href="#更改默认的markdown渲染css" class="headerlink" title="更改默认的markdown渲染css"></a>更改默认的markdown渲染css</h2><p>最开始有这个想法的初衷是觉得<code>next</code>的<code>blockquote</code>太丑了，颜色不够好看。改起来其实很简单，重要的是找到css文件的位置，我自己并没有找到…因为那些文件名都太具有迷惑性了，但是我百度了<strong>hexo next的blockquote</strong>成功地找到了管理markdown文件的css路径</p><p><code>\themes\next\source\css\_common\scaffolding\base.styl</code></p><p>找到了就好办，打开文件，搜索关键词<code>blockquote</code>，修改<code>border-left</code>属性为<code>border-left: 4px solid rgb(134,206,236);</code></p><h2 id="修改默认的代码高亮"><a href="#修改默认的代码高亮" class="headerlink" title="修改默认的代码高亮"></a>修改默认的代码高亮</h2><p>原版的代码高亮配色不太美观，虽然有多种主题可以换，但是都不太如人意。这里我在一个hexo的主题<a href="https://molunerfinn.com/hexo-theme-melody-doc/#/" target="_blank" rel="external">melody</a>里扒了一个highlight配色下来，代码如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">highlight-background = <span class="comment">#F6F8FA</span></span></div><div class="line"><span class="meta"> $</span><span class="bash">highlight-current-line = <span class="comment">#00346e</span></span></div><div class="line"><span class="meta"> $</span><span class="bash">highlight-selection = <span class="comment">#80CBC440</span></span></div><div class="line"><span class="meta"> $</span><span class="bash">highlight-foreground = <span class="comment">#90A4AE</span></span></div><div class="line"><span class="meta"> $</span><span class="bash">highlight-comment = <span class="comment">#90A4AE90</span></span></div><div class="line"><span class="meta"> $</span><span class="bash">highlight-red = <span class="comment">#E53935</span></span></div><div class="line"><span class="meta"> $</span><span class="bash">highlight-orange = <span class="comment">#F76D47</span></span></div><div class="line"><span class="meta"> $</span><span class="bash">highlight-yellow = <span class="comment">#FFB62C</span></span></div><div class="line"><span class="meta"> $</span><span class="bash">highlight-green = <span class="comment">#91B859</span></span></div><div class="line"><span class="meta"> $</span><span class="bash">highlight-aqua = <span class="comment">#39ADB5</span></span></div><div class="line"><span class="meta"> $</span><span class="bash">highlight-blue = <span class="comment">#6182B8</span></span></div><div class="line"><span class="meta"> $</span><span class="bash">highlight-purple = <span class="comment">#7C4DFF</span></span></div><div class="line"><span class="meta"> $</span><span class="bash">highlight-gutter = &#123;</span></div><div class="line">   color: #CFD8DC,</div><div class="line">   bg-color: $highlight-background</div><div class="line"> &#125;</div></pre></td></tr></table></figure><p>找到存储highlight的文件<code>hexo-site/themes/next/source/css/_common/components/highlight/theme.styl</code>里，将<code>normal</code>里的代码替换成上述代码即可</p><h2 id="鼠标点击特效"><a href="#鼠标点击特效" class="headerlink" title="鼠标点击特效"></a>鼠标点击特效</h2><p>我主要参考的教程里的鼠标点击特效太水了，本来也淡了做这个特效的心思的，但是在偶然间预览到<a href="https://molunerfinn.com/" target="_blank" rel="external">melody</a>这个hexo主题时，迅速被里面的鼠标点击特效震撼到了，太炫酷了，妈妈我要学这个。点进了文档里没有看到这个技术的细节，只是提到了<a href="http://animejs.com/" target="_blank" rel="external">anime.js</a>,遂顺藤摸瓜找到了<code>anime</code>的官网，发现这是一个提供做js动画的库，并不是我想要的特效，就在我迷茫时，突然发现<code>anime</code>的<a href="http://animejs.com/" target="_blank" rel="external">官网</a>上用的就是这个特效，点开<code>chrome-dev</code>，大概看了一下，引用了两个js文件，<code>anime.js</code>和<code>fireworks.js</code>,后者就是我想要的效果！马上写了个html测试一下，很遗憾，不行，点开控制台，发现是没有canvas元素，在html中按官网的样子加入了一个canvas。这下特效有了，但是控制台还是会报错，原因是<code>ga</code>函数找不到，再一看ga函数源于一个叫<code>analytics</code>的js文件，可是开发者工具的sources栏里好像没看到有这个js，无奈只能点进去，发现是动态引用的，但是无所谓了，没有这个函数特效一样能够工作。于是就把官网上的<code>fireworks.js</code>下载了下来，并且把使用到ga函数的部分给注释掉。最后，在新建的html上调试成功。可是噩梦才刚刚开始，后面省略无数个字，摸索了一整天才把这个搞好，现在开始。</p><h3 id="下载资源"><a href="#下载资源" class="headerlink" title="下载资源"></a>下载资源</h3><p>在<a href="http://animejs.com/" target="_blank" rel="external">anime的官网</a>页面上，打开<code>chrome开发者工具</code>，在sources里把一下两个文件找到，并且下载到本地</p><ul><li><code>fireworks.js</code></li><li><code>anime.js</code></li></ul><p>存入本地的路径为<code>hexo-site/themes/next/source/js/src/</code></p><h3 id="编辑-layout文件"><a href="#编辑-layout文件" class="headerlink" title="编辑_layout文件"></a>编辑_layout文件</h3><p>之前已经在自己原来写过的静态网站上测试过了，想要实现鼠标点击的烟花特效，做完以下几步即可</p><h4 id="html中新建canvas-属性如下"><a href="#html中新建canvas-属性如下" class="headerlink" title="html中新建canvas,属性如下"></a>html中新建<code>canvas</code>,属性如下</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;canvas <span class="class"><span class="keyword">class</span></span>=<span class="string">"fireworks"</span> style=<span class="string">"width: 1226px; height: 680px;position: fixed;left: 0;top: 0; z-index: 1; pointer-events: none"</span> &gt;<span class="xml"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span></div></pre></td></tr></table></figure><p>这里面有几个属性要特别注意，一个是class名为<code>fireworks</code>，一个是position设为<code>fixed</code>，最重要的是设置<code>pointer-event</code>属性，这个属性能让你的鼠标点击穿透这个canvas直到下层，这个非常关键，不然的话你把canvas放在上面，下面的链接全都点不了了</p><h4 id="在body末尾先后引入anime-js-fireworks-js"><a href="#在body末尾先后引入anime-js-fireworks-js" class="headerlink" title="在body末尾先后引入anime.js,fireworks.js"></a>在<code>body</code>末尾先后引入<code>anime.js</code>,<code>fireworks.js</code></h4><p>一定要注意顺序，anime要先引入不然会出错，而且要放在dom后，不然会出现引用错误。这两步做完就可以实现功能了</p><h4 id="在-layout文件中作出上述修改"><a href="#在-layout文件中作出上述修改" class="headerlink" title="在_layout文件中作出上述修改"></a>在<code>_layout</code>文件中作出上述修改</h4><p>其实做个小测试很简单，但是如何将这个功能引入我们的网站就比较麻烦了，因为如果要在网站上实现效果，就必须修改所有的html。我想到这既然是一个框架，那么html应该有个模板，事实上这个模板就是<code>_layout.swig</code>,这个文件位于<code>hexo-site/themes/next/layout/</code>下。花了大概十分钟把这个文件看明白，然后在文件的最后引入这两个js,并且在开头（<code>body</code>元素后面）引入我们之前提到过的canvas应该就可以了.</p><h4 id="使canvas的尺寸自适应"><a href="#使canvas的尺寸自适应" class="headerlink" title="使canvas的尺寸自适应"></a>使canvas的尺寸自适应</h4><p>我之前提到过的canvas的大小是写死的，这样不仅不优雅，而且不能实现响应式布局，还是在<code>_layout.swig</code>文件里，在所有的dom元素后面添加一段</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">　　<span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="actionscript">　　　　<span class="comment">//resize canvas</span></span></div><div class="line"><span class="javascript">　　　　$(<span class="built_in">window</span>).resize(resizeCanvas);  </span></div><div class="line"><span class="undefined">   </span></div><div class="line"><span class="actionscript"> <span class="function"><span class="keyword">function</span> <span class="title">resizeCanvas</span><span class="params">()</span> </span>&#123;  </span></div><div class="line"><span class="javascript">   <span class="keyword">var</span> canvas= $(<span class="string">'.fireworks'</span>)[<span class="number">0</span>];</span></div><div class="line"><span class="undefined">   </span></div><div class="line"><span class="javascript">        canvas.height = <span class="built_in">window</span>.innerHeight;  </span></div><div class="line"><span class="undefined">   </span></div><div class="line"><span class="javascript">        canvas.width = <span class="built_in">window</span>.innerWidth; </span></div><div class="line"><span class="undefined">        </span></div><div class="line"><span class="actionscript">        <span class="comment">//console.log(canvas.width,canvas.height);</span></span></div><div class="line"><span class="undefined"> &#125;;  </span></div><div class="line"><span class="undefined"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><p>这样就能实现canvas自适应布局了</p><h2 id="修改footer栏"><a href="#修改footer栏" class="headerlink" title="修改footer栏"></a>修改footer栏</h2><p>原版的footer栏太丑了，决定好好修饰一下</p><h3 id="删除hexo和next信息"><a href="#删除hexo和next信息" class="headerlink" title="删除hexo和next信息"></a>删除hexo和next信息</h3><p>找到<code>themes/next/layout/_partials/footer.swig</code>,打开编辑，删除class为<code>powered-by</code>和<code>theme-info</code>的相关dom（怎么总有种过河拆桥的感觉…）</p><h3 id="文字居中"><a href="#文字居中" class="headerlink" title="文字居中"></a>文字居中</h3><p>在<code>footer.swig</code>里直接添加样式竟然没有效果，点开开发者工具才知道原来<code>footer-inner</code>这个类已经继承了<code>text-align:left</code>的属性（很好奇为什么我直接改写覆盖不了）,好嘛，干脆换个地方修改好了。打开<code>\themes\next\source\css\_custom\custom.styl</code>，添加如下代码</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.footer-inner</span> &#123;</div><div class="line">   <span class="attribute">text-align</span>: center</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="修改用户名图标"><a href="#修改用户名图标" class="headerlink" title="修改用户名图标"></a>修改用户名图标</h3><p>这里引用的技术是<a href="http://fontawesome.io/icons/" target="_blank" rel="external">font-awesome</a>，说实话我还是第一次接触这个，据说是为<code>bootstrap</code>设计的框架，但是我被它的简介和强大性震撼到了，不需要配置路径，下载文件什么的，只需要首先在<a href="http://fontawesome.io/icons/" target="_blank" rel="external">官网</a>上选择你喜欢的icon，在html中引用js之后，随便新建一个元素（官网建议最好是<code>i</code>，因为比较简介），然后设置<code>class</code>格式为<code>fa icon-name</code>，这里的<code>icon-name</code>是官网上选定元素之后会告诉你的名字，icon就出现了，<strong>简洁且强大</strong>。回到本文，按下面几个步骤进行：</p><ul><li>上<a href="http://fontawesome.io/icons/" target="_blank" rel="external">官网</a>选择你喜欢的icon，把名字记下来</li><li>打开<code>主题配置文件</code>，搜索<code>footer</code>下的<code>icon</code>，将其值修改为你刚才找到的icon名</li><li>大功告成</li></ul><h2 id="修改文章的阅读全文"><a href="#修改文章的阅读全文" class="headerlink" title="修改文章的阅读全文"></a>修改文章的阅读全文</h2><p>这个特效我是看别人的博客里有的，觉得很炫酷，但是网上好像没有相应的教程，学习了这么多配置，干脆自己也来个DIY好了</p><h3 id="首先找到相应的css文件"><a href="#首先找到相应的css文件" class="headerlink" title="首先找到相应的css文件"></a>首先找到相应的css文件</h3><p>当然，在这之前先确定好元素的名称，好在css里找对应，使用<code>chrome开发者工具</code>，发现这个阅读全文的按钮class为<code>post-button</code>，在<code>css</code>文件夹下找，最终在路径为<code>themes/next/source/css/_schemes/Mist/_posts-expanded.styl</code>（我的主题是Mist）</p><h3 id="修改css代码"><a href="#修改css代码" class="headerlink" title="修改css代码"></a>修改css代码</h3><p>然后修改其中<code>.post-button</code>的代码如下</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.post-button</span> &#123;</div><div class="line">  <span class="attribute">margin-top</span>: <span class="number">20px</span>;</div><div class="line">  <span class="attribute">text-align</span>: center;</div><div class="line"></div><div class="line">  <span class="selector-tag">a</span> &#123;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">2px</span> <span class="number">20px</span>;</div><div class="line">    <span class="attribute">font-size</span>: <span class="variable">$font-size-base</span>;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#000</span>;</div><div class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</div><div class="line">    <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#000</span>;</div><div class="line">    <span class="attribute">border-radius</span>: <span class="number">3px</span>;</div><div class="line">    <span class="attribute">transition</span>: all .<span class="number">2s</span> ease</div><div class="line"></div><div class="line">    +mobile() &#123; font-size: <span class="variable">$font-size-small</span>; &#125;</div><div class="line">    +desktop-large() &#123; <span class="attribute">font-size</span>: <span class="variable">$font-size-large</span>; &#125;</div><div class="line"></div><div class="line">    &amp;:hover &#123;<span class="attribute">background-color</span>: <span class="number">#000</span>;<span class="attribute">color</span>: <span class="number">#fff</span>&#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>最终的效果如图</p><p><img src="http://img.hb.aicdn.com/52e7277a5b2faf747534f8d2bda62a6ca8d5bd683ffed-DuL5ZB_sq180" alt=""></p><h2 id="将自己写的html托管在hexo下"><a href="#将自己写的html托管在hexo下" class="headerlink" title="将自己写的html托管在hexo下"></a>将自己写的html托管在hexo下</h2><h3 id="hexo文件运作"><a href="#hexo文件运作" class="headerlink" title="hexo文件运作"></a>hexo文件运作</h3><p>首先应该把hexo的文件规律搞清楚。总共有两套文件体系，一个是本地的，另外一个是上传至github上的。后者实际上就是本地的<code>public</code>部分，也就是每次<code>hexo g</code>之后生成的文件夹。</p><p>每次<code>hexo g</code>之后，它就是会把所有<code>hexo-site/source</code>下的文件全部渲染一遍变成<code>public</code>里的文件，也就是说，想要托管自己的html，就需要把html放在这个文件夹下。</p><h3 id="新建文件夹"><a href="#新建文件夹" class="headerlink" title="新建文件夹"></a>新建文件夹</h3><p>在<code>hexo-site/source</code>下新建文件夹，像我就是建立了一个<code>demo</code>,路径为<code>hexo-site/source/demo</code>,新建的html放在里面就可以了，比如我把我这个学期写的地图放了进去<code>gdMap.html</code></p><h3 id="在站点配置文件中取消对这个文件夹的渲染"><a href="#在站点配置文件中取消对这个文件夹的渲染" class="headerlink" title="在站点配置文件中取消对这个文件夹的渲染"></a>在站点配置文件中取消对这个文件夹的渲染</h3><p>光是把路径确定好了还不够，因为<code>hexo</code>默认是会对所有的<code>html</code>按它的格式来渲染的，我们需要在<code>站点配置文件</code>中找到<code>skip-render</code>,修改代码如下</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">skip_render:</span> demo<span class="comment">/*</span></div></pre></td></tr></table></figure><p>表示对demo下所有的文件都不渲染，当然这里也可以根据自己的需求来改写，比如<code>skip_render: demo/*.html</code>(只是取消对<code>html</code>文件的渲染)</p><h3 id="在md文件中引用html"><a href="#在md文件中引用html" class="headerlink" title="在md文件中引用html"></a>在<code>md</code>文件中引用html</h3><p>像这样的格式引用即可<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="string">链接</span>](<span class="link">/demo/gdMap.html</span>)`</div></pre></td></tr></table></figure></p><h2 id="DIY规律"><a href="#DIY规律" class="headerlink" title="DIY规律"></a>DIY规律</h2><p>做了这么多配置基本上对整体的流程也很清楚了，自己DIY了几个选项效果也很好，基本上DIY配置的话规律如下</p><h3 id="修改CSS"><a href="#修改CSS" class="headerlink" title="修改CSS"></a>修改CSS</h3><p>进入<code>/theme/next/sources/css</code>下，找到对应的<code>styl</code>文件进行修改，实在不行可以在这个目录下的<code>_custom</code>下修改，这个css文件应该具有覆盖的最高权限。</p><h3 id="修改DOM（比如修改图标）"><a href="#修改DOM（比如修改图标）" class="headerlink" title="修改DOM（比如修改图标）"></a>修改DOM（比如修改图标）</h3><blockquote><p>注：修改css之后直接刷新页面就可以看到效果，因为css是即时渲染的，但是修改dom不可以，必须重新<code>hexo server</code> </p></blockquote><p>有两种方法，不过我自己想了想，如果两种方法都能实现的情况下还是推荐使用第二种，更标准，符合软件工程规范</p><h3 id="修改-swig文件"><a href="#修改-swig文件" class="headerlink" title="修改.swig文件"></a>修改<code>.swig</code>文件</h3><p>虽然我之前没接触过此类文件，但是在修改过几个配置之后发现这实际上就一个dom预编译软件（我自己根据sass之类的猜测的），这个文件里是最直接的dom模板，但缺点是除非是新建元素，否则不建议直接修改这里的元素，把东西写死了很难看，而且和系统的文件风格不一致</p><h3 id="修改主题配置文件-1"><a href="#修改主题配置文件-1" class="headerlink" title="修改主题配置文件"></a>修改<code>主题配置文件</code></h3><p><code>next</code>主题的作者就很小心我之前说的问题，它把可配置的选项都写进了<code>主题配置文件</code>，如果想修改直接在主题配置文件里修改即可，简单且耦合性弱，不容易出错。可惜的是我之前有些地方就没这么做，现在再修改也比较麻烦，只能以后注意了</p><blockquote><p>在修改<code>.swig</code>时注意，如果欲修改的配置选项是以<code>宏引用</code>的形式调用的话，放弃修改<code>.swig</code>文件，直接在<code>主题配置文件</code>里修改你想要的配置</p></blockquote><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>花了很大的功夫配置了这么些，七成是跟着教程做的，三成是自己摸索的。全部过了一遍之后，一方面是增进了自己的信心，另一方面就是了解了大概的框架，以后想要自己diy一些部分也很容易。目前来说这些功能应该是够用了，以后有需要的话再添加吧.</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;解决了博客的最基本的发文章和上传至同步之后，面临的问题自然是为自己的网站添加更多功能，当然可以选择DIY，但是想到自己能力有限，就算做出来想必也是优化和性能上有很大问题，就还是按部就班地来吧&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="系统学习" scheme="http://yoursite.com/categories/%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="Next" scheme="http://yoursite.com/tags/Next/"/>
    
  </entry>
  
  <entry>
    <title>我的编程入门</title>
    <link href="http://yoursite.com/2017/10/10/%E6%88%91%E7%9A%84%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2017/10/10/我的编程入门/</id>
    <published>2017-10-10T05:46:39.000Z</published>
    <updated>2017-10-12T09:45:56.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>其实建立这个博客的主要目的也是增加自己在编程方向的动力，那么自然需要有些文章专门用来做开荒的布局，这篇文章记录了我之前总结下来的自己未来应该在编程方面的努力方向（虽然基本没怎么动），希望在未来的日子里我能不断地补充这篇文章里的链接。</p></blockquote><a id="more"></a><h1 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h1><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><ul><li>CSS权威指南（第3版）</li><li>CSS3 专业网页开发指南</li><li>CSS揭秘</li><li><a href="http://less.bootcss.com/" target="_blank" rel="external">预处理器</a>的学习</li></ul><h2 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h2><ul><li>JS高级程序设计</li><li>蝴蝶书</li><li>你不知道的JS</li><li>阮一峰老师的《ES6 标准入门》</li><li>JS设计模式与开发实践</li><li>高性能JS</li></ul><h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><ul><li>BootStrap</li><li>Vue</li></ul><h2 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h2><ul><li><a href="https://github.com/baidu-ife/ife/tree/master/2015_spring/task" target="_blank" rel="external">百度前端学院1</a></li><li><a href="https://github.com/baidu-ife/ife/tree/master/2015_summer" target="_blank" rel="external">百度前端学院2</a></li><li><a href="https://github.com/ruanyf/jstraining" target="_blank" rel="external">阮一峰老师的全栈教程</a></li><li>参加2018年的<code>百度前端学院</code></li></ul><h2 id="有意思的资料"><a href="#有意思的资料" class="headerlink" title="有意思的资料"></a>有意思的资料</h2><p><a href="https://daisyhawen.gitbooks.io/web-practice-book/content/2_js/05_ajax/01.html" target="_blank" rel="external">一个网友自己整理的前端学习知识</a></p><h1 id="通用知识"><a href="#通用知识" class="headerlink" title="通用知识"></a>通用知识</h1><blockquote><p>注：属于比较杂碎的知识，不系统但很重要</p></blockquote><ul><li>Git（心中的痛，一直在用，一直不精）</li><li>数据库（还没有正儿八经地用过，项目接触多了应该就还好）</li><li>webGIS</li><li>three.js(算是基础比较牢靠，但需要项目的磨练)</li><li>spacemacs(非常好看的emacs主题，但是emacs真**难用)</li></ul><h1 id="计算机知识"><a href="#计算机知识" class="headerlink" title="计算机知识"></a>计算机知识</h1><h2 id="计算机通用知识"><a href="#计算机通用知识" class="headerlink" title="计算机通用知识"></a>计算机通用知识</h2><ul><li>SICP（不说了，神书，大二时看完了前两章，后来就没动过了…）</li><li><a href="http://www.ccs.neu.edu/home/matthias/HtDP2e/Draft/index.html" target="_blank" rel="external">计算机程序设计</a></li><li><a href="https://cn.udacity.com/course/design-of-computer-programs--cs212" target="_blank" rel="external">计算机程序设计中文</a></li><li><a href="https://github.com/DeathKing/Learning-SICP/" target="_blank" rel="external">SICP中文教学视频</a></li><li><a href="http://composingprograms.com/" target="_blank" rel="external">一个小的导论</a></li><li><a href="http://sicp.readthedocs.io/en/latest/index.html" target="_blank" rel="external">SICP习题集</a></li></ul><h2 id="开始一些小项目"><a href="#开始一些小项目" class="headerlink" title="开始一些小项目"></a>开始一些小项目</h2><ul><li><a href="https://zhuanlan.zhihu.com/alchemelon" target="_blank" rel="external">麻瓜炼金所</a></li><li><a href="https://book.douban.com/subject/1998341/" target="_blank" rel="external">计算机系统要素</a></li></ul><h2 id="计算机系统基础"><a href="#计算机系统基础" class="headerlink" title="计算机系统基础"></a>计算机系统基础</h2><ul><li><a href="http://csapp.cs.cmu.edu/" target="_blank" rel="external">深入理解j计算机系统</a></li><li><a href="https://book.douban.com/subject/1139336/" target="_blank" rel="external">c语言程序设计</a></li></ul><h2 id="数据结构和算法导论"><a href="#数据结构和算法导论" class="headerlink" title="数据结构和算法导论"></a>数据结构和算法导论</h2><ul><li>算法导论</li><li><a href="https://book.douban.com/subject/1139426/" target="_blank" rel="external">数据结构和算法分析</a></li><li><a href="http://open.163.com/special/opencourse/algorithms.html" target="_blank" rel="external">MIT算法导论</a></li><li><a href="https://book.douban.com/subject/3227098/" target="_blank" rel="external">编程珠玑</a></li><li><a href="https://book.douban.com/subject/1173548/" target="_blank" rel="external">程序设计实践</a></li></ul><h2 id="编程语言基础"><a href="#编程语言基础" class="headerlink" title="编程语言基础"></a>编程语言基础</h2><ul><li><a href="https://book.douban.com/subject/2152385/" target="_blank" rel="external">程序设计语言-实践之路</a></li><li><a href="https://www.coursera.org/learn/programming-languages" target="_blank" rel="external">程序设计语言公开课</a></li><li><a href="https://cn.udacity.com/course/programming-languages--cs262" target="_blank" rel="external">构建一个浏览器的实践</a></li><li><a href="http://inst.eecs.berkeley.edu/~cs61a/fa13/proj/scheme/scheme.html" target="_blank" rel="external">python实现scheme的解释器</a></li></ul><h2 id="书籍阅读"><a href="#书籍阅读" class="headerlink" title="书籍阅读"></a>书籍阅读</h2><ul><li>代码大全</li><li>程序员修炼之道</li></ul><blockquote><p>估计我能把前端的部分搞好就已经很不容易了，接下来的部分以后再慢慢学吧</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;其实建立这个博客的主要目的也是增加自己在编程方向的动力，那么自然需要有些文章专门用来做开荒的布局，这篇文章记录了我之前总结下来的自己未来应该在编程方面的努力方向（虽然基本没怎么动），希望在未来的日子里我能不断地补充这篇文章里的链接。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="系统学习" scheme="http://yoursite.com/categories/%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="编程" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>开始记录自己和生活...</title>
    <link href="http://yoursite.com/2017/10/09/%E5%BC%80%E5%A7%8B%E8%AE%B0%E5%BD%95%E8%87%AA%E5%B7%B1%E5%92%8C%E7%94%9F%E6%B4%BB/"/>
    <id>http://yoursite.com/2017/10/09/开始记录自己和生活/</id>
    <published>2017-10-09T11:59:39.000Z</published>
    <updated>2017-10-10T13:26:25.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h1 id="开通博客的缘由"><a href="#开通博客的缘由" class="headerlink" title="开通博客的缘由"></a>开通博客的缘由</h1><p>大四了，突然发现周围的同学都或多或少带着这样或者那样的光环，反过来看看自己，似乎没有什么值得骄傲的地方。找了个时间专门想了想，自己原来大一大二的时候自己因为怯于自己能力有限，并没有参加各式各样的比赛，相反是将时间大量花费在了看书，练字，画画等系列杂篇上，更为致命的是，以前的那些爱好虽然随着时间和热情的流逝不断地舍弃了，但是心中反而留下了自己很难专注于某件事情的刻板印象。虽然这件事不知道有没有高中时期老师教诲的“遇到难题果断放弃，先做会做的题目”的影响，但事实就是如此，现在的我因为原来大一大二时尝试过太多事情但都半途而废，想要开始做什么事情一旦遇到什么困难就会产生放弃的想法（尤其是在配环境时…）</p></blockquote><a id="more"></a><p>当然了，前面都是一些很丧的话，事情也有积极的一面:我发现自己在编程时还是很专注的，而且自己在前端方向非常感兴趣。可惜的是编程能力只是相对于班上的同学相对优秀，但倘若放在社会上的话根本不值一提。当然没有谁的能力是与生俱来的，但是我同样发现一个令我沮丧的事实，虽然编程时非常投入，也非常享受编程的状态，但是始终缺少自发学习编程的动力。就当我觉得未来漆黑一片时，突然想到了写博客输出的方法。事实上我自己平时也有输出（大三下有所懈怠），不过原来一直是记录在onenote上，只能“内部消化”。以博客的形式来进行输出我觉得有几个优点</p><ol><li>公开平台，尽管可能没人看，但是绝对有莫名的督促作用</li><li>可以锻炼markdown写作的基本功</li><li>可以以比较完善的方式系统地整理自己学习的知识和完善自己</li></ol><p>事实上，我同样也非常享受用一个平台全方面地展示自己，在这里我希望不仅是在编程，同样在读书，喜欢的动画，人生心得等系列方面都能慢慢积累，希望自己能坚持下去</p><h1 id="曾经我的生活状态"><a href="#曾经我的生活状态" class="headerlink" title="曾经我的生活状态"></a>曾经我的生活状态</h1><p>虽然暑假拿了夏令营的资格，也和研究生的老师联系好了，但是由于自己的不努力，没有拿到保研资格，也就是说摆在我面前的只有考研这一条路，但是到目前为止，我的考研说实话准备得还不是太好，这一点在我还有闲情来写博客就能看出来。还是老规矩，晚上到操场上反思一下，发现自己根本没有所谓的理想的生活，没有目标也就没有动力，中间还很有一段时间处于时间空余但是又不知道做什么的迷茫状态。老实说，就算是现在我的心中还是有点乱，对未来的大概构想就是考研-帮老师做事-研究生阶段巩固自身技能。现在终于有了博客的帮助，希望它能帮我走得更远。</p><h1 id="激励我的大大"><a href="#激励我的大大" class="headerlink" title="激励我的大大"></a>激励我的大大</h1><ol><li><a href="http://zhangwenli.com/" target="_blank" rel="external">羡辙</a></li><li><a href="http://wdxtub.com/1997/09/11/booklist-page/" target="_blank" rel="external">小土刀</a></li></ol><p>初次了解羡辙是在知乎上搜索百度前端学院的task发现有个人给了一个nice的作品，后来又是一次偶然的机会，我正在跟着老师做事，我负责百度echarts的部分，偶然发现了百度前端团队也有她，于是从echarts跟到github和微博，毅然决然地决定成为羡辙老师的粉丝。原因一方面当然是因为人长得漂亮（大雾），其实主要原因是我当时无（ba）聊（gua）翻了很多她的微博，发现原来她的生活轨迹和爱好和我很相似，都喜欢看书和编程，当然她比我厉害很多（主要是能付诸实践和看书能看进去吧）其实大大在编程圈子里也是个很普通的人，但是既然作为和我的爱好重叠度极高且目前已经有较为稳定工作（BAT诶，虽然百度已经没落了，但是也算很强势的互联网公司了），自然是要成为我心目中的标杆啦</p><p>小土刀是近期才了解到的，在搜索hexo相关配置问题时偶然发现了这个人的博客，顺手点进去看了看，哟发现大家的兴趣点也都很相似，说实话我最开始点到他的读书计划中心中是有点不屑的，因为他书单里的大多数书也是我的书单的部分（包括编程部分和科普类书部分），很不幸我的书单部分还没怎么开荒，但是后来在知乎里看见了对这个人的主观和客观的评价，发现他还是愿意把自己想做的事给很好地执行的。而这正是我所缺乏的能力，而且大大在自己的博客上全方面展示自己兴趣（包括动漫和武侠小说）让我觉得这就是我想要的生活，知道自己要做什么，并且不断地为这个方向努力</p><h1 id="配置博客"><a href="#配置博客" class="headerlink" title="配置博客"></a>配置博客</h1><p>这两天终于折腾好了博客，配环境总是最累人的事。原先是计划采用<code>jekyll</code>，光是ruby的配置就花了我一晚上，没办法电脑之前brew出了问题，配置ruby之前还被brew折腾了好久，后来还是觉得<code>hexo</code>简单，事实上应该两者差不多，我是觉得hexo的next我比较喜欢，可以拿来直接用，所以跟着教程把hexo搞好了，事实证明<strong><em>一件事做的时候越困难，做完的幸福感越高</em></strong>，配置的过程就不发博客了，因为类似的教程很多。最后感叹一句：</p><blockquote><p>有困难，上stackoverflow!</p></blockquote><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>这两天风风火火地搞博客，不知道自己这次还能不能坚持下来，因为考研的缘故，自己这下半年肯定不会很勤快， 如果这次还是不能坚持下来的话…</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;h1 id=&quot;开通博客的缘由&quot;&gt;&lt;a href=&quot;#开通博客的缘由&quot; class=&quot;headerlink&quot; title=&quot;开通博客的缘由&quot;&gt;&lt;/a&gt;开通博客的缘由&lt;/h1&gt;&lt;p&gt;大四了，突然发现周围的同学都或多或少带着这样或者那样的光环，反过来看看自己，似乎没有什么值得骄傲的地方。找了个时间专门想了想，自己原来大一大二的时候自己因为怯于自己能力有限，并没有参加各式各样的比赛，相反是将时间大量花费在了看书，练字，画画等系列杂篇上，更为致命的是，以前的那些爱好虽然随着时间和热情的流逝不断地舍弃了，但是心中反而留下了自己很难专注于某件事情的刻板印象。虽然这件事不知道有没有高中时期老师教诲的“遇到难题果断放弃，先做会做的题目”的影响，但事实就是如此，现在的我因为原来大一大二时尝试过太多事情但都半途而废，想要开始做什么事情一旦遇到什么困难就会产生放弃的想法（尤其是在配环境时…）&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="随想" scheme="http://yoursite.com/categories/%E9%9A%8F%E6%83%B3/"/>
    
    
  </entry>
  
  <entry>
    <title>初识markdown</title>
    <link href="http://yoursite.com/2017/10/09/%E5%88%9D%E8%AF%95markdown/"/>
    <id>http://yoursite.com/2017/10/09/初试markdown/</id>
    <published>2017-10-09T10:44:30.000Z</published>
    <updated>2017-10-18T10:51:05.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h1 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>markdown其实很早就有所接触，但是原来的话一是没有机会来接触，平时全部都以onenote的形式输出。原来使用的是<a href="https://ulyssesapp.com/" target="_blank" rel="external">Ulysess</a>，这个工具页面设计非常优秀，UI非常舒服，我也在上面写过很多私人的文章，但是当我正式开始写博客之后，我突然发现ulysess还是不太方便（也有可能是我对ulysess的了解太少了）。在短暂尝试了<a href="">macdown</a>之后，我发现原来这款软件才是我喜欢的风格<br><a id="more"></a></p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li>代码高亮</li><li>样式美观</li><li>可以即时渲染</li></ol></blockquote><h2 id="推荐markdown软件"><a href="#推荐markdown软件" class="headerlink" title="推荐markdown软件"></a>推荐markdown软件</h2><p>当然这里还有一些推荐的markdown（macOSx）可供选择</p><ul><li><a href="http://25.io/mou/" target="_blank" rel="external">mou</a>（mac升级到sierra之后官网上下的版本都不兼容了）</li><li><a href="http://macdown.uranusjr.com/" target="_blank" rel="external">macdown</a></li></ul><h1 id="快捷按键"><a href="#快捷按键" class="headerlink" title="快捷按键"></a>快捷按键</h1><p>想要入门一项技术，最好的方法就是找一些简单的事情来做，在动手实践中提升信息和这门技术的喜爱<br>其实，如果你采用专业的markdown软件的话你会发现其实大部分软件都把常用的功能都绑定了快捷键<br>这里以<a href="http://macdown.uranusjr.com/" target="_blank" rel="external">macdown</a>为例，记录一下一些常用的按键</p><h2 id="宏观操作"><a href="#宏观操作" class="headerlink" title="宏观操作"></a>宏观操作</h2><h3 id="关闭预览"><a href="#关闭预览" class="headerlink" title="关闭预览"></a>关闭预览</h3><p><code>command+shift+H</code></p><h2 id="细节操作"><a href="#细节操作" class="headerlink" title="细节操作"></a>细节操作</h2><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p><code>command+1/2/3／...</code></p><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><p><code>command+K</code></p><h3 id="区域代码"><a href="#区域代码" class="headerlink" title="区域代码"></a>区域代码</h3><p>可以直接tab，或者六个‘’‘’‘’<br>建议是六个`，因为前者在next上显示会有问题</p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p><code>command+/</code></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><code>command+shift+K</code></p><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p><code>command+shift+I</code></p><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p><code>command+shift+B</code></p><h3 id="顺序序列"><a href="#顺序序列" class="headerlink" title="顺序序列"></a>顺序序列</h3><p><code>command+shift+O</code></p><h3 id="非顺序序列"><a href="#非顺序序列" class="headerlink" title="非顺序序列"></a>非顺序序列</h3><p><code>command+shift+U</code></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="使用markdown中遇到的问题汇总"><a href="#使用markdown中遇到的问题汇总" class="headerlink" title="使用markdown中遇到的问题汇总"></a>使用markdown中遇到的问题汇总</h2><ol><li>’#‘章节标记后面应立即接空格，这个bug在markdown软件上没有问题，但是上传到网站上时就会出现错误</li><li>markdown默认是不换行的，直接换行认为是同一个段落。想要切换段落只能直接按<code>enter</code></li><li><a href="http://macdown.uranusjr.com/" target="_blank" rel="external">macdown</a>有很多快捷键本来可以使用，但用着用着就失效了，目前还没有找到原因，留着将来补充…</li></ol><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><blockquote><p>markdown其实语法很简单，但是只有持续不断地输出才能最好发挥它的价值</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;h1 id=&quot;Intro&quot;&gt;&lt;a href=&quot;#Intro&quot; class=&quot;headerlink&quot; title=&quot;Intro&quot;&gt;&lt;/a&gt;Intro&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;markdown其实很早就有所接触，但是原来的话一是没有机会来接触，平时全部都以onenote的形式输出。原来使用的是&lt;a href=&quot;https://ulyssesapp.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ulysess&lt;/a&gt;，这个工具页面设计非常优秀，UI非常舒服，我也在上面写过很多私人的文章，但是当我正式开始写博客之后，我突然发现ulysess还是不太方便（也有可能是我对ulysess的了解太少了）。在短暂尝试了&lt;a href=&quot;&quot;&gt;macdown&lt;/a&gt;之后，我发现原来这款软件才是我喜欢的风格&lt;br&gt;
    
    </summary>
    
      <category term="系统学习" scheme="http://yoursite.com/categories/%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="markdown" scheme="http://yoursite.com/tags/markdown/"/>
    
  </entry>
  
</feed>
