<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[gulp入门之入门]]></title>
    <url>%2F2017%2F10%2F12%2Fgulp%E5%85%A5%E9%97%A8%E4%B9%8B%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[之所以这篇文章取名为“入门之入门”，因为连入门都算不上，只是暂时了解一下这门技术，并且应用于我的博客的优化中。其实gulp很早之前就有所接触了，这次终于有机会体验一把了 我的gulp学习历程比较奇葩，是首先按教程和自己摸索，使用gulp把网站优化了之后再去看gulp的有关资料的，事实证明gulp的源码非常明了，我从来没接触过的人看一眼也能明白每段代码具体是干什么的。首先还是介绍一下如何使用gulp优化网站吧。 需求因为我们发现每次deploy都是先将public文件夹下的内容清理干净（事实上，public文件夹就是你上传到github上的最终内容），然后把全部文件编译生成一遍，再次生成public文件夹，再上传，如果博客数一旦变多，这个过程就会很慢且效率底下，我们需要gulp这个工具来压缩代码（这个功能是教程里提供的，事实上gulp能做的远不止这么些） 实现过程安装gulp在博客的根目录，执行以下命令 123$ npm install gulp -g$ npm install gulp-minify-css gulp-uglify gulp-htmlmin gulp-htmlclean gulp --save$ npm install gulp-babel 这里的gulp-babel是我后来自己加的，原教程没有加，但是在之后的deploy会出错 新建配置文件在博客的根目录下，新建名为gulp.js的文件，文件内容为 1234567891011121314151617181920212223242526272829303132333435var gulp = require('gulp');var minifycss = require('gulp-minify-css');var uglify = require('gulp-uglify');var babel = require('gulp-babel');var htmlmin = require('gulp-htmlmin');var htmlclean = require('gulp-htmlclean');// 压缩 public 目录 cssgulp.task('minify-css', function() &#123; return gulp.src('./public/**/*.css') .pipe(minifycss()) .pipe(gulp.dest('./public'));&#125;);// 压缩 public 目录 htmlgulp.task('minify-html', function() &#123; return gulp.src('./public/**/*.html') .pipe(htmlclean()) .pipe(htmlmin(&#123; removeComments: true, minifyJS: true, minifyCSS: true, minifyURLs: true, &#125;)) .pipe(gulp.dest('./public'))&#125;);// 压缩 public/js 目录 jsgulp.task('minify-js', function() &#123; return gulp.src('./public/**/*.js') .pipe(babel()) .pipe(uglify()) .pipe(gulp.dest('./public'));&#125;);// 执行 gulp 命令时执行的任务gulp.task('default', [ 'minify-html','minify-css','minify-js']); 没有添加babel()环节时，终端会报错说压缩js文件出错，我查了一下，说是es6需要编译，那么还需要引入gulp-babel文件，并且在gulp的pipe里添加一个.pipe(babel()) 修改deploy.sh文件gulp的基本配置已经完成了，我们只需要在生成hexo的public文件时，使用之就可以了，具体操作是，打开deploy.sh文件，将其 1hexo g 修改为 1hexo g &amp; gulp 完成，这样每次运行`deploy.sh脚本时，在生成文件都会提高效率 关于gulp接下来就是我对gulp的一些了解，看一下一位前端工作者对gulp的描述 Gulp / Grunt 是工具链、构建工具，它们能够优化前端工作流程。比如自动刷新页面、combo、压缩css、js、编译less等等。使用Gulp/Grunt，然后配置你需要的插件，就可以替代手工实现自动化工作。 我自己的理解就是是一个自动化工具，配合各种插件（几千种），能够自定义实现很多流水线工作，尤其是和less或者sass等css预编译语言配合，但是现在还不是我学习这个的最佳时机，因为我暂时平时用到这个的地方很少，等到研究生阶段做项目的时候再深入理解之。 总结越学习发现需要学习的东西越多，自己掌握的还是太少了。通过这次实践之后，坚定了我学习gulp&amp;less&amp;脚手架工具的决心。此外，我还深切体会到了懒是程序员的第一动力这句话的真谛，要始终明白，程序员的首要工作是创造，而不是重复性工作。感觉好像回到了学习SICP的时候，当时被书里抽象了又抽象的思想震撼到了。唉，要不是被考研束缚住了，我现在就想每天抱着笔记本再买些书天天泡前端…（bu cun zai de）]]></content>
      <categories>
        <category>系统学习</category>
      </categories>
      <tags>
        <tag>gulp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[初识shell]]></title>
    <url>%2F2017%2F10%2F12%2F%E5%88%9D%E8%AF%86shell%2F</url>
    <content type="text"><![CDATA[事情的初衷是我在测试站点配置时需要不断重复一些步骤，比如depoly三连，建站二连，虽然使用终端操控已经很简便了，但是尝试多了之后也会厌烦。于是想到写一个shell脚本来帮助我完成以上的任务，这样的话我每次只要打开终端，按一个小小的up键调用历史命令就可以完成上述任务了。同时这也是我真正意义上第一次接触shell脚本编程 基础配置在开始写脚本之前还需要进行一些基础的环境配置 新建shell文件夹这个主要是方便管理shell文件，因为以后肯定还要写的，干脆用一个统一的文件夹存起来好了，我的存储路径是/Users/lizhiyuan/Documents/Shell 将上述文件夹路径添加至环境变量主要是每次启动终端想要打开shell文件，都需要首先cd到上述路径里，太麻烦了，不如直接添加到环境变量里，这样的话每次只需要在终端里敲shell文件名就可以运行shell文件了 mac下自带的终端是bash，我之前换成了zsh，影响都不大。如果是bash，就打开.bash_profile文件，如果是zsh，就打开.zshrc，然后添加如下代码 1export PATH=/Users/lizhiyuan/Documents/Shell:$PATH 大意就是将上述路径添加至环境变量，当然我为了懒，还在里面添加了 1alias shfile="/Users/lizhiyuan/Documents/Shell" 就是将上述路径命了一个别名叫shfile，这样我每次在终端里输入shfile就可以进入上述路径了 当然这里可以一次搞完，再添加一下博客的别名 1alias blog="/Users/lizhiyuan/Documents/blog" 检验效果重启终端，直接键入之前的关键词，如blog，shfile，如果能直接显示进入路径则表示更改成功，当然也可以通过输入 1$ PATH 来查看当前环境变量 deploy三连哈哈这个名字是起着好玩的，实际上就是每次需要把本地hexo博客上传至github或者其他托管的网站上需要的三个步骤，现在我将其简化，只需要一个deploy.sh就可以完成步骤 新建shell文件在之前的shell文件夹下，新建一个名为deploy.sh（或者其他你认为可以表示这样一个过程的名字）的文件 添加代码123456789#!/bin/zshcd ~/Documents/bloghexo cleanhexo ghexo d 其中第一行表示这个文件由zsh来解释,如果你的电脑是bash，就改成#!/bin/bash 赋予权限如果直接在终端里运行上述文件，终端会提示你没有权限，这个时候我们需要cd到blog的根目录下，比如我的电脑就是cd ~/Documents/blog，然后输入chmod +x deploy.sh,权限问题解决 newSite二连 这个问题说实话我还没有很好地解决，目前只是用了一个替代方法。 首先说明这个文件的需要，背景是我每次调试网站时，有些变化需要重新部署环境才能看到的，也就是说我需要 终止当前hexo serve服务 查看当前端口4001被什么进程占用了（我默认是用4001，因为4000被node占用了） kill 上述进程 cd blog目录 hexo serve --port 4001 前三步可以用关掉当前终端来解决，但是用多了之后还是会觉得麻烦，最好是用一个脚本解决上述所有问题，不需要关闭终端，脚本自动找到端口4001占用的进程，并且kill掉上述进程，之后启动serve服务。 问题就出在找到指定端口对应的进程，原来我是采用$ lsof -i:4001来查看，但是这个命令只能log当前进程，我不知道能不能返回当前进程，再加上我对shell的语法不是很熟悉，所以只能在网上寻求帮助，但是搜索一圈之后也无果。后来发现netstat命令也可以实现类似的功能，但是在自己尝试解析netstat时，发现终端似乎无能为力 我目前采取的解决方案是写一个脚本运行上述的4，5步骤，其他的用关闭终端来解决。脚本命名为newSite.sh，内容如下 12345#!/bin/zshcd ~/Documents/bloghexo serve --port 4001 以后彻底解决了这个问题再来补充]]></content>
      <categories>
        <category>系统学习</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo 绑定个性域名]]></title>
    <url>%2F2017%2F10%2F11%2FHexo-%E7%BB%91%E5%AE%9A%E4%B8%AA%E6%80%A7%E5%9F%9F%E5%90%8D%2F</url>
    <content type="text"><![CDATA[每次都通过githubpages来访问可能稍显冗长，而且github最近越来越不稳定，几次我都以为是被墙了。在偷懒心的作用下我开始了一场有惊无险的更换域名之旅… 前言关于github pages+hexo+个性域名的教程网上很多，我这里只列出我自己的亲身经历，以供参考 购买域名域名的购买有很多途径 阿里云 godaddy 以上两个都可以,随便选一个自己喜欢的就可以了。首先进入上述链接，在搜索栏里输入自己理想的域名，如果未被抢注就可以购买之，一般价格在几十块一年。我最终选用的是godaddy的，以下的教程也以其为例。（其实阿里云更好，可以域名+解析一条龙） 设置域名解析如果是买的阿里云的域名的话，应该可以直接在我的产品里找到解析选项，我这里虽然购买的是godaddy的域名，但是并没有使用它提供的DNS解析服务，因为dodaddy是一个新加坡的网站，因为某些不可描述的原因，为了稳定性着想，最好是采用国内的域名解析服务，我采用的是DNSPod，这个是腾讯的服务，而且是免费的 添加域名 在这里点击添加域名，输入你刚购买的个性域名，如我的就是prozac-laputa.com 点进去按这样设置 其中，第一项第二项为gituhub的ip，三四项无法修改，第五项，类型设置为CNAME,值设置为githubpages的链接如username.github.io 设置域名服务器因为我这个购买域名的网站和域名解析的服务商不是一家，所以需要在域名商也就是godaddy这里设置域名服务器。 注意，上述这个页面是要邮箱验证之后才会显示。我其实一星期前就买了这个网站，但是发现一直无法修改，突然在另外一个博客里看到域名购买之后需要马上验证，要不然会有被封锁的风险。急忙打开邮箱，完成了验证 将域名服务器的两个值分别设置为我图中的设置即可 设置github的CNAME需要在github里你这个项目的根目录下创建一个名为CNAME的文件（注意没有后缀），里面就写上你购买的域名即可，但是这样麻烦的是每次deploy之后就需要重新建立一次，非常麻烦。实际上，只需要在你本地的source（hexo的source，不是主题的source）里新建这个CNAME即可，这样就可以每次自动生成CNAME文件 我的经历设置完上面的各个步骤之后，理论上应该只需要等待即可。但是我因为是第一次设置比较紧张，经历了一个非常惊心动魄的过程。我在完成上述步骤之后，突然发现不仅新网站打不开，原来的githubpages页面也自动定向到了yoursite.com这个页面，把我吓了一跳，可是当我把DNSPod的解析服务给停了之后，我的githubpages还是没有恢复！也就是说，还有dns服务商在解析我这个网址!使用网上的解析跟踪服务时发现，github.io这个后缀的根本解析不到，也就是说暂时找不到谁在解析我github域名.瞬间有种博客废掉了的感觉，只能自己本地访问的博客有什么用…我甚至还有换个github账号的冲动，还好等待了一段时间之后我发现新域名可以访问了，原来的链接依旧链接为yoursite.com，这才明白这就是解析本身的问题，相当于dns服务器会把我的githubpages链接解析成新地址的ip，但是新地址还没有部署好，所以就会出现之前那样的错误，至于为什么会是yoursite.com，我也不太清楚，可能是因为我最开始的时候CNAME里的值为默认的yoursite.com没有修改（但是我还是没有想明白为什么在停掉dns解析服务之后还是会出现那样的错误…） 总结 遇到问题不要轻易放弃，要尽可能地想办法解决（本来我计划是之后找学校计院的老师问一下的…）]]></content>
      <categories>
        <category>技术细节</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo Next主题配置]]></title>
    <url>%2F2017%2F10%2F10%2Fhexo-next%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[解决了博客的最基本的发文章和上传至同步之后，面临的问题自然是为自己的网站添加更多功能，当然可以选择DIY，但是想到自己能力有限，就算做出来想必也是优化和性能上有很大问题，就还是按部就班地来吧 前言说实话，网上的教程很多，但是我仔细观察，发现基本上都是抄来抄去，也就是说错误类型一致，我配置站点的过程中参考了n篇教程，列一篇最有效的以供参考Moorez。本文大部分配置都是参考之，非常感谢大大。如果大家想要手把手从头开始配置建议参考他的文章，因为我的文章没有附图，很难看到效果，但是本文的坑全是我自己踩出来的，是得到了实践证明的。 配置选项本地搜索在站点根目录下执行以下命令$ npm install hexo-generator-searchdb --save 在站点文件里任意位置加上123search: path: search.xml field: post 在主题配置文件里更改（默认为false）123# Local searchlocal_search: enable: true 顺便多说一句，网上的大部分教程都只说了前两步，而没有提到第三步，最后的结果应该是这样的 百度统计首先登录百度统计注意这个账号不是你的百度账号（搞不懂为什么明明是一家人不用一组账号…），之后跳出来的页面中，只需要复制hm.js?后面的id即可 编辑主题配置文件修改baidu_analytics的值为你之前复制的id即可 最后成果当我兴高采烈地弄完上面的步骤后发现还是不对，始终没有刷新出来，后来才恍然大悟，原来我还是在用本地的seerver看，而百度的服务是针对你的网站本身的，所以在上传之后应该是可以成功显示百度统计的功能的 评论区 在参考了网上的多篇文章之后，最终还是决定使用来必力 原因有几点 界面好看 没有奇怪的标语 UI美观 登录来必力，获取id 注册时可能需要梯子 来必力的官网有点奇怪，明明都是正常的中文，但是在登录时会莫名其妙地切换成汉语，原本是打算在chromedev里更改html的head里的lang为ko然后让Chrome自动翻译，但是这个方法行不通，它需要页面一开始加载时lang值更改才会出现需要翻译的提示。当然我们也可以选择百度翻译，这才知道原来是向我的邮箱里发送了验证码，一番折腾之后终于得到了id 编辑主题配置文件编辑livere_uid字段如下 livere_uid: #your livere_uid 文章内链接颜色修改实际上就是修改css的事，只要知道了css的位置就能很容易地修改（但是说实话这个项目不愧是大工程，我还没讲过分类这么细的css，以后接触的项目越多应该就会习以为常吧）进入文件 themes\next\source\css\_common\components\post\post.styl 在末尾加上 1234567891011// 文章内链接文本样式.post-body p a&#123; color: #0593d3; border-bottom: none; border-bottom: 1px solid #0593d3; &amp;:hover &#123; color: #fc6423; border-bottom: none; border-bottom: 1px solid #fc6423; &#125;&#125; 其中选择.post-body是为了不影响标题，选择p是为了不影响首页“阅读全文”的显示样式,颜色可以自己定义。 修改代码块自定义样式打开\themes\next\source\css\_custom\custom.styl修改为 123456789101112131415// Custom styles.code &#123; color: #ff7600; background: #fbf7f8; margin: 2px;&#125;&lt;!--// 大代码块的自定义样式.highlight, pre &#123; margin: 5px 0; padding: 5px; border-radius: 3px;&#125;.highlight, code, pre &#123; border: 1px solid #d6d6d6;&#125;--&gt; 主页文章添加阴影效果同上，在custom里添加 12345678// 主页文章添加阴影效果 .post &#123; margin-top: 60px; margin-bottom: 60px; padding: 25px; -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5); -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5); &#125; 显示每篇文章的字数和大概阅读时间在根目录下安装hexo-wordcount1$ npm install hexo-wordcount --save 在主题的配置文件中，修改如下123456# Post wordcount display settings# Dependencies: https://github.com/willin/hexo-wordcountpost_wordcount: item_text: true wordcount: true min2read: true 但是，如果光是这样设置，我们会发现没有单位显示。这时候打开Blog\themes\next\layout\_macro\post.swig找到 123&lt;span title="&#123;&#123; __('post.wordcount') &#125;&#125;"&gt; &#123;&#123; wordcount(post.content) &#125;&#125;&lt;/span&gt; 修改成 123&lt;span title="&#123;&#123; __('post.wordcount') &#125;&#125;"&gt; &#123;&#123; wordcount(post.content) &#125;&#125; 字&lt;/span&gt; 后面一个修改时间的同理，找到 123&lt;span title="&#123;&#123; __('post.min2read') &#125;&#125;"&gt; &#123;&#123; min2read(post.content) &#125;&#125; &lt;/span&gt; 改成 123&lt;span title="&#123;&#123; __('post.min2read') &#125;&#125;"&gt; &#123;&#123; min2read(post.content) &#125;&#125; 分钟 &lt;/span&gt; 事实就是修改span的内容，说起来很简单的东西，但是我发现修改了之后死活没有变化，按理来说这里的原理并不复杂应该不会有什么变数才对，后来我发现需要重新配置环境，直接刷新是不行的，关闭终端，重新hexo serve就ok了 添加顶部加载条因为我参考的文章作者的pull request被merge了，所以现在只需要在站点配置文件中修改pace为true即可.站点配置文件里还有各种loading的主题可以选择,我把里面的主题都尝试了一遍，最终还是决定采用pace-theme-minimal主题。 添加动态背景如果hexo是最新版本的话，只需要在主题配置文件里找到canvas-nest，将其属性改为true。当然，事实上文档里有很多主题，我选用的是另外一个canvas-lines 但是，我发现添加了动态背景之后主页文章透明度太低了，有点奇怪的感觉。那还是打开刚才的costom.styl,添加如下的代码 12&gt; backgroung-color: rgba(255, 255, 255, .5);&gt; 我之前还奇怪为什么hexo的库里会有three，现在终于明白了，是用来当背景使用的 推荐网站也就是在文章的右侧可以设置推荐网站，其实很简单，打开主题配置文件，找到links,将代码更改为 设置推荐网站12345678# Blog rollslinks_icon: linklinks_title: 不妨看看#links_layout: blocklinks_layout: inlinelinks: 小土刀: http://wdxtub.com/1997/09/11/booklist-page/ 羡辙: http://zhangwenli.com/ 修改推荐网站icon实际上就是修改不妨看看前面的icon样式，默认是一个链接，在font-awesome中找到你喜欢的样式之后把代码拷贝，打开/theme/next/layout/_macro/sidebar.swig中，找到blogroll（这个名字是通过chrome开发者工具找到的），将部分代码修改如下 12345678910111213141516&#123;# Blogroll #&#125; &#123;% if theme.links %&#125; &lt;div class="links-of-blogroll motion-element &#123;&#123; "links-of-blogroll-" + theme.links_layout | default('inline') &#125;&#125;"&gt; &lt;div class="links-of-blogroll-title"&gt; &lt;i class="fa fa-yourfavicon" aria-hidden="true"&gt;&lt;/i&gt; &#123;&#123; theme.links_title &#125;&#125; &lt;/div&gt; &lt;ul class="links-of-blogroll-list"&gt; &#123;% for name, link in theme.links %&#125; &lt;li class="links-of-blogroll-item"&gt; &lt;a href="&#123;&#123; link &#125;&#125;" title="&#123;&#123; name &#125;&#125;" target="_blank"&gt;&#123;&#123; name &#125;&#125;&lt;/a&gt; &lt;/li&gt; &#123;% endfor %&#125; &lt;/ul&gt; &lt;/div&gt; &#123;% endif %&#125; 这里代码里的fa-yourfavicon就是之前说过的代码名称，改完之后重新部署即可 更改网站icon这个折腾了我好久… 下载图标在easyicon中下载一个32x32的文件，并存为favicon.ico 存入本地图标的存储位置一定要搞清楚，主题配置文件里的默认路径都是站点下的source里的，而且它在代码里特意注明了source里的文件夹不能取名为images，因为和next里的images冲突了，于是我在source下的文件夹取名为image，然后把favicon.ico存入这个目录下， 修改主题配置文件将favicon部分改为 1234567favicon: #small: /images/favicon-16x16-next.png medium: /image/favicon.ico #apple_touch_icon: /images/apple-touch-icon-next.png #safari_pinned_tab: /images/logo.svg #android_manifest: /images/manifest.json #ms_browserconfig: /images/browserconfig.xml 反正我是这么改的，很多人说直接写成这样的形式 1favicon: /image/favicon.ico 但是我亲身尝试好像出了点问题，后台返回说路径有问题，我估计这个favicon是一个像类的东西（也有可能是改版了）,所以还是像我这样写比较稳妥 修改Tag样式修改/themes/next/layout/_macro/post.swig文件，搜索 rel=&quot;tag&quot;&gt;#，将 #换成&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt; 注意：应重启环境才能看到效果应用 每篇文章末尾统一添加本文在\themes\next\layout\_macro中新建passage-end-tag.swig文件，其中添加如下代码 12345&lt;div&gt; &#123;% if not is_index %&#125; &lt;div style="text-align:center;color: #ccc;font-size:14px;"&gt;-------------本文结束,感谢您的阅读-------------&lt;/div&gt; &#123;% endif %&#125;&lt;/div&gt; 接着打开\themes\next\layout\_macro\post.swig文件，在post-footer之前添加如下代码 12345&lt;div&gt; &#123;% if not is_index %&#125; &#123;% include 'passage-end-tag.swig' %&#125; &#123;% endif %&#125;&lt;/div&gt; 最后在主题配置文件最后加入如下代码 123# 文章末尾添加“本文结束”标记passage-endtag: enabled: true 原文这里代码还打错了，我直到看了后台返回的log才知道名字拼错了。做完了以上三个步骤应该就可以实现每篇文章末尾都有指定的格式了，当然第一段html可以自拟。 添加RSS安装插件1$ npm install --save hexo-generator-feed 打开站点配置文件找到plugin，修改如下 123# Extensions## Plugins: http://hexo.io/plugins/plugins: hexo-generate-feed 打开主题配置文件修改如下 1234# Set rss to false to disable feed link.# Leave rss as empty to use site's feed link.# Set rss to specific value if you have burned your feed already.rss: /atom.xml 修改完之后hexo g，然后重新配置环境，应该就有rss的效果了 直接点击RSS图标是没用的，应该复制链接然后在RSS软件中订阅 文章写作方式这个严格意义上来说不算是配置，而是一种写作习惯，但是我觉得作者这样的方式非常优雅，于是我也决定采用，就是每篇文章more之前的部分，用区域块来表示 更改默认的markdown渲染css最开始有这个想法的初衷是觉得next的blockquote太丑了，颜色不够好看。改起来其实很简单，重要的是找到css文件的位置，我自己并没有找到…因为那些文件名都太具有迷惑性了，但是我百度了hexo next的blockquote成功地找到了管理markdown文件的css路径 \themes\next\source\css\_common\scaffolding\base.styl 找到了就好办，打开文件，搜索关键词blockquote，修改border-left属性为border-left: 4px solid rgb(134,206,236); 修改默认的代码高亮原版的代码高亮配色不太美观，虽然有多种主题可以换，但是都不太如人意。这里我在一个hexo的主题melody里扒了一个highlight配色下来，代码如下 12345678910111213141516$highlight-background = #F6F8FA $highlight-current-line = #00346e $highlight-selection = #80CBC440 $highlight-foreground = #90A4AE $highlight-comment = #90A4AE90 $highlight-red = #E53935 $highlight-orange = #F76D47 $highlight-yellow = #FFB62C $highlight-green = #91B859 $highlight-aqua = #39ADB5 $highlight-blue = #6182B8 $highlight-purple = #7C4DFF $highlight-gutter = &#123; color: #CFD8DC, bg-color: $highlight-background &#125; 找到存储highlight的文件hexo-site/themes/next/source/css/_common/components/highlight/theme.styl里，将normal里的代码替换成上述代码即可 鼠标点击特效我主要参考的教程里的鼠标点击特效太水了，本来也淡了做这个特效的心思的，但是在偶然间预览到melody这个hexo主题时，迅速被里面的鼠标点击特效震撼到了，太炫酷了，妈妈我要学这个。点进了文档里没有看到这个技术的细节，只是提到了anime.js,遂顺藤摸瓜找到了anime的官网，发现这是一个提供做js动画的库，并不是我想要的特效，就在我迷茫时，突然发现anime的官网上用的就是这个特效，点开chrome-dev，大概看了一下，引用了两个js文件，anime.js和fireworks.js,后者就是我想要的效果！马上写了个html测试一下，很遗憾，不行，点开控制台，发现是没有canvas元素，在html中按官网的样子加入了一个canvas。这下特效有了，但是控制台还是会报错，原因是ga函数找不到，再一看ga函数源于一个叫analytics的js文件，可是开发者工具的sources栏里好像没看到有这个js，无奈只能点进去，发现是动态引用的，但是无所谓了，没有这个函数特效一样能够工作。于是就把官网上的fireworks.js下载了下来，并且把使用到ga函数的部分给注释掉。最后，在新建的html上调试成功。可是噩梦才刚刚开始，后面省略无数个字，摸索了一整天才把这个搞好，现在开始。 下载资源在anime的官网页面上，打开chrome开发者工具，在sources里把一下两个文件找到，并且下载到本地 fireworks.js anime.js 存入本地的路径为hexo-site/themes/next/source/js/src/ 编辑_layout文件之前已经在自己原来写过的静态网站上测试过了，想要实现鼠标点击的烟花特效，做完以下几步即可 html中新建canvas,属性如下1&lt;canvas class="fireworks" style="width: 1226px; height: 680px;position: fixed;left: 0;top: 0; z-index: 1; pointer-events: none" &gt;&lt;/canvas&gt; 这里面有几个属性要特别注意，一个是class名为fireworks，一个是position设为fixed，最重要的是设置pointer-event属性，这个属性能让你的鼠标点击穿透这个canvas直到下层，这个非常关键，不然的话你把canvas放在上面，下面的链接全都点不了了 在body末尾先后引入anime.js,fireworks.js一定要注意顺序，anime要先引入不然会出错，而且要放在dom后，不然会出现引用错误。这两步做完就可以实现功能了 在_layout文件中作出上述修改其实做个小测试很简单，但是如何将这个功能引入我们的网站就比较麻烦了，因为如果要在网站上实现效果，就必须修改所有的html。我想到这既然是一个框架，那么html应该有个模板，事实上这个模板就是_layout.swig,这个文件位于hexo-site/themes/next/layout/下。花了大概十分钟把这个文件看明白，然后在文件的最后引入这两个js,并且在开头（body元素后面）引入我们之前提到过的canvas应该就可以了. 使canvas的尺寸自适应我之前提到过的canvas的大小是写死的，这样不仅不优雅，而且不能实现响应式布局，还是在_layout.swig文件里，在所有的dom元素后面添加一段 123456789101112131415&lt;script&gt; window.onload = function()&#123; //resize canvas $(window).resize(resizeCanvas); function resizeCanvas() &#123; var canvas= $('.fireworks')[0]; canvas.height = window.innerHeight; canvas.width = window.innerWidth; //console.log(canvas.width,canvas.height); &#125;; &lt;/script&gt; 这样就能实现canvas自适应布局了 修改footer栏原版的footer栏太丑了，决定好好修饰一下 删除hexo和next信息找到themes/next/layout/_partials/footer.swig,打开编辑，删除class为powered-by和theme-info的相关dom（怎么总有种过河拆桥的感觉…） 文字居中在footer.swig里直接添加样式竟然没有效果，点开开发者工具才知道原来footer-inner这个类已经继承了text-align:left的属性（很好奇为什么我直接改写覆盖不了）,好嘛，干脆换个地方修改好了。打开\themes\next\source\css\_custom\custom.styl，添加如下代码 123.footer-inner &#123; text-align: center&#125; 修改用户名图标这里引用的技术是font-awesome，说实话我还是第一次接触这个，据说是为bootstrap设计的框架，但是我被它的简介和强大性震撼到了，不需要配置路径，下载文件什么的，只需要首先在官网上选择你喜欢的icon，在html中引用js之后，随便新建一个元素（官网建议最好是i，因为比较简介），然后设置class格式为fa icon-name，这里的icon-name是官网上选定元素之后会告诉你的名字，icon就出现了，简洁且强大。回到本文，按下面几个步骤进行： 上官网选择你喜欢的icon，把名字记下来 打开主题配置文件，搜索footer下的icon，将其值修改为你刚才找到的icon名 大功告成 修改文章的阅读全文这个特效我是看别人的博客里有的，觉得很炫酷，但是网上好像没有相应的教程，学习了这么多配置，干脆自己也来个DIY好了 首先找到相应的css文件当然，在这之前先确定好元素的名称，好在css里找对应，使用chrome开发者工具，发现这个阅读全文的按钮class为post-button，在css文件夹下找，最终在路径为themes/next/source/css/_schemes/Mist/_posts-expanded.styl（我的主题是Mist） 修改css代码然后修改其中.post-button的代码如下 12345678910111213141516171819.post-button &#123; margin-top: 20px; text-align: center; a &#123; padding: 2px 20px; font-size: $font-size-base; color: #000; background-color: #fff; border: 2px solid #000; border-radius: 3px; transition: all .2s ease +mobile() &#123; font-size: $font-size-small; &#125; +desktop-large() &#123; font-size: $font-size-large; &#125; &amp;:hover &#123;background-color: #000;color: #fff&#125; &#125;&#125; 最终的效果如图 DIY规律做了这么多配置基本上对整体的流程也很清楚了，自己DIY了几个选项效果也很好，基本上DIY配置的话规律如下 修改CSS进入/theme/next/sources/css下，找到对应的styl文件进行修改，实在不行可以在这个目录下的_custom下修改，这个css文件应该具有覆盖的最高权限。 修改DOM（比如修改图标） 注：修改css之后直接刷新页面就可以看到效果，因为css是即时渲染的，但是修改dom不可以，必须重新hexo server 有两种方法，不过我自己想了想，如果两种方法都能实现的情况下还是推荐使用第二种，更标准，符合软件工程规范 修改.swig文件虽然我之前没接触过此类文件，但是在修改过几个配置之后发现这实际上就一个dom预编译软件（我自己根据sass之类的猜测的），这个文件里是最直接的dom模板，但缺点是除非是新建元素，否则不建议直接修改这里的元素，把东西写死了很难看，而且和系统的文件风格不一致 修改主题配置文件next主题的作者就很小心我之前说的问题，它把可配置的选项都写进了主题配置文件，如果想修改直接在主题配置文件里修改即可，简单且耦合性弱，不容易出错。可惜的是我之前有些地方就没这么做，现在再修改也比较麻烦，只能以后注意了 在修改.swig时注意，如果欲修改的配置选项是以宏引用的形式调用的话，放弃修改.swig文件，直接在主题配置文件里修改你想要的配置 结语花了很大的功夫配置了这么些，七成是跟着教程做的，三成是自己摸索的。全部过了一遍之后，一方面是增进了自己的信心，另一方面就是了解了大概的框架，以后想要自己diy一些部分也很容易。目前来说这些功能应该是够用了，以后有需要的话再添加吧.]]></content>
      <categories>
        <category>系统学习</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我的编程入门]]></title>
    <url>%2F2017%2F10%2F10%2F%E6%88%91%E7%9A%84%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[其实建立这个博客的主要目的也是增加自己在编程方向的动力，那么自然需要有些文章专门用来做开荒的布局，这篇文章记录了我之前总结下来的自己未来应该在编程方面的努力方向（虽然基本没怎么动），希望在未来的日子里我能不断地补充这篇文章里的链接。 前端CSS CSS权威指南（第3版） CSS3 专业网页开发指南 CSS揭秘 预处理器的学习 JS JS高级程序设计 蝴蝶书 你不知道的JS 阮一峰老师的《ES6 标准入门》 JS设计模式与开发实践 高性能JS 框架 BootStrap Vue Task 百度前端学院1 百度前端学院2 阮一峰老师的全栈教程 参加2018年的百度前端学院 有意思的资料一个网友自己整理的前端学习知识 通用知识 注：属于比较杂碎的知识，不系统但很重要 Git（心中的痛，一直在用，一直不精） 数据库（还没有正儿八经地用过，项目接触多了应该就还好） webGIS three.js(算是基础比较牢靠，但需要项目的磨练) spacemacs(非常好看的emacs主题，但是emacs真**难用) 计算机知识计算机通用知识 SICP（不说了，神书，大二时看完了前两章，后来就没动过了…） 计算机程序设计 计算机程序设计中文 SICP中文教学视频 一个小的导论 SICP习题集 开始一些小项目 麻瓜炼金所 计算机系统要素 计算机系统基础 深入理解j计算机系统 c语言程序设计 数据结构和算法导论 算法导论 数据结构和算法分析 MIT算法导论 编程珠玑 程序设计实践 编程语言基础 程序设计语言-实践之路 程序设计语言公开课 构建一个浏览器的实践 python实现scheme的解释器 书籍阅读 代码大全 程序员修炼之道 估计我能把前端的部分搞好就已经很不容易了，接下来的部分以后再慢慢学吧]]></content>
      <categories>
        <category>系统学习</category>
      </categories>
      <tags>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[开始记录自己和生活...]]></title>
    <url>%2F2017%2F10%2F09%2F%E5%BC%80%E5%A7%8B%E8%AE%B0%E5%BD%95%E8%87%AA%E5%B7%B1%E5%92%8C%E7%94%9F%E6%B4%BB%2F</url>
    <content type="text"><![CDATA[开通博客的缘由大四了，突然发现周围的同学都或多或少带着这样或者那样的光环，反过来看看自己，似乎没有什么值得骄傲的地方。找了个时间专门想了想，自己原来大一大二的时候自己因为怯于自己能力有限，并没有参加各式各样的比赛，相反是将时间大量花费在了看书，练字，画画等系列杂篇上，更为致命的是，以前的那些爱好虽然随着时间和热情的流逝不断地舍弃了，但是心中反而留下了自己很难专注于某件事情的刻板印象。虽然这件事不知道有没有高中时期老师教诲的“遇到难题果断放弃，先做会做的题目”的影响，但事实就是如此，现在的我因为原来大一大二时尝试过太多事情但都半途而废，想要开始做什么事情一旦遇到什么困难就会产生放弃的想法（尤其是在配环境时…） 当然了，前面都是一些很丧的话，事情也有积极的一面:我发现自己在编程时还是很专注的，而且自己在前端方向非常感兴趣。可惜的是编程能力只是相对于班上的同学相对优秀，但倘若放在社会上的话根本不值一提。当然没有谁的能力是与生俱来的，但是我同样发现一个令我沮丧的事实，虽然编程时非常投入，也非常享受编程的状态，但是始终缺少自发学习编程的动力。就当我觉得未来漆黑一片时，突然想到了写博客输出的方法。事实上我自己平时也有输出（大三下有所懈怠），不过原来一直是记录在onenote上，只能“内部消化”。以博客的形式来进行输出我觉得有几个优点 公开平台，尽管可能没人看，但是绝对有莫名的督促作用 可以锻炼markdown写作的基本功 可以以比较完善的方式系统地整理自己学习的知识和完善自己 事实上，我同样也非常享受用一个平台全方面地展示自己，在这里我希望不仅是在编程，同样在读书，喜欢的动画，人生心得等系列方面都能慢慢积累，希望自己能坚持下去 曾经我的生活状态虽然暑假拿了夏令营的资格，也和研究生的老师联系好了，但是由于自己的不努力，没有拿到保研资格，也就是说摆在我面前的只有考研这一条路，但是到目前为止，我的考研说实话准备得还不是太好，这一点在我还有闲情来写博客就能看出来。还是老规矩，晚上到操场上反思一下，发现自己根本没有所谓的理想的生活，没有目标也就没有动力，中间还很有一段时间处于时间空余但是又不知道做什么的迷茫状态。老实说，就算是现在我的心中还是有点乱，对未来的大概构想就是考研-帮老师做事-研究生阶段巩固自身技能。现在终于有了博客的帮助，希望它能帮我走得更远。 激励我的大大 羡辙 小土刀 初次了解羡辙是在知乎上搜索百度前端学院的task发现有个人给了一个nice的作品，后来又是一次偶然的机会，我正在跟着老师做事，我负责百度echarts的部分，偶然发现了百度前端团队也有她，于是从echarts跟到github和微博，毅然决然地决定成为羡辙老师的粉丝。原因一方面当然是因为人长得漂亮（大雾），其实主要原因是我当时无（ba）聊（gua）翻了很多她的微博，发现原来她的生活轨迹和爱好和我很相似，都喜欢看书和编程，当然她比我厉害很多（主要是能付诸实践和看书能看进去吧）其实大大在编程圈子里也是个很普通的人，但是既然作为和我的爱好重叠度极高且目前已经有较为稳定工作（BAT诶，虽然百度已经没落了，但是也算很强势的互联网公司了），自然是要成为我心目中的标杆啦 小土刀是近期才了解到的，在搜索hexo相关配置问题时偶然发现了这个人的博客，顺手点进去看了看，哟发现大家的兴趣点也都很相似，说实话我最开始点到他的读书计划中心中是有点不屑的，因为他书单里的大多数书也是我的书单的部分（包括编程部分和科普类书部分），很不幸我的书单部分还没怎么开荒，但是后来在知乎里看见了对这个人的主观和客观的评价，发现他还是愿意把自己想做的事给很好地执行的。而这正是我所缺乏的能力，而且大大在自己的博客上全方面展示自己兴趣（包括动漫和武侠小说）让我觉得这就是我想要的生活，知道自己要做什么，并且不断地为这个方向努力 配置博客这两天终于折腾好了博客，配环境总是最累人的事。原先是计划采用jekyll，光是ruby的配置就花了我一晚上，没办法电脑之前brew出了问题，配置ruby之前还被brew折腾了好久，后来还是觉得hexo简单，事实上应该两者差不多，我是觉得hexo的next我比较喜欢，可以拿来直接用，所以跟着教程把hexo搞好了，事实证明一件事做的时候越困难，做完的幸福感越高，配置的过程就不发博客了，因为类似的教程很多。最后感叹一句： 有困难，上stackoverflow! 结语这两天风风火火地搞博客，不知道自己这次还能不能坚持下来，因为考研的缘故，自己这下半年肯定不会很勤快， 如果这次还是不能坚持下来的话…]]></content>
      <categories>
        <category>随想</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[初识markdown]]></title>
    <url>%2F2017%2F10%2F09%2F%E5%88%9D%E8%AF%95markdown%2F</url>
    <content type="text"><![CDATA[Intro前言markdown其实很早就有所接触，但是原来的话一是没有机会来接触，平时全部都以onenote的形式输出。原来使用的是Ulysess，这个工具页面设计非常优秀，UI非常舒服，我也在上面写过很多私人的文章，但是当我正式开始写博客之后，我突然发现ulysess还是不太方便（也有可能是我对ulysess的了解太少了）。在短暂尝试了macdown之后，我发现原来这款软件才是我喜欢的风格 优点 代码高亮 样式美观 可以即时渲染 推荐markdown软件当然这里还有一些推荐的markdown（macOSx）可供选择 mou（mac升级到sierra之后官网上下的版本都不兼容了） macdown 快捷按键想要入门一项技术，最好的方法就是找一些简单的事情来做，在动手实践中提升信息和这门技术的喜爱其实，如果你采用专业的markdown软件的话你会发现其实大部分软件都把常用的功能都绑定了快捷键这里以macdown为例，记录一下一些常用的按键 宏观操作关闭预览command+shift+H 细节操作标题command+1/2/3／... 代码块command+K 区域代码可以直接tab，或者六个‘’‘’‘’建议是六个`，因为前者在next上显示会有问题 注释command+/ 链接command+shift+K 图片command+shift+I 引用command+shift+B 顺序序列command+shift+O 非顺序序列command+shift+U 总结使用markdown中遇到的问题汇总 ’#‘章节标记后面应立即接空格，这个bug在markdown软件上没有问题，但是上传到网站上时就会出现错误 markdown默认是不换行的，直接换行认为是同一个段落。想要切换段落只能直接按enter macdown有很多快捷键本来可以使用，但用着用着就失效了，目前还没有找到原因，留着将来补充… 结语 markdown其实语法很简单，但是只有持续不断地输出才能最好发挥它的价值]]></content>
      <categories>
        <category>系统学习</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
</search>
