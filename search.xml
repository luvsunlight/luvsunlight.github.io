<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[LBS应用中的定位问题]]></title>
    <url>%2F2017%2F11%2F03%2FLBS%E5%BA%94%E7%94%A8%E4%B8%AD%E7%9A%84%E5%AE%9A%E4%BD%8D%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[这个问题是我在做一次LBS课程设计时遇到的问题，前后纠结了我好久。最后终于得以解决，畅快之余，还是想将整个过程记录下来，以备将来遇到了类似的问题来回顾 定位问题问题的缘由大四下的LBS课程设计中，我设想的方案是一款签到应用。当我前后忙活了近三个星期终于把这款应用完工时，却发现其定位系统效果很不好。我总共是做了三个版本，一个pc一个演示用移动端，还有一个是发布在服务器上的移动端。三个版本的定位精度都不尽如人意。在宿舍还好，时好时坏，但是在教室给老师演示时却屡屡失误。众所周知，LBS应用的核心就在于定位上，这个问题不解决，整个应用都白搭。 定位的原理要想彻底解决这个问题，就需要首先搞明白它运作的原理。我是在高德地图的api的基础上进行二次开发的（因为我在比较了国内现行的比较大型的类似产品之后觉得高德的api文档做得最好）。我们首先来看一下高德官方对它定位原理的解释 JS-API的Geolocation定位插件，融合了HTML5 Geolocation定位接口、精确IP定位服务，以及安卓定位sdk定位。其中与安卓定位sdk的结合使用适用于开发安卓系统的H5应用，需同时使用安卓定位sdk和JS-API。 在PC端，因为原生接口成功率很低，JS-API会优先调用精确IP定位服务，在IP定位失败的时候，尝试使用浏览器原生定位接口进行定位，如果原生定位接口也定位失败，则返回error事件或回调error信息。定位成功之后我们会对浏览器定位的经纬度结果进行向高德坐标的转化，并对所有有效定位结果融合地址信息后返回complete事件或者回调complete信息。 在移动端，如果开发者开启了sdk辅助定位，那么安卓手机上我们会优先尝试调用sdk的定位接口，失败之后优先调用浏览器原生定位接口进行定位，浏览器定位失败之后尝试进行精确IP定位，如果以上三种定位全部尝试失败则返回error事件或回调error信息，否则和PC端的一样，定位成功之后进行高德坐标转化和地址融合。 也就是说，本质上高德定位有两套方案，一个是ip定位，另一个是html5定位。在pc端，优先调用ip（精度差，但一般都能调到），移动端则完全相反。下面是html5定位的解释（实际上就是一个杂糅） geolocation的位置信息来源包括GPS、IP地址、RFID、WIFI和蓝牙的MAC地址、以及GSM/CDMS的ID等等。规范中没有规定使用这些设备的先后顺序，在HTML5的实现中，手机等移动设备当然优先使用GPS定位，而笔记本和部分平板，最准的定位是WIFI，至于网线上网的台式机，一般就只能使用IP来定位了，这个准确度最低。 对于目前情况的剖析我目前的设置将定位里设置一个参数geoLocationFirst设置为true之后，现在我的应用的定位策略变成了无论是pc还是移动端，都是优先h5，然后是ip 我目前的定位结果对于pc端和演示版移动端（也是在pc上运行），在宿舍里80%的概率能够h5定位成功，这种情况下，地理位置还是比较精确的。但是，对于部署在服务器上的移动端版本，始终定位失败。当我把移动端的ip定位禁掉之后，它竟然什么数据都定位不了了。之后我把error给alert出来了，问题描述为 geoLocation permission denied 关于这个问题的错误具体情况描述可以参考这篇文章，总之我的问题出现在chrome和safari等浏览器不再支持来自非安全域的定位请求，但是它们不会拒绝类似localhost形式的文件的请求。 解决方案网上给出来的解决方法是升级站点至https，这又是一项浩大的工程，不仅是站点升级麻烦，另外一个原因是我这个HTML里有很多http的资源（比如图床和一些外部加载的js），而且这些资源都不太可能更改为https协议的，这意味着，如果我把我自己的网站更改为https，这些http的外部资源都会被block掉（我自己试了一下，用https来访问，确实如此）。问题到此仿佛一下子陷入了绝境，直到我看到了这篇文章，这篇文章里提到了这样一段话 我这时候有点绝望了，疯狂的找解决方案，最后还真让我找到了——腾讯地图。我一直觉得腾讯很坑爹，网页游戏都被人骂，但是这次不得不感谢它。腾讯地图也是使用html5定位技术但人家是https请求，所以腾讯抓住了这个机会，建立一个类似中转站的请求转发（我个人的理解）。我们的请求会到腾讯的中转站（https）然后在（https）返回给我们这样我们的请求就是https请求IOS用户端就会为我们的定位提供地理位置定位服务了，这次测试终于过了 这个时候就体现出功能板块化的好处了，如果腾讯地图真的如它所言能够帮我解决这个问题的话，我完全可以只把定位这个版块的功能交给腾讯来处理。 这里不得不吐槽一句，腾讯地图api的官网虽然UI挺不错的，但是api文档真的是水，连百度也不如。完全没有高德那么清晰易懂。随便梳理一下都有下面一些缺点： 官网上只有干巴巴几个例子，连可编辑的demo都没有 接口没有具体的参数描述 error回调函数没有任何参数输入（这意味着不能知道错误类型） 调用位置服务时，不知道为什么总是调用error的回调函数 正当我绝望时，我突然发现它们还有一个官方论坛，我不得不说，虽然腾讯地图官方的api写得烂，但是它们这个论坛是真的不错，比如我在论坛里才明白了（我看到一个人出现了跟我一样的错误） 腾讯位置定位组件这个js的api是用来给移动端准备的！pc上根本运行不了 真是要吐血了，这么重要的消息为什么不在官网上说明，我就奇怪为什么不管怎么定位最后都是调用onError函数。不过还是有好消息的，腾讯地图和高德地图的坐标系都是通用的，不需要转换。最后，我战战兢兢地git push了一下，在手机上测试了一下，发现定位效果非常好。但是还是要注意，这个只针对移动端有效，pc端的定位还是存在很大的问题。 后续的问题我又在室外测试了一天，发现一半的情况下，腾讯提供的h5定位效果还不错，但是又有大概一半的情况下，定位数据出现了延后的情况，也就是说现在定位的是上一个地点的定位点。我想着我的代码里好像没有这样的设定，上论坛搜了一下，很多人也反映这个问题。应该是h5定位的技术特点，这个技术设定如果此时h5获取定位获取不到，就会返回上一次缓存的成功定位的地址信息。这个就比较尴尬了，因为这意味着如果你在一个定位效果很差的地方（比如食堂，我在食堂测试时，无论是网页的高德地图还是我自己写的程序定位都是失败），那么你无论如何都不能自辨清白了，想了一下，比较好的解决方案是增加一个定时上传信息的功能，在后台每隔一段时间就获取一次位置信息，保证上一次成功定位的地点和你现在的位置接近。]]></content>
      <categories>
        <category>技术细节</category>
      </categories>
      <tags>
        <tag>GIS</tag>
        <tag>定位</tag>
        <tag>LBS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《黑客与画家》读书笔记]]></title>
    <url>%2F2017%2F10%2F29%2F%E3%80%8A%E9%BB%91%E5%AE%A2%E4%B8%8E%E7%94%BB%E5%AE%B6%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[黑客与画家并不单单意味着编程是一门艺术，实际上这本书的作者 Paul Graham 本身也是一个程序员和画家的结合（他原本想成为一名画家，最后迫于生计不得不编程维生）。本书的译者为阮一峰，也是一名非常了不起的牛人。 等级：5分 译者序黑客的六条“伦理” 使用计算机以及所有有助于了解这个世界本质的事物都不应该受到任何限制，任何事情都应该亲手尝试 所有信息都应该是自由的 不信任权威，提倡去中心化 判断一名黑客的水平应该看他的技术能力 你可以使用计算机创造美和艺术 计算机使生活更美好 全书大概分为三个部分 1-4章：介绍黑客是如何成长的，以及他们看待世界的一些观点 5-9章：解释了黑客如何做出自己的成果，这些成果如何对全世界产生影响 10-15章：黑客的工具（编程语言）和工作方法，这是黑客文化的基础和核心 为什么书呆子不受欢迎书呆子不受欢迎的真正原因，是他们脑子里想着别的事情（smarter），他们有其他的兴趣，没有多余的经理来使自己更加受欢迎。同时，其他伙伴们也喜欢欺负书呆子，因为这与“受欢迎”的心理有关（这在美国校园环境中很重要），没有什么比一个共同的敌人更能使得人们团结起来了。而且通常情况下，喜欢捉弄书呆子的人都是“焦虑的中间层” 黑客与画家优美的软件并不总是论文的合适题材，黑客真正想做的是设计优美的软件，考核这种工作是非常困难的，你本人需要有良好的设计感，才能去考核别人的设计是否良好。但是“你觉得你具有良好的设计感和你实际是否具有，不存在相关联系。 别人无法考核你的工作，甚至误解你的工作，都不是最糟糕的事，更大的危险是你自己也会误解自己的工作。我发现自己以为需要记住各种理论实际上是错误的，何可不需要搞懂太多的概念，黑客新想法的最佳来源是其他创作领域。 黑客如何才能做自己喜欢的事情？找一份养家糊口的“day job”，然后业余时间做自己喜欢的事情 黑客也可以从绘画中学习一些经验 画家学习绘画的方法主要是动手去画，黑客学习编程的方法也应该如此（这一点我比较有感触，看书上讲了一堆设计模式，但实际上还是要结合实际才能有更深的体会，但这与那是本好书不矛盾） 我们不应该期待现有一个完美的规格设计，然后再动手编程设计。应该是动态设计的，也就是说一开始搭好框架，然后慢慢修改 优秀的软件应该要要求对美的狂热追求。如果你查看优秀软件的内容时，就会发现那些预料中没有人会看见的部分也是优美的 黑客就像画家，工作起来是有心理周期的，最开始有一个令人兴奋的新周期时，你愿意为之每天工作16个小时，等过完这一阵，你又会觉得无聊。你在工作时，必须把这种因素考虑在内，解决办法是你可以把解决bug放在最后（因为消灭bug对作者来说很简单） 在多人合作时，最好是分工尽量分板块进行，不要太重合了 设计软件时，尽量人性化设计，为了吸引用户，你必须理解用户需要什么，举例来说，几乎所有伟大的绘画作品都是画人的，因为人类总是对自身感兴趣的 源代码应该能做到自己解释自己，SICP中有一句说道“程序是给人看的，附带能在机器上运行”。一种好的编程语言，应该比英语更容易理解软件，同时把代码写得便于阅读，并不意味着要塞进去很多注释。只有在那些不太成熟，容易出错的地方才需要加上注释 不能说的话不能说的话的特点 不能说出口 它们是正确的 如何寻找不能说的话一些给别人人贴诸如“失败主义者/制造分裂”的标签的行为是很可怕的 异端邪说时空差异我们可以自以为是地相信，当代人比古代人更聪明，更高尚，但是，了解的历史越多，就能明白事实并非如此，古人适合我们一样的人，不管他们产生怎样的想法，都是正常人的想法。因此，时长回顾历史或者和当代的其他文化进行比较，如果一种行为只有在我们现在这个社会里当做禁忌，那么很有可能是我们出错了 道貌岸然流行产生的机制道德禁忌的最大制造者是那些权力斗争中略占上风的一方，这一方有实力推行禁忌，但同时也需要积极保护自己的利益 大多数的斗争，不管它们实际上争的是什么，都会以思想斗争的形式表现出来。我并不是说斗争从来与思想无关，而是要强调，不管实际上是否有思想斗争，斗争总是会以思想斗争的形式表现出来 虽然流行的思想观点和流行的服饰产生方式不尽相同,但是它们的传播途径非常相似。第一批的接受者总是带有很强的胜负心，他们有自觉的精英意识，想把自己和普通人区别开来。当流行趋势确立以后，第二批接受者就加入进来了，恐惧心在驱使着他们（不是因为想要与众不同，而是因为害怕与众不同） 所以，如果你想要找到“不能说的话”，你可以考虑观察流行产生的方式 为什么要找不能说的话 出于好奇心 我不希望我们自以为是正确的事将来被证明是荒谬可笑的。我希望我能提前知道这些事 这是很好的思维训练方式 优秀作品往往来自于其他人忽视的想法，而罪被忽视的想法就是那些被禁止的思想观点 科学家做事的方式，就是寻找传统观点无法自圆其说的地方，然后试着拆开那里，瞧瞧里面到底出了什么问题，新的理论就是这样产生的 看来存在一个清晰的关联关系，智力越高的人，越愿意去思考那些惊世骇俗的漏洞，这不仅仅因为聪明人很积极地寻找传统的漏洞，还因为传统观念对他们的束缚很小，很容易摆脱。 守口如瓶一旦发现了“不能说的话”，我的建议就是别说，至少也是挑选合适的场合再说，只打值得打的仗 你应该要明白，自由思考比畅所欲言更重要如果你感到一定要跟那些人说个明白，绝不咽下这口气，结果很可能是你无法自由理性地思考了。我认为更好地方式是在思想和言论之间画一条明确的界限，在心里无所不想，但是不一定要说出来。“搏击俱乐部的第一条原则就是不要提到搏击俱乐部” 不过你最好还是找一些靠得住的朋友，只和他们畅所欲言，无所不谈 防守的技巧如果你看不惯一些狂热分子，一个比较好的办法是把辩论提升到一个抽象的层次，可以 攻击元标签，而不是原本的标签（这样别人就有机可乘） 隐喻 永远质疑荷兰人认为自己思想开放，但是这种想法本身却什么也证明不了，有谁认为自己的思想不开放？美国郊区的中产阶级白人家庭普遍家教严格，限制孩子与外接多接触，可那里长大的孩子也认为自己思想开放呢！不管问谁，人们都会说同样的话“我们的心态很开放，愿意接受新思想”但实际上人们脑子里有一根界限，早就认准了什么是对的，什么是错的。在他们看来，所有观点都是可以讨论的，除了那些错误的观点 如果你的数学不好，你自己会知道，因为考试的时候你得不出正确的答案。但是如果你思想很保守，你自己不会知道，而且很有可能会持有相反的想法。请记住，所谓流行，本质上就是自己看不见自己的样子，否则就不会有流行了 想要摆脱你自己的时代的流行，需要一点自觉。你不要让自己成为人群的一份子，而要尽可能地远离人群，观察正在发生的事情，特别主要哪些被压制的思想观点。比如有些软件提供互联网过滤的功能，防止孩子和雇员看到色情的暴力的宣扬仇恨的网站，但是什么才叫色情和暴力？什么叫做宣扬仇恨？ 如果一个命题不是错的，却被加上各种标签进行压制和批判，这就很有问题。当你听到有人在用这样的标签，就要问为什么 如果你想要清晰地思考，就必须远离人群，但走得越远，你的处境就会越艰难，受到的阻力也会越大 如果自己就是潮水的一部分，怎么能看见潮流的方向呢 良好的坏习惯总体来看黑客是不服从管教的，但是不服从管教正是黑客之所以成为优秀程序员的原因之一 公民的自由是一个国家富强的原因，而不是结果 专制国家会变成腐败国家，腐败国家会变成贫穷国家，贫穷国家会变成弱小国家 哪些占居高位，本能地想要约束黑客，强迫黑客服从的人们，请小心你们的要求，因为你们真有可能成为千古罪人 另一条路B/S架构的优点： 数据和软件本身都不必保存在终端设备上了，只需要一个浏览器你就能完成你想要的 bug会被发现地更快 适合团队开发 避免了发布新版本的噩梦（对于桌面软件来说，你必须积累很久的bug然后一起发布，接着就是新的bug，但对于web应用来说，大部分的变化都是细微和渐进的，引入bug的机会比较小） 因为用户的数据都在你的手上，你能很好地再现大部分的bug 解决新代码的bug要比解决历史遗留代码的bug容易，因为你更新的频率高，如果一个地方可能会出bug，你是会在脑子里有印象的 不容易形成复合式bug 客服和程序员之间交流的通道缩短了 一旦写完就能看到效果，这对开发人员来说是很大的激励 关于盗版web软件很难有盗版，但是这也是一个问题。一定数量的盗版对软件公司是有好处的，不管你的软件定价是多少，有些用户永远都不会购买。如果这样的用户使用盗版，你并不会有任何损失，事实上你反而赚到了，因为你的软件多了一个用户，市场影响力大了一分 只要有可能，商业性公司就会采取一种“价格歧视”的定价方法，这实际上就是针对不同的客户采取不同的报价，商业软件的定价非常适合这种方法，因为它的成本几乎等于0.盗版实际上也是一种价格歧视， 通过ISP分销互联网软件，就好比让自动售货机出售寿司 如果你想把钱藏在更安全的地方，你是选择放在家里的床垫下还是在银行里？ 现在创业公司有更多的理由选择互联网软件创业，因为开发桌面软件越来越乏味了 “帕金森定律：因为你必须做到，所以你能做到” 互联网应用迫使程序员变成系统管理员 如何做出用户喜欢的产品 你自己愿意使用 迅速做出1.0版，并不断加以改进（听取用户的建议） 低端的用户希望简化操作和清晰易懂，高级用户希望增加新功能，做到这一点的方法是正确设置默认值，而不是限制用户的选择 如何创造财富作者认为最好的办法就是自己创业，或者加入创业公司 通过创造有价值的东西致富，这种方法的优势不仅仅在于它是合法的，还在于他更简单，你只需要做出别人需要的东西就可以了 金钱不等于财富，财富是我们需要的东西。 金钱是专业化的副产品。交换媒介的优点是，它使交易可以进行下去。缺点是，它模糊了交易的实质，人们觉得做生意就是为了赚钱，不是，本质上人们还是为了更方便地获取自己想要的东西， 人们对财富总额总是有一种错误的固有观点，认为其总量是不变的。实际上，社会会的财富一直在增长和毁灭（总体为增长） 小团队=可量测性（大公司就不一样，很难评估你真正的工作效率） 回顾历史，大多数因为创造财富而发财的人都是通过开发新技术而实现的。 对于创业公司来说，很重要的一点就是如何跟大公司做周旋。假如你是一个身手敏捷的小男孩，身后一条身材壮硕的大狗在追你，你跑到楼梯口，这时应该上楼还是下楼，我觉得应该上楼，因为上楼的话，你会很累，但大狗会更累。在实际操作中，这就意味着我们应该总是选择比较难的功能，不是因为这个功能能带来更多的收入，而是因为它比较难 对个人来说，付出和回报存在一个随机的放大因子 关注贫富分化有的时候你会想，任何人之间创造财富能力的差别真的有这么巨大吗？理解这一点的核心就在你是否愿意用一百个平庸的人交换那一个关键的人。也许CEO和运动员的技能和决心只比普通人高出10倍，但是人与人之间就是存在着重大区别 技术的发展是否加剧了贫富差距，首先，技术肯定加剧了有技术者和无技术者之间的生产效率差异，毕竟这就是技术进步的目的。这是不是一个社会问题？好像没有那么严重，技术在加大收入差距的同事，缩小了大部分的其他差异 无论在物质上，还是在社会地位上，技术好像都缩小了富人和穷人之间的差距 你经常可以听到有人批评某种政策会加剧贫富分化，隐藏的意思是，贫富分化的加剧一定是坏事。我不觉得这可以被看做为一个公理。 我想提出一种相反的观点，现代社会收入差距是一种健康的信号，技术使得生产率的差异加速扩大，如果这种扩大没有反应在收入上面，只要三种可能：1）技术革新停顿了2）那些创造大部分财富的的人停止工作了3）创造财富的人没有获得报酬。如果你想让社会保持繁荣，同时收入差距不哭到，那么只剩下3）这个选项。如果得不到报酬，人们是否还愿意创造财富，除非工作能提供乐趣。但即使是最先进的高科技公司，也会有至少90%的工作没有乐趣 从历史的角度看，只要你压制收入差距的扩大，最终结果一定是整体变得更加贫穷。你应该要避免绝对贫穷而不是相对贫穷 :）不妨去过一下9世纪的贵族生活 防止垃圾邮件的一种方法略 设计者的品味好设计是简单的设计 好设计是解决主要问题的设计 好设计是启发性的设计 好设计通常情况下是有点趣味性的设计 对称 模仿大自然 编程语言解析高级语言的优点： 程序更简短（相较于汇编） 程序具有可移植性 开源的优点： 修改bug 所有聪明人都可以参加 “用什么语言都不重要，重要的是你对问题是否有正确的理解，代码以外的东西才是关键”。这当然是一派胡言，fortran和perl就是两种完全不一样的语言 事实是，语言之间确实存在差别，但是很难确定哪一种语言是最好的 并不是语言的抽象层次越高越好，也有可能完全走错了方向，另外使用低层次语言的原因就是效率问题 一百年后的编程语言我认为，编程语言就像生物物种一样，存在一个进化的脉络，许许多多分支都会成为进化的死胡同 效率地下的软件并不等于很烂的软件，一种让程序员做无用功的语言才能称得上真的烂。 拒绝平庸 Lisp真的很值得学习，你掌握它之后，会感到它给你带来的极大启发，这会大大提高你的编程水平，使你成为一个更好地程序员，尽管在实际工作中极少会用到Lisp 作者认为，上述的说法不太靠谱，因为既然你觉得它很好用，那为什么不拿它来开发商业产品呢，而且作者确实这么做了。 书呆子的复仇一些经历奇迹般地具备了两种很常见但很难结合在一起的特点：1）对技术一无所知2）对技术有强烈的个人观点 Lisp语言的特点 条件结构（if else then ） 函数可以作为变量 递归 变量的动态类型 垃圾回收机制 程序由表达式组成 符号类型 代码使用符号和常量组成的树形表示法 无论什么时候，代码都是可用的 Lisp的最大优势就在竞争激烈的条件下开发哪些解决困难问题的复杂程序 梦寐以求的编程语言没人愿意在程序的头部加上一大堆的声明语句（java） 设计与研究优秀的建筑师不会先设计，然后强迫用户接受，而是先研究最终用户的需求，然后做出用户需要的设计 读书感悟重新读本书的时候，一边看一边将重要的段落摘抄下来，说来惭愧，二刷的时候竟然有一种一刷的感觉，之前看的时候实在过于鲁莽，囫囵吞枣。说实话，全篇读下来，真正关于编程的干货大概只有四成，剩下的全是作者对于生活细节的洞见和思考，思想深邃程度不逊于我原来所看的一些专业书籍，真是一个妙人儿，居然能在不止一个领域做到卓越，非常了不起。其中，作者有关质疑的部分也是极为有趣，非常值得回味。]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《暗时间》读书笔记]]></title>
    <url>%2F2017%2F10%2F25%2F%E3%80%8A%E6%9A%97%E6%97%B6%E9%97%B4%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[刘伟鹏的博客可以堪称国内程序员的典范了吧，我也是两年前就看了这本书，现在重新翻了出来，作为自己博客上读书笔记的开端吧 读书笔记之前的杂谈一些唏嘘在看了这么多书之后，我发现一个简单但深刻的道理：对于一本书，如果你读完之后觉得有价值。一定要写（或者说最好要写，因为有的书写不出来什么）读书笔记，尤其是对我这种记性差的人来说。我大一大二看的书很多，基本上空闲的时间六成都放在了看书上。可是我读过的这些书，一部分是确实没什么价值，剩余有价值的书，部分没做笔记，部分做了笔记但是放在了OneNote上。不可否认onenote是一个非常好的知识管理工具，事实上我到现在一些私人的信息都在用它来管理，但是把它来当做一个知识输出的平台那还是不够的。一个是输出的方式不够多样化，对于现在熟悉了markdown之后的我来说，一个不支持markdown功能的平台简直是不可原谅的。另外一个也是最重要的原因：在onenote上你所有记录的东西都是给自己看的，而发布在blog或者是知乎/简书等平台能起到一个公众督导的效果。这一点很重要，哪怕我的博客没有人看，但是我只要一想到这是一个公众的平台，就会尽力用心对待之，努力地收集资料以及认真记录文字。 关于kindle想要大量看书的话，还是买一个kindle更划算。我大二时也买过一个kpw2.但是怎么说呢，对于我个人而言，我还是更偏向于纸质书一些，我一般只用kindle来看一些散文和小说。它的阅读感还是不如纸质书来得流畅。也许是我没有掌握正确的看书技巧吧，但不管怎么说，纸质书的价格和携带型始终是爱书之人心中的一个巨大的创伤…希望以后能捡起来这个工具吧 关于作者最开始接触作者刘未鹏是想订一些rss看，知乎里有些人提到了他。他的博客里有他个人完整的介绍的信息。当我视图给自己的博客做出精准的定位时，我发现，刘未鹏的博客就是我心中理想的博客。换句话说，刘未鹏的生活轨迹，实际上就是我梦想的轨迹，倒不是说多么高薪。高薪只是一个层面，毕竟做技术做到这个层面都差不到哪去，最关键的是，我非常佩服他在搞好自己本职工作的同时，能够阅读这么多的书，并且自己有着非常深刻的体会和感悟，这一点从他的文字里能够很好地看出来。我自己最希望的就是两件事情，一是不断提高自己的编程能力，养家糊口的同时能够源源不断地获取成就感，二是看很多的书，丰富精神世界的同时也深刻自己的思想。刘未鹏很好地做到了这两点的结合。这本书就是他将自己多年来写的博客精选一部分然后集结成册，最后出版。希望我能从再一次拜读这份作品的同时，有意识地学习点什么。 序言：为什么人人都该学点心理学心理学早就从弗洛伊德那一套中走出来，并结合现代科学技术手段和研究方法，跨学科研究人脑思维的特点以及和现实生活的关系。心理学与日常生活息息相关的另一方面就是日常判断与决策. 人的大脑和思维是目前已知最为复杂的系统，对这个系统的研究是一件极其迷人的事情，即便对于像我们这样的芸芸众生来说，纵使不去做研究，学习一些这方面的科普知识，对于学会正确的思考也有极大的益处。 大脑是我们最重要的工具，要正确利用这个工具，唯一的途径就是去了解他，尤其是了解他的弱点。人们的思维充满了各种各样的结晶，每一条捷径都是一把双刃剑，一方面，它降低了大脑的认知复杂度，有助于做出绝大多数时刻都正确的判断，但另一方面，它也常常导致人们把大部分情况下成立的法则当场了放之四海皆准的。 以上构成了人类思维中的种种谬误，而学会思考，就是学会认识到这些谬误。 第一篇：暗时间暗时间 实际投入是时间和效率的乘积 专注做一件事，就不会有效率的损失。因为大脑在开始一件任务时必须要要有一定的时间来热身 倾向于创造大块的时间来阅读重要的东西 能够迅速进入专注状态，以及能够长期保持专注，是高效学习的两个最重要的习惯 可以考虑在嘈杂的环境里训练自己的抗干扰能力 设计你自己的进度条 在尝试新领域时，不要过早退出循环（我心头的一记重击…）过早退出的原因往往在于对未来的不确定性，对于投资时间最终无法收到回报的恐惧。 没有勇气去问别人问题，一般原因是1）被批评了怎么办2）认为问了也没有什么特别的信息。但事实可能是1）被批评了算不上什么实质性的损失2）你认为问不出什么，不代表真的问不出什么。别把不知道当做没有！ 靠专业技能的成功是最具可复制性的（在一个领域选择一个靠谱的方向，然后专心致志地钻研下去，最后必定成为高手） 饿死在干草堆之间的驴子（一个寓意） 一生的知识积累，自学起码占90%，程序员是最适合自学的行业 如何有效地记忆和学习 你所拥有的知识并不取决于你记得多少，而在于它们能否在恰当的时候被回忆起来 记忆技巧：空间记忆法 在记忆知识时，加上自己的理解 尽量多和别人讲知识 整理笔记（这个比较可行） 书写 学习密度和专注度 在大学期间，最不缺的就是业余时间，最缺的就是专注精神 真正的动力还不是自制力，应该是追求 一直以来伴随我的一些学习习惯 google&amp;wiki(中文维基被墙了，访问英文的把) 看书只看经典 做好读书笔记（思考记录下来+记录书上的片段） 利用生活的片段思考（这个我觉得有点难） 多看思维和心理学的书（元知识） 学习一项知识，必须问自己三个重要的问题 1）它的本质是什么 2）它的第一原则是什么 3）它的知识结构是什么 （这个做到我觉得有点困难，但还是放在dahsoboard里提醒自己吧） 学习和思考中，问自己：1）你的问题是什么2）我到底有什么收获3）设想自己在给别人讲4）将给一个不懂得人5）养成反驳自己的习惯（实在有些强人所难，不过还是尝试一下吧，不过学习完一个知识/看完一本书，真的需要做一下总结） 趁着对一件事有热情的时候，一股脑把万事开头的最难的阶段熬过去 时不时反省一下，自己现在做的事，到底是什么？它们重要吗？你需要在这个时候学习这个吗？ 有时间吗？总结最近得到的新知识把！ 有时间吗？看本书把！ 学习一个新东西之前，首先在大脑中积累充分的疑惑感（这个说到了点子上） 的确，也许真的有更好的路，但事前真的很难判断哪条路是最有的，我能做到的，是把一条路走透了，走深了，只要不是一条太不靠谱的路，深入的过程中总会有很多的收获，只要不是太顽固，善于反省，总有一天也会意识到越来越靠谱的路 第二篇：思维改变生活逃出你的肖恩克书写是为了更好地思考书写有几点好处 书写是对思维的备忘（方便罗列框架以及及时回溯） 书写是对思维的缓存（笔纸构成一个作家） 书写是和自己的对话（这个我深有感触，每次写随想时都能深刻体会到这一点） 书写是和别人的交流（这点我还没做到，希望以后能做到） 有时候，语言自己也会思考 如果你逼着自己将一些不成熟的想法写下来，看着自己写的内容，试着进一步扩展它们，就有可能在理性的道路上走得很远 为什么你从现在就应该开始写博客 写博客有很多好处，却没有任何明显的坏处 能交到很多志同道合的朋友（当我看完了一个写了好几年的博客，仿佛和这个人交流了很久） 书写是为了更好地思考 “教”是最好的“学”（这个也是我比较推崇的一点，从建立这个新博客之后，我尽量每学习一个新知识，就在理解了之后写一篇博客来记录下来） 讨论是绝佳的反思 激励你去持续学习和思考（为了让你的博客有价值，你必须不断总结自己学习的结果，你必须不断思考，给出比别人深刻，独到的见解。这看起来有些本末倒置，但很快本和末就会纠正过来） 学会持之以恒地做一件事（这一点我有较深的体会，忙了很久之后终于把自己的博客调得很炫酷了，以后每次打开博客都很有成就感，写博客的积极性就会很高） 一份长期的博客是一份很好的简历（主要是说作为别人了解你的窗口） 我不想和我不能 自利归因就是把一件事发生的的原因归于对自己有利的那种情况。 遇到问题为什么应该自己动手 现代很多新知识都是知识密集型的，我们很多情况对困难会高估 只要智商上没有根本的差别，别人的大脑能够掌握的知识，你也能。你所感受的困难，不过是因为unknown unknown带来的 解决问题的过程可能艰辛，但是你收获的绝不仅是结果本身 解决问题越多，你解决问题也会越发熟练：知道可能是哪方面出了问题，知道应该在哪里寻找答案 原来的我也总是遇到困难再三尝试无果之后就会选择放弃，现在随着知识网的扩大，部分问题也能慢慢尝试自己解决了，这对我来说很重要。困难的路越走越简单，简单的路越走越难 什么才是你的不可替代性和核心竞争力 技术路线的选择重要但不具有决定性 专业领域技能 跨领域的技能（解决问题的能力，创新思维，判断与决策能力，批判性思维，表达沟通能力） 学习能力 性格要素 第三篇：跟波西亚学解题跟波利亚学解题锤子和钉子鱼是最后一个看到水的知其所以然为什么有必要知其所以然康托尔，哥德尔，图灵——永恒的金色对角线快排为什么那么快贝叶斯方法推荐书籍 nudge paradox-why more is less made to stick the social animal searching for memory outliers the tipping point psychology of judgement and decision making 别做正常的傻瓜 怪诞行为学 mistakes were made, but not by me askIng the right question 影响力 how we decide 我是一只IT小小鸟 像外行一样思考，像专家一样实践 高效能人士的七个习惯 奇特的一生 合作的金华 mean genes sway 随机致富的傻瓜 黑天鹅 20世纪最伟大的心理学实验]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>效率</tag>
        <tag>个人成长</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一键图床指南]]></title>
    <url>%2F2017%2F10%2F19%2F%E4%B8%80%E9%94%AE%E5%9B%BE%E5%BA%8A%E6%8C%87%E5%8D%97%2F</url>
    <content type="text"><![CDATA[写markdown的过程是非常爽的，但是有一点始终是我心中的一根刺，那就是图床。博客理论上来说是可以把图片存在本地然后调用相对路径的，但是这么做一方面加重了上传的负担，一方面加重了网站的负担。比较推荐的方式是图床。但是图床虽然副作用小，但当一篇博客里需要引用的图片变多时，图床繁琐的步骤往往会成为你发疯的诱因.我在尝试了一个晚上之后终于解决了这个问题 前言传统图床步骤一般来说，正常途径下我们写博客使用图床需要经过以下几个步骤 使用快捷键截图 打开七牛云存储 上传本地图片 复制外链 当然你可以说我可以开始写博客时把七牛打开，然后需要时往里面塞就好了。事实告诉我，当我在网上看见截完图之后立刻上传并且生成外链一气呵成时，前面的4个固定步骤在我看来就如同原罪一般不可原谅。于是开始了改造之旅… 首先说明，我在网上找了很多办法，但是很多都不一而終（手残如我…）。本文中会把可能的方法都列出来，但是我尝试失败了的就不细说了，只提我自己做好了的。我自己没有实现不代表方法不可行，理论上来说都是可以的 可用方法系统自带截图的设置首先在讲各个方法之前，先把系统给的截图给改一下。默认的设置里command+shitf+4是截图,command+shift+4+control是截图并且存入剪切板，后者对我们来说更为实用，但是更难按，在系统的键盘设置里把前者的默认按键和后者换一下即可 workflow参考链接 这个是alfred的特殊技能（alfred的文章我之后会专门写），并且需要购买powerback包。具备了上述条件之后，只需要按照参考链接里的步骤，安装里面的wordflow，配置好七牛的信息，应该就可以运行了。我自己是一切都搞好了，但是实践起来发现不是这回事，总是报网络的错，我估摸着可能是七牛的api改了，但是也没那个闲工夫去琢磨workflow里的东西，遂作罢。 |补充| 后来找到原因了，原来是存储空间是不在华东的缘故，重新建立了一个华东的存储区，并且重新修改了一下配置文件，可以运行了。而且我在另外一个同学的电脑上也查看了效果，并没有它说的分辨率丢失的问题，那么workflow就是目前我非常完美的一个解决方案了，快捷（只需要截图然后粘贴），安全（可以在七牛上管理）。 操作步骤 command+shift+4截图 在编辑器里command+control+v粘贴 缺点这个workflow已经非常强大了，简单易懂，但是还是存在缺陷，那就是粘贴出来之后的是html里的img格式，更让我震惊的是markdown竟然也支持这个格式！（感觉不是markdown支持，应该算是本身markdown就是嵌在html里通过markdown解释器编译成dom元素吧）。作者给出来的理由是retina屏幕上截的图在其他屏幕上非常模糊，通过这个方法能够避免这种问题的出现。我试图修改python文件，让它返回markdown里正常的链接，可以是可以，但是还是有点害怕作者说的问题…另外还有一个小缺点是有一点点的阻塞感…（逼死强迫症） 用起来很简便，但是我总觉得一个img元素的出现很诡异… atom的插件参考链接 正好我最近在配置atom，但说实话我是不太想用atom来做markdown的（界面没macdown好看+操作空间太小了）。但是既然这个方法可行那还是姑且尝试一下把，我把里面两个插件都下下来了，但又一次报错，这次是包本身的问题，又是个什么函数找不到了，怒删之。更何况这个解决方案本身就不太好，因为只能解决atom这一个平台的问题。 iPic参考链接 这个我最后是配置好了的，但是还是感觉有一个缺陷，那就是只能默认存储在微博上（而且是存储在匿名账户上！）这样一方面感觉是没有安全感，另一方面是觉得日后不好管理，但是付费版需要56元/年…总体来说这个软件总体来说除了安全性之外还是不错的 操作步骤 command+shift+4截图 command+u上传图片 command+v粘贴 photocloud参考链接 这个软件需要在appstore官网上下载，看了晚上的宣传，感觉还是不错的，但是当我真正使用时才发现完全不是这回事。首先，截图方式太傻，完全没有本地截图然后自动上传到剪切板那么便捷，其次，七牛云存储！！！我发现按要求配置好了之后，还是会报错incorrect region，网上搜了一下，好像是存储空间应该选华东（默认是华东），要么我换一个存储在华东的空间，要么修改远吗（可是这是一个软件并不能修改…）可是当我修改成华东之后发现还是报了一样的错，服了，遂删之。 总结最后还是两种方法都实现了，ipics真的挺不错的，但是微博链接还是有点不放心。workflows的方法真心强，而且更改了链接之后发现还是非常完美的。workflow虽然好但是那是相对于购买了alfred的powerback的用户来说的，对于没有购买alfred的powerback的人，我的建议还是ipic。photocloud不仅截图不好用，而且七牛设置总是出问题，差评…]]></content>
      <categories>
        <category>技术细节</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Atom改造计划]]></title>
    <url>%2F2017%2F10%2F19%2FAtom%E6%94%B9%E9%80%A0%E8%AE%A1%E5%88%92%2F</url>
    <content type="text"><![CDATA[之前写前端一直使用的是webstorm,这个ide很好，功能也集成得不错，但是缺点太显著那就是慢，启动慢，打字有时候还会卡帧，这导致我不得不寻找一个轻量级的替代品，这次我考虑的由vsc和atom，最终还是决定使用atom，理由就是好看且顺手。我从今天上午开始到现在已经下载了很多好用的插件，写了这篇博客来梳理一下思绪 关于atom简介atom是github出版的编辑器，插件也非常丰富。官网 参考文献 1 2 优点 UI好看(感觉比spacemacs还好看) 前端友好 插件市场简便且强大 配置在介绍atom配置之前首先需要更改一下源（参考这篇文章），我最开始的时候就没有改，下载速度非常慢而且易出错，f**kGFW！ 首先找到这个路径\Users\用户名\.atom，在这个下面新建一个.apmrc的文件，代码如下 12registry=https://registry.npm.taobao.org/ strict-ssl=false 也就是把源换成淘宝源（brew，npm，pip也应该同理换一下，当然这就不是本文的讨论范围了） atom安装插件应用内打开我更偏爱这种方法，一是简单，而是内容也更丰富（可以看到评价和简介）mac下直接按command + ,，在里面找到install栏即可 终端安装apm install + 插件名，不太推荐这种方法，不要为了装逼冒这个风险。python，node都可以通过终端安装包，但atom没必要，应用内更丰富且易定制。 atom快捷键 command+\ toggle文件夹 command+p 查找文件 command+enter跳转到下一行 command+k + 方向键分屏 插件篇主题插件atom-material-ui版本控制 git-plus这个方便git使用，我之后写git的文章时会结合这个来说的（主要是方便我这种不记命令的懒人XD）##markdown说一下，我最开始的时候也是想把atom改造成一个markdown编辑器的，后来尝试了很多插件，最后发现还是macdown好用，配色鲜明（这个很重要）+空间大（屏幕小的痛） 文件管理project-manager暂时没有搞明白 file-icons为文件添加各种icon，方便识别 expose主要就是呈现跟手机端一样，当tab栏过多时，按下comamnd+shift+e查看所有的tab 自动补全emmet不解释 auto-completepaths文件路径补全 autocomplete-modules自动补全模组名 atom-ternjsES5, ES6, ES7, Node.js, jQuery, Angular 等等 js 代码自动补全 css-snippets代码检查linter这是一个系列，主要作用是代码优化和检测 linter-jshint基于 jshint 的 JavaScript 语法检查插件 linter-eslint基于 ESLint 的 JavaScript 语法检查插件 linter-htmlhintlinter-jsonhintlinter-csslint前端细节autoprefixer这个是用来解决兼容性前缀的，你只需要写完之后，使用控制命令调用autofixer即可，非常方便 open-in-browser按下组合键control+alt+o，即可使用默认浏览器打开当前html（默认是chrome），当然也可以通过底栏的按钮来打开html hyperclickjs-hyperclick拓展功能color-pickerconmand+shift+c直接显示出选色器，非常方便！！！！ docblockr这个功能非常强大，可定制型也比较高…我琢磨了很久也只挖掘了几个我目前暂时能用到的。主打功能：高级注释。/*或/**之后按下tab，就能自动转化成批量注释。另外，在函数前使用这个功能，就能自动衍生出有关函数的相关注释 minimap缩略图]]></content>
      <categories>
        <category>系统学习</category>
      </categories>
      <tags>
        <tag>atom</tag>
        <tag>编辑器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[近期开荒计划]]></title>
    <url>%2F2017%2F10%2F18%2F%E8%BF%91%E6%9C%9F%E5%BC%80%E8%8D%92%E8%AE%A1%E5%88%92%2F</url>
    <content type="text"><![CDATA[git 数据库 sass dash alfred 框架 配置一款顺手的编辑器 近期开荒计划 因为webstorm太过笨重，于是想着找些轻量级的替代品。配置环境这种事情最是消磨时间也最能打击人，我花了一下午加半晚上的时间尝试了现行的较优的选择atom和vsc，事实证明，我可能真的比较蠢，也可能是缺乏耐心，没有一项我觉得比较好用，编辑器的事还是之后再说把 我对编辑器的要求 配色好看（atom的配色是我目前看过最好看的） 对前端支持较好（atom比较优异） 对markdown支持较好（说实话我两款编辑器的markdown都用过了，还是觉得macdown好用且好看且轻便） 插件下载快速且可配置型高（这个vsc比atom好，atom下载太慢了，而且可配置项少，有的插件官网上都没说明白…） 我对编程应该还是持有兴趣的，但是感觉自己耐心不足且能力极其有限，唉，还是只能走一步看一步了]]></content>
      <categories>
        <category>系统学习</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[应对DNS污染]]></title>
    <url>%2F2017%2F10%2F14%2F%E5%BA%94%E5%AF%B9DNS%E6%B1%A1%E6%9F%93%2F</url>
    <content type="text"><![CDATA[事情的起因是昨天室友跟我反映说他们b站上不去了，看我能不能登录。我发现我的电脑当时能够登录，但是当晚却始终load不出来，不仅如此，还有很多其他的网站如最近关注的个人博客登录不上，后来通过一系列分析确定应该是DNS污染的问题，并通过修改本地dns服务器来成功解决此问题 分析问题问题的出现2017/10/13日我和室友的电脑先后出现了部分网站上不去的问题（网速经测验没有问题），以我个人为例，打不开的网页有以下几个： b站 七牛云存储 关注的私人博客 这些网站都有一个特点，网页的title能解析出来，但是dom始终是一片空白，说明网页的服务器没问题，html能收到，可能是某个资源解析阻塞了。打开了调试之后发现，bootstrap的cdn服务 的资源始终加载不出来，看来问题可能在这里。bootstrap的cdn是非常普遍的cdn解决方案，很多网站都采用了。也就是说如果这个问题不解决，很有可能会对我们的上网体验造成很大的困扰。遂上网查询了类似问题，有网友提到了可能是dns污染。我对计算机网络的了解也是一知半解，正好借这个机会捋一捋知识网。 关于DNS污染和DNS劫持什么是DNS在讲DNS之前，还是先提一下计算机网络通讯，具体不细说，大概意思就是计算机们之间是通过协议来进行通讯，最基本的协议有TCP和UDP，这些协议只需要知道对方的ip和端口号（web服务的端口统一是80）。实际上也就是说理论上你只要知道对方电脑的ip就可以访问。但是世界上计算机这么多,想要记住别人的ip何其苦难而且也没必要。于是人们开发出了域名系统，比如www.baidu.com对应的就是百度服务器的ip，那么我们在浏览器中输入对应的域名，这个域名怎么解析成对应的ip呢？这时候就要靠我们的dns系统了。 DNS（Domain Name System，域名系统），因特网上作为域名和IP地址相互映射的一个分布式数据库，能够使用户更方便的访问互联网，而不用去记住能够被机器直接读取的IP数串。通过主机名，最终得到该主机名对应的IP地址的过程叫做域名解析（或主机名解析）。DNS协议运行在UDP协议之上，使用端口号53 这是官方对dns的解释，实际上就是一个域名字典，能够根据域名来解析出对应主机的ip地址.我们打开终端，输入 1$ ping www.zhihu.com 得到的结果为 1234PING 6ej19t5k0le6q937.alicloudlayer.com (118.178.213.186): 56 data bytes64 bytes from 118.178.213.186: icmp_seq=0 ttl=29 time=27.525 ms64 bytes from 118.178.213.186: icmp_seq=1 ttl=29 time=27.360 ms64 bytes from 118.178.213.186: icmp_seq=2 ttl=29 time=24.600 ms 说明我们本机能够访问www.zhihu.com,并且能够看到，解析出来的ip是118.178。213.186 DNS污染 DNS污染是一种让一般用户由于得到虚假目标主机IP而不能与其通信的方法，是一种DNS缓存投毒攻击（DNS cache poisoning）。其工作方式是：由于通常的DNS查询没有任何认证机制，而且DNS查询通常基于的UDP是无连接不可靠的协议，因此DNS的查询非常容易被篡改，通过对UDP端口53上的DNS查询进行入侵检测，一经发现与关键词相匹配的请求则立即伪装成目标域名的解析服务器（NS，Name Server）给查询者返回虚假结果。 百度百科上的解释已经很明白了，事实上就是路由器对用户发送的dns请求包做出了假传圣旨的举措（本来它只是个传话的公公） DNS劫持 DNS劫持就是通过劫持了DNS服务器，通过某些手段取得某域名的解析记录控制权，进而修改此域名的解析结果，导致对该域名的访问由原IP地址转入到修改后的指定IP，其结果就是对特定的网址不能访问或访问的是假网址，从而实现窃取资料或者破坏原有正常服务的目的。DNS劫持通过篡改DNS服务器上的数据返回给用户一个错误的查询结果来实现的。 DNS劫持症状：在某些地区的用户在成功连接宽带后，首次打开任何页面都指向ISP提供的“电信互联星空”、“网通黄页广告”等内容页面。还有就是曾经出现过用户访问Google域名的时候出现了百度的网站。这些都属于DNS劫持。 校园网的实现方式应该也算dns挟持 总结DNS劫持就是指用户访问一个被标记的地址时，DNS服务器故意将此地址指向一个错误的IP地址的行为。范例，网通、电信、铁通的某些用户有时候会发现自己打算访问一个地址，却被转向了各种推送广告等网站，这就是DNS劫持。 DNS污染指的是用户访问一个地址，国内的服务器(非DNS)监控到用户访问的已经被标记地址时，服务器伪装成DNS服务器向用户发回错误的地址的行为。范例，访问Youtube、Facebook之类网站等出现的状况。 应对方法应对DNS劫持可以采用使用国外免费公用的DNS服务器解决。例如OpenDNS（208.67.222.222）或GoogleDNS（8.8.8.8） 应对DNS污染对于DNS污染，可以说，个人用户很难单单靠设置解决，通常可以使用VPN或者域名远程解析的方法解决，但这大多需要购买付费的VPN或SSH等，也可以通过修改Hosts的方法，手动设置域名正确的IP地址。 本次问题的解决单从形式上来看，本次事故更像是DNS污染，因为并不是指向了错误的网站，而是资源加载不出来，但是最后通过修改DNS的方法也成功地解决了这个问题，我的猜测是dns劫持了之后单纯返回了错误的ip。不过更大的疑点是：只有我们宿舍出现了这种情况！（我跑到对面宿舍去借同学的电脑登录我之前登不上的网站发现都没问题…）有种不对的感觉Orz]]></content>
      <categories>
        <category>技术细节</category>
      </categories>
      <tags>
        <tag>DNS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[gulp入门之入门]]></title>
    <url>%2F2017%2F10%2F12%2Fgulp%E5%85%A5%E9%97%A8%E4%B9%8B%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[之所以这篇文章取名为“入门之入门”，因为连入门都算不上，只是暂时了解一下这门技术，并且应用于我的博客的优化中。其实gulp很早之前就有所接触了，这次终于有机会体验一把了 我的gulp学习历程比较奇葩，是首先按教程和自己摸索，使用gulp把网站优化了之后再去看gulp的有关资料的，事实证明gulp的源码非常明了，我从来没接触过的人看一眼也能明白每段代码具体是干什么的。首先还是介绍一下如何使用gulp优化网站吧。 需求因为我们发现每次deploy都是先将public文件夹下的内容清理干净（事实上，public文件夹就是你上传到github上的最终内容），然后把全部文件编译生成一遍，再次生成public文件夹，再上传，如果博客数一旦变多，这个过程就会很慢且效率底下，我们需要gulp这个工具来压缩代码（这个功能是教程里提供的，事实上gulp能做的远不止这么些） 实现过程安装gulp在博客的根目录，执行以下命令 123$ npm install gulp -g$ npm install gulp-minify-css gulp-uglify gulp-htmlmin gulp-htmlclean gulp --save$ npm install gulp-babel 这里的gulp-babel是我后来自己加的，原教程没有加，但是在之后的deploy会出错 新建配置文件在博客的根目录下，新建名为gulp.js的文件，文件内容为 1234567891011121314151617181920212223242526272829303132333435var gulp = require('gulp');var minifycss = require('gulp-minify-css');var uglify = require('gulp-uglify');var babel = require('gulp-babel');var htmlmin = require('gulp-htmlmin');var htmlclean = require('gulp-htmlclean');// 压缩 public 目录 cssgulp.task('minify-css', function() &#123; return gulp.src('./public/**/*.css') .pipe(minifycss()) .pipe(gulp.dest('./public'));&#125;);// 压缩 public 目录 htmlgulp.task('minify-html', function() &#123; return gulp.src('./public/**/*.html') .pipe(htmlclean()) .pipe(htmlmin(&#123; removeComments: true, minifyJS: true, minifyCSS: true, minifyURLs: true, &#125;)) .pipe(gulp.dest('./public'))&#125;);// 压缩 public/js 目录 jsgulp.task('minify-js', function() &#123; return gulp.src('./public/**/*.js') .pipe(babel()) .pipe(uglify()) .pipe(gulp.dest('./public'));&#125;);// 执行 gulp 命令时执行的任务gulp.task('default', [ 'minify-html','minify-css','minify-js']); 没有添加babel()环节时，终端会报错说压缩js文件出错，我查了一下，说是es6需要编译，那么还需要引入gulp-babel文件，并且在gulp的pipe里添加一个.pipe(babel()) 修改deploy.sh文件gulp的基本配置已经完成了，我们只需要在生成hexo的public文件时，使用之就可以了，具体操作是，打开deploy.sh文件，将其 1hexo g 修改为 1hexo g &amp; gulp 完成，这样每次运行`deploy.sh脚本时，在生成文件都会提高效率 关于gulp接下来就是我对gulp的一些了解，看一下一位前端工作者对gulp的描述 Gulp / Grunt 是工具链、构建工具，它们能够优化前端工作流程。比如自动刷新页面、combo、压缩css、js、编译less等等。使用Gulp/Grunt，然后配置你需要的插件，就可以替代手工实现自动化工作。 我自己的理解就是是一个自动化工具，配合各种插件（几千种），能够自定义实现很多流水线工作，尤其是和less或者sass等css预编译语言配合，但是现在还不是我学习这个的最佳时机，因为我暂时平时用到这个的地方很少，等到研究生阶段做项目的时候再深入理解之。 总结越学习发现需要学习的东西越多，自己掌握的还是太少了。通过这次实践之后，坚定了我学习gulp&amp;less&amp;脚手架工具的决心。此外，我还深切体会到了懒是程序员的第一动力这句话的真谛，要始终明白，程序员的首要工作是创造，而不是重复性工作。感觉好像回到了学习SICP的时候，当时被书里抽象了又抽象的思想震撼到了。唉，要不是被考研束缚住了，我现在就想每天抱着笔记本再买些书天天泡前端…（bu cun zai de）]]></content>
      <categories>
        <category>系统学习</category>
      </categories>
      <tags>
        <tag>gulp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[初识shell]]></title>
    <url>%2F2017%2F10%2F12%2F%E5%88%9D%E8%AF%86shell%2F</url>
    <content type="text"><![CDATA[事情的初衷是我在测试站点配置时需要不断重复一些步骤，比如depoly三连，建站二连，虽然使用终端操控已经很简便了，但是尝试多了之后也会厌烦。于是想到写一个shell脚本来帮助我完成以上的任务，这样的话我每次只要打开终端，按一个小小的up键调用历史命令就可以完成上述任务了。同时这也是我真正意义上第一次接触shell脚本编程 基础配置在开始写脚本之前还需要进行一些基础的环境配置 新建shell文件夹这个主要是方便管理shell文件，因为以后肯定还要写的，干脆用一个统一的文件夹存起来好了，我的存储路径是/Users/lizhiyuan/Documents/Shell 将上述文件夹路径添加至环境变量主要是每次启动终端想要打开shell文件，都需要首先cd到上述路径里，太麻烦了，不如直接添加到环境变量里，这样的话每次只需要在终端里敲shell文件名就可以运行shell文件了 mac下自带的终端是bash，我之前换成了zsh，影响都不大。如果是bash，就打开.bash_profile文件，如果是zsh，就打开.zshrc，然后添加如下代码 1export PATH=/Users/lizhiyuan/Documents/Shell:$PATH 大意就是将上述路径添加至环境变量，当然我为了懒，还在里面添加了 1alias shfile="/Users/lizhiyuan/Documents/Shell" 就是将上述路径命了一个别名叫shfile，这样我每次在终端里输入shfile就可以进入上述路径了 当然这里可以一次搞完，再添加一下博客的别名 1alias blog="/Users/lizhiyuan/Documents/blog" 检验效果重启终端，直接键入之前的关键词，如blog，shfile，如果能直接显示进入路径则表示更改成功，当然也可以通过输入 1$ PATH 来查看当前环境变量 deploy三连哈哈这个名字是起着好玩的，实际上就是每次需要把本地hexo博客上传至github或者其他托管的网站上需要的三个步骤，现在我将其简化，只需要一个deploy.sh就可以完成步骤 新建shell文件在之前的shell文件夹下，新建一个名为deploy.sh（或者其他你认为可以表示这样一个过程的名字）的文件 添加代码123456789#!/bin/zshcd ~/Documents/bloghexo cleanhexo ghexo d 其中第一行表示这个文件由zsh来解释,如果你的电脑是bash，就改成#!/bin/bash 赋予权限如果直接在终端里运行上述文件，终端会提示你没有权限，这个时候我们需要cd到shell的根目录下，比如我的电脑就是cd ~/Documents/shell，然后输入chmod +x deploy.sh,权限问题解决 newSite二连 这个问题说实话我还没有很好地解决，目前只是用了一个替代方法。 首先说明这个文件的需要，背景是我每次调试网站时，有些变化需要重新部署环境才能看到的，也就是说我需要 终止当前hexo serve服务 查看当前端口4001被什么进程占用了（我默认是用4001，因为4000被node占用了） kill 上述进程 cd blog目录 hexo serve --port 4001 前三步可以用关掉当前终端来解决，但是用多了之后还是会觉得麻烦，最好是用一个脚本解决上述所有问题，不需要关闭终端，脚本自动找到端口4001占用的进程，并且kill掉上述进程，之后启动serve服务。 问题就出在找到指定端口对应的进程，原来我是采用$ lsof -i:4001来查看，但是这个命令只能log当前进程，我不知道能不能返回当前进程，再加上我对shell的语法不是很熟悉，所以只能在网上寻求帮助，但是搜索一圈之后也无果。后来发现netstat命令也可以实现类似的功能，但是在自己尝试解析netstat时，发现终端似乎无能为力 我目前采取的解决方案是写一个脚本运行上述的4，5步骤，其他的用关闭终端来解决。脚本命名为newSite.sh，内容如下 12345#!/bin/zshcd ~/Documents/bloghexo serve --port 4001 以后彻底解决了这个问题再来补充]]></content>
      <categories>
        <category>系统学习</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo 绑定个性域名]]></title>
    <url>%2F2017%2F10%2F11%2FHexo-%E7%BB%91%E5%AE%9A%E4%B8%AA%E6%80%A7%E5%9F%9F%E5%90%8D%2F</url>
    <content type="text"><![CDATA[每次都通过githubpages来访问可能稍显冗长，而且github最近越来越不稳定，几次我都以为是被墙了。在偷懒心的作用下我开始了一场有惊无险的更换域名之旅… 前言关于github pages+hexo+个性域名的教程网上很多，我这里只列出我自己的亲身经历，以供参考 购买域名域名的购买有很多途径 阿里云 godaddy 以上两个都可以,随便选一个自己喜欢的就可以了。首先进入上述链接，在搜索栏里输入自己理想的域名，如果未被抢注就可以购买之，一般价格在几十块一年。我最终选用的是godaddy的，以下的教程也以其为例。（其实阿里云更好，可以域名+解析一条龙） 设置域名解析如果是买的阿里云的域名的话，应该可以直接在我的产品里找到解析选项，我这里虽然购买的是godaddy的域名，但是并没有使用它提供的DNS解析服务，因为dodaddy是一个新加坡的网站，因为某些不可描述的原因，为了稳定性着想，最好是采用国内的域名解析服务，我采用的是DNSPod，这个是腾讯的服务，而且是免费的 添加域名 在这里点击添加域名，输入你刚购买的个性域名，如我的就是prozac-laputa.com 点进去按这样设置 其中，第一项第二项为gituhub的ip，三四项无法修改，第五项，类型设置为CNAME,值设置为githubpages的链接如username.github.io 设置域名服务器因为我这个购买域名的网站和域名解析的服务商不是一家，所以需要在域名商也就是godaddy这里设置域名服务器。 注意，上述这个页面是要邮箱验证之后才会显示。我其实一星期前就买了这个网站，但是发现一直无法修改，突然在另外一个博客里看到域名购买之后需要马上验证，要不然会有被封锁的风险。急忙打开邮箱，完成了验证 将域名服务器的两个值分别设置为我图中的设置即可 设置github的CNAME需要在github里你这个项目的根目录下创建一个名为CNAME的文件（注意没有后缀），里面就写上你购买的域名即可，但是这样麻烦的是每次deploy之后就需要重新建立一次，非常麻烦。实际上，只需要在你本地的source（hexo的source，不是主题的source）里新建这个CNAME即可，这样就可以每次自动生成CNAME文件 我的经历设置完上面的各个步骤之后，理论上应该只需要等待即可。但是我因为是第一次设置比较紧张，经历了一个非常惊心动魄的过程。我在完成上述步骤之后，突然发现不仅新网站打不开，原来的githubpages页面也自动定向到了yoursite.com这个页面，把我吓了一跳，可是当我把DNSPod的解析服务给停了之后，我的githubpages还是没有恢复！也就是说，还有dns服务商在解析我这个网址!使用网上的解析跟踪服务时发现，github.io这个后缀的根本解析不到，也就是说暂时找不到谁在解析我github域名.瞬间有种博客废掉了的感觉，只能自己本地访问的博客有什么用…我甚至还有换个github账号的冲动，还好等待了一段时间之后我发现新域名可以访问了，原来的链接依旧链接为yoursite.com，这才明白这就是解析本身的问题，相当于dns服务器会把我的githubpages链接解析成新地址的ip，但是新地址还没有部署好，所以就会出现之前那样的错误，至于为什么会是yoursite.com，我也不太清楚，可能是因为我最开始的时候CNAME里的值为默认的yoursite.com没有修改（但是我还是没有想明白为什么在停掉dns解析服务之后还是会出现那样的错误…） 总结 遇到问题不要轻易放弃，要尽可能地想办法解决（本来我计划是之后找学校计院的老师问一下的…）]]></content>
      <categories>
        <category>技术细节</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo Next主题配置]]></title>
    <url>%2F2017%2F10%2F10%2Fhexo-next%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[解决了博客的最基本的发文章和上传至同步之后，面临的问题自然是为自己的网站添加更多功能，当然可以选择DIY，但是想到自己能力有限，就算做出来想必也是优化和性能上有很大问题，就还是按部就班地来吧 前言说实话，网上的教程很多，但是我仔细观察，发现基本上都是抄来抄去，也就是说错误类型一致，我配置站点的过程中参考了n篇教程，列一篇最有效的以供参考Moorez。本文大部分配置都是参考之，非常感谢大大。如果大家想要手把手从头开始配置建议参考他的文章，因为我的文章没有附图，很难看到效果，但是本文的坑全是我自己踩出来的，是得到了实践证明的。 配置选项本地搜索在站点根目录下执行以下命令$ npm install hexo-generator-searchdb --save 在站点文件里任意位置加上123search: path: search.xml field: post 在主题配置文件里更改（默认为false）123# Local searchlocal_search: enable: true 顺便多说一句，网上的大部分教程都只说了前两步，而没有提到第三步，最后的结果应该是这样的 百度统计首先登录百度统计注意这个账号不是你的百度账号（搞不懂为什么明明是一家人不用一组账号…），之后跳出来的页面中，只需要复制hm.js?后面的id即可 编辑主题配置文件修改baidu_analytics的值为你之前复制的id即可 最后成果当我兴高采烈地弄完上面的步骤后发现还是不对，始终没有刷新出来，后来才恍然大悟，原来我还是在用本地的seerver看，而百度的服务是针对你的网站本身的，所以在上传之后应该是可以成功显示百度统计的功能的 评论区 在参考了网上的多篇文章之后，最终还是决定使用来必力 原因有几点 界面好看 没有奇怪的标语 UI美观 登录来必力，获取id 注册时可能需要梯子 来必力的官网有点奇怪，明明都是正常的中文，但是在登录时会莫名其妙地切换成汉语，原本是打算在chromedev里更改html的head里的lang为ko然后让Chrome自动翻译，但是这个方法行不通，它需要页面一开始加载时lang值更改才会出现需要翻译的提示。当然我们也可以选择百度翻译，这才知道原来是向我的邮箱里发送了验证码，一番折腾之后终于得到了id 编辑主题配置文件编辑livere_uid字段如下 livere_uid: #your livere_uid 文章内链接颜色修改实际上就是修改css的事，只要知道了css的位置就能很容易地修改（但是说实话这个项目不愧是大工程，我还没讲过分类这么细的css，以后接触的项目越多应该就会习以为常吧）进入文件 themes\next\source\css\_common\components\post\post.styl 在末尾加上 1234567891011// 文章内链接文本样式.post-body p a&#123; color: #0593d3; border-bottom: none; border-bottom: 1px solid #0593d3; &amp;:hover &#123; color: #fc6423; border-bottom: none; border-bottom: 1px solid #fc6423; &#125;&#125; 其中选择.post-body是为了不影响标题，选择p是为了不影响首页“阅读全文”的显示样式,颜色可以自己定义。 修改代码块自定义样式打开\themes\next\source\css\_custom\custom.styl修改为 123456789101112131415// Custom styles.code &#123; color: #ff7600; background: #fbf7f8; margin: 2px;&#125;&lt;!--// 大代码块的自定义样式.highlight, pre &#123; margin: 5px 0; padding: 5px; border-radius: 3px;&#125;.highlight, code, pre &#123; border: 1px solid #d6d6d6;&#125;--&gt; 主页文章添加阴影效果同上，在custom里添加 12345678// 主页文章添加阴影效果 .post &#123; margin-top: 60px; margin-bottom: 60px; padding: 25px; -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5); -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5); &#125; 显示每篇文章的字数和大概阅读时间在根目录下安装hexo-wordcount1$ npm install hexo-wordcount --save 在主题的配置文件中，修改如下123456# Post wordcount display settings# Dependencies: https://github.com/willin/hexo-wordcountpost_wordcount: item_text: true wordcount: true min2read: true 但是，如果光是这样设置，我们会发现没有单位显示。这时候打开Blog\themes\next\layout\_macro\post.swig找到 123&lt;span title="&#123;&#123; __('post.wordcount') &#125;&#125;"&gt; &#123;&#123; wordcount(post.content) &#125;&#125;&lt;/span&gt; 修改成 123&lt;span title="&#123;&#123; __('post.wordcount') &#125;&#125;"&gt; &#123;&#123; wordcount(post.content) &#125;&#125; 字&lt;/span&gt; 后面一个修改时间的同理，找到 123&lt;span title="&#123;&#123; __('post.min2read') &#125;&#125;"&gt; &#123;&#123; min2read(post.content) &#125;&#125; &lt;/span&gt; 改成 123&lt;span title="&#123;&#123; __('post.min2read') &#125;&#125;"&gt; &#123;&#123; min2read(post.content) &#125;&#125; 分钟 &lt;/span&gt; 事实就是修改span的内容，说起来很简单的东西，但是我发现修改了之后死活没有变化，按理来说这里的原理并不复杂应该不会有什么变数才对，后来我发现需要重新配置环境，直接刷新是不行的，关闭终端，重新hexo serve就ok了 添加顶部加载条因为我参考的文章作者的pull request被merge了，所以现在只需要在站点配置文件中修改pace为true即可.站点配置文件里还有各种loading的主题可以选择,我把里面的主题都尝试了一遍，最终还是决定采用pace-theme-minimal主题。 添加动态背景如果hexo是最新版本的话，只需要在主题配置文件里找到canvas-nest，将其属性改为true。当然，事实上文档里有很多主题，我选用的是另外一个canvas-lines 但是，我发现添加了动态背景之后主页文章透明度太低了，有点奇怪的感觉。那还是打开刚才的costom.styl,添加如下的代码 12&gt; backgroung-color: rgba(255, 255, 255, .5);&gt; 我之前还奇怪为什么hexo的库里会有three，现在终于明白了，是用来当背景使用的 推荐网站也就是在文章的右侧可以设置推荐网站，其实很简单，打开主题配置文件，找到links,将代码更改为 设置推荐网站12345678# Blog rollslinks_icon: linklinks_title: 不妨看看#links_layout: blocklinks_layout: inlinelinks: 小土刀: http://wdxtub.com/1997/09/11/booklist-page/ 羡辙: http://zhangwenli.com/ 修改推荐网站icon实际上就是修改不妨看看前面的icon样式，默认是一个链接，在font-awesome中找到你喜欢的样式之后把代码拷贝，打开/theme/next/layout/_macro/sidebar.swig中，找到blogroll（这个名字是通过chrome开发者工具找到的），将部分代码修改如下 12345678910111213141516&#123;# Blogroll #&#125; &#123;% if theme.links %&#125; &lt;div class="links-of-blogroll motion-element &#123;&#123; "links-of-blogroll-" + theme.links_layout | default('inline') &#125;&#125;"&gt; &lt;div class="links-of-blogroll-title"&gt; &lt;i class="fa fa-yourfavicon" aria-hidden="true"&gt;&lt;/i&gt; &#123;&#123; theme.links_title &#125;&#125; &lt;/div&gt; &lt;ul class="links-of-blogroll-list"&gt; &#123;% for name, link in theme.links %&#125; &lt;li class="links-of-blogroll-item"&gt; &lt;a href="&#123;&#123; link &#125;&#125;" title="&#123;&#123; name &#125;&#125;" target="_blank"&gt;&#123;&#123; name &#125;&#125;&lt;/a&gt; &lt;/li&gt; &#123;% endfor %&#125; &lt;/ul&gt; &lt;/div&gt; &#123;% endif %&#125; 这里代码里的fa-yourfavicon就是之前说过的代码名称，改完之后重新部署即可 更改网站icon这个折腾了我好久… 下载图标在easyicon中下载一个32x32的文件，并存为favicon.ico 存入本地图标的存储位置一定要搞清楚，主题配置文件里的默认路径都是站点下的source里的，而且它在代码里特意注明了source里的文件夹不能取名为images，因为和next里的images冲突了，于是我在source下的文件夹取名为image，然后把favicon.ico存入这个目录下， 修改主题配置文件将favicon部分改为 1234567favicon: #small: /images/favicon-16x16-next.png medium: /image/favicon.ico #apple_touch_icon: /images/apple-touch-icon-next.png #safari_pinned_tab: /images/logo.svg #android_manifest: /images/manifest.json #ms_browserconfig: /images/browserconfig.xml 反正我是这么改的，很多人说直接写成这样的形式 1favicon: /image/favicon.ico 但是我亲身尝试好像出了点问题，后台返回说路径有问题，我估计这个favicon是一个像类的东西（也有可能是改版了）,所以还是像我这样写比较稳妥 修改Tag样式修改/themes/next/layout/_macro/post.swig文件，搜索 rel=&quot;tag&quot;&gt;#，将 #换成&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt; 注意：应重启环境才能看到效果应用 每篇文章末尾统一添加本文在\themes\next\layout\_macro中新建passage-end-tag.swig文件，其中添加如下代码 12345&lt;div&gt; &#123;% if not is_index %&#125; &lt;div style="text-align:center;color: #ccc;font-size:14px;"&gt;-------------本文结束,感谢您的阅读-------------&lt;/div&gt; &#123;% endif %&#125;&lt;/div&gt; 接着打开\themes\next\layout\_macro\post.swig文件，在post-footer之前添加如下代码 12345&lt;div&gt; &#123;% if not is_index %&#125; &#123;% include 'passage-end-tag.swig' %&#125; &#123;% endif %&#125;&lt;/div&gt; 最后在主题配置文件最后加入如下代码 123# 文章末尾添加“本文结束”标记passage-endtag: enabled: true 原文这里代码还打错了，我直到看了后台返回的log才知道名字拼错了。做完了以上三个步骤应该就可以实现每篇文章末尾都有指定的格式了，当然第一段html可以自拟。 添加RSS安装插件1$ npm install --save hexo-generator-feed 打开站点配置文件找到plugin，修改如下 123# Extensions## Plugins: http://hexo.io/plugins/plugins: hexo-generate-feed 打开主题配置文件修改如下 1234# Set rss to false to disable feed link.# Leave rss as empty to use site's feed link.# Set rss to specific value if you have burned your feed already.rss: /atom.xml 修改完之后hexo g，然后重新配置环境，应该就有rss的效果了 直接点击RSS图标是没用的，应该复制链接然后在RSS软件中订阅 文章写作方式这个严格意义上来说不算是配置，而是一种写作习惯，但是我觉得作者这样的方式非常优雅，于是我也决定采用，就是每篇文章more之前的部分，用区域块来表示 更改默认的markdown渲染css最开始有这个想法的初衷是觉得next的blockquote太丑了，颜色不够好看。改起来其实很简单，重要的是找到css文件的位置，我自己并没有找到…因为那些文件名都太具有迷惑性了，但是我百度了hexo next的blockquote成功地找到了管理markdown文件的css路径 \themes\next\source\css\_common\scaffolding\base.styl 找到了就好办，打开文件，搜索关键词blockquote，修改border-left属性为border-left: 4px solid rgb(134,206,236); 修改默认的代码高亮原版的代码高亮配色不太美观，虽然有多种主题可以换，但是都不太如人意。这里我在一个hexo的主题melody里扒了一个highlight配色下来，代码如下 12345678910111213141516$highlight-background = #F6F8FA $highlight-current-line = #00346e $highlight-selection = #80CBC440 $highlight-foreground = #90A4AE $highlight-comment = #90A4AE90 $highlight-red = #E53935 $highlight-orange = #F76D47 $highlight-yellow = #FFB62C $highlight-green = #91B859 $highlight-aqua = #39ADB5 $highlight-blue = #6182B8 $highlight-purple = #7C4DFF $highlight-gutter = &#123; color: #CFD8DC, bg-color: $highlight-background &#125; 找到存储highlight的文件hexo-site/themes/next/source/css/_common/components/highlight/theme.styl里，将normal里的代码替换成上述代码即可 鼠标点击特效我主要参考的教程里的鼠标点击特效太水了，本来也淡了做这个特效的心思的，但是在偶然间预览到melody这个hexo主题时，迅速被里面的鼠标点击特效震撼到了，太炫酷了，妈妈我要学这个。点进了文档里没有看到这个技术的细节，只是提到了anime.js,遂顺藤摸瓜找到了anime的官网，发现这是一个提供做js动画的库，并不是我想要的特效，就在我迷茫时，突然发现anime的官网上用的就是这个特效，点开chrome-dev，大概看了一下，引用了两个js文件，anime.js和fireworks.js,后者就是我想要的效果！马上写了个html测试一下，很遗憾，不行，点开控制台，发现是没有canvas元素，在html中按官网的样子加入了一个canvas。这下特效有了，但是控制台还是会报错，原因是ga函数找不到，再一看ga函数源于一个叫analytics的js文件，可是开发者工具的sources栏里好像没看到有这个js，无奈只能点进去，发现是动态引用的，但是无所谓了，没有这个函数特效一样能够工作。于是就把官网上的fireworks.js下载了下来，并且把使用到ga函数的部分给注释掉。最后，在新建的html上调试成功。可是噩梦才刚刚开始，后面省略无数个字，摸索了一整天才把这个搞好，现在开始。 下载资源在anime的官网页面上，打开chrome开发者工具，在sources里把一下两个文件找到，并且下载到本地 fireworks.js anime.js 存入本地的路径为hexo-site/themes/next/source/js/src/ 编辑_layout文件之前已经在自己原来写过的静态网站上测试过了，想要实现鼠标点击的烟花特效，做完以下几步即可 html中新建canvas,属性如下1&lt;canvas class="fireworks" style="width: 1226px; height: 680px;position: fixed;left: 0;top: 0; z-index: 1; pointer-events: none" &gt;&lt;/canvas&gt; 这里面有几个属性要特别注意，一个是class名为fireworks，一个是position设为fixed，最重要的是设置pointer-event属性，这个属性能让你的鼠标点击穿透这个canvas直到下层，这个非常关键，不然的话你把canvas放在上面，下面的链接全都点不了了 在body末尾先后引入anime.js,fireworks.js一定要注意顺序，anime要先引入不然会出错，而且要放在dom后，不然会出现引用错误。这两步做完就可以实现功能了 在_layout文件中作出上述修改其实做个小测试很简单，但是如何将这个功能引入我们的网站就比较麻烦了，因为如果要在网站上实现效果，就必须修改所有的html。我想到这既然是一个框架，那么html应该有个模板，事实上这个模板就是_layout.swig,这个文件位于hexo-site/themes/next/layout/下。花了大概十分钟把这个文件看明白，然后在文件的最后引入这两个js,并且在开头（body元素后面）引入我们之前提到过的canvas应该就可以了. 使canvas的尺寸自适应我之前提到过的canvas的大小是写死的，这样不仅不优雅，而且不能实现响应式布局，还是在_layout.swig文件里，在所有的dom元素后面添加一段 123456789101112131415&lt;script&gt; window.onload = function()&#123; //resize canvas $(window).resize(resizeCanvas); function resizeCanvas() &#123; var canvas= $('.fireworks')[0]; canvas.height = window.innerHeight; canvas.width = window.innerWidth; //console.log(canvas.width,canvas.height); &#125;; &lt;/script&gt; 这样就能实现canvas自适应布局了 修改footer栏原版的footer栏太丑了，决定好好修饰一下 删除hexo和next信息找到themes/next/layout/_partials/footer.swig,打开编辑，删除class为powered-by和theme-info的相关dom（怎么总有种过河拆桥的感觉…） 文字居中在footer.swig里直接添加样式竟然没有效果，点开开发者工具才知道原来footer-inner这个类已经继承了text-align:left的属性（很好奇为什么我直接改写覆盖不了）,好嘛，干脆换个地方修改好了。打开\themes\next\source\css\_custom\custom.styl，添加如下代码 123.footer-inner &#123; text-align: center&#125; 修改用户名图标这里引用的技术是font-awesome，说实话我还是第一次接触这个，据说是为bootstrap设计的框架，但是我被它的简介和强大性震撼到了，不需要配置路径，下载文件什么的，只需要首先在官网上选择你喜欢的icon，在html中引用js之后，随便新建一个元素（官网建议最好是i，因为比较简介），然后设置class格式为fa icon-name，这里的icon-name是官网上选定元素之后会告诉你的名字，icon就出现了，简洁且强大。回到本文，按下面几个步骤进行： 上官网选择你喜欢的icon，把名字记下来 打开主题配置文件，搜索footer下的icon，将其值修改为你刚才找到的icon名 大功告成 修改文章的阅读全文这个特效我是看别人的博客里有的，觉得很炫酷，但是网上好像没有相应的教程，学习了这么多配置，干脆自己也来个DIY好了 首先找到相应的css文件当然，在这之前先确定好元素的名称，好在css里找对应，使用chrome开发者工具，发现这个阅读全文的按钮class为post-button，在css文件夹下找，最终在路径为themes/next/source/css/_schemes/Mist/_posts-expanded.styl（我的主题是Mist） 修改css代码然后修改其中.post-button的代码如下 12345678910111213141516171819.post-button &#123; margin-top: 20px; text-align: center; a &#123; padding: 2px 20px; font-size: $font-size-base; color: #000; background-color: #fff; border: 2px solid #000; border-radius: 3px; transition: all .2s ease +mobile() &#123; font-size: $font-size-small; &#125; +desktop-large() &#123; font-size: $font-size-large; &#125; &amp;:hover &#123;background-color: #000;color: #fff&#125; &#125;&#125; 最终的效果如图 将自己写的html托管在hexo下hexo文件运作首先应该把hexo的文件规律搞清楚。总共有两套文件体系，一个是本地的，另外一个是上传至github上的。后者实际上就是本地的public部分，也就是每次hexo g之后生成的文件夹。 每次hexo g之后，它就是会把所有hexo-site/source下的文件全部渲染一遍变成public里的文件，也就是说，想要托管自己的html，就需要把html放在这个文件夹下。 新建文件夹在hexo-site/source下新建文件夹，像我就是建立了一个demo,路径为hexo-site/source/demo,新建的html放在里面就可以了，比如我把我这个学期写的地图放了进去gdMap.html 在站点配置文件中取消对这个文件夹的渲染光是把路径确定好了还不够，因为hexo默认是会对所有的html按它的格式来渲染的，我们需要在站点配置文件中找到skip-render,修改代码如下 1skip_render: demo/* 表示对demo下所有的文件都不渲染，当然这里也可以根据自己的需求来改写，比如skip_render: demo/*.html(只是取消对html文件的渲染) 在md文件中引用html像这样的格式引用即可1[链接](/demo/gdMap.html)` DIY规律做了这么多配置基本上对整体的流程也很清楚了，自己DIY了几个选项效果也很好，基本上DIY配置的话规律如下 修改CSS进入/theme/next/sources/css下，找到对应的styl文件进行修改，实在不行可以在这个目录下的_custom下修改，这个css文件应该具有覆盖的最高权限。 修改DOM（比如修改图标） 注：修改css之后直接刷新页面就可以看到效果，因为css是即时渲染的，但是修改dom不可以，必须重新hexo server 有两种方法，不过我自己想了想，如果两种方法都能实现的情况下还是推荐使用第二种，更标准，符合软件工程规范 修改.swig文件虽然我之前没接触过此类文件，但是在修改过几个配置之后发现这实际上就一个dom预编译软件（我自己根据sass之类的猜测的），这个文件里是最直接的dom模板，但缺点是除非是新建元素，否则不建议直接修改这里的元素，把东西写死了很难看，而且和系统的文件风格不一致 修改主题配置文件next主题的作者就很小心我之前说的问题，它把可配置的选项都写进了主题配置文件，如果想修改直接在主题配置文件里修改即可，简单且耦合性弱，不容易出错。可惜的是我之前有些地方就没这么做，现在再修改也比较麻烦，只能以后注意了 在修改.swig时注意，如果欲修改的配置选项是以宏引用的形式调用的话，放弃修改.swig文件，直接在主题配置文件里修改你想要的配置 结语花了很大的功夫配置了这么些，七成是跟着教程做的，三成是自己摸索的。全部过了一遍之后，一方面是增进了自己的信心，另一方面就是了解了大概的框架，以后想要自己diy一些部分也很容易。目前来说这些功能应该是够用了，以后有需要的话再添加吧.]]></content>
      <categories>
        <category>系统学习</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我的编程入门]]></title>
    <url>%2F2017%2F10%2F10%2F%E6%88%91%E7%9A%84%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[其实建立这个博客的主要目的也是增加自己在编程方向的动力，那么自然需要有些文章专门用来做开荒的布局，这篇文章记录了我之前总结下来的自己未来应该在编程方面的努力方向（虽然基本没怎么动），希望在未来的日子里我能不断地补充这篇文章里的链接。 前端CSS CSS权威指南（第3版） CSS3 专业网页开发指南 CSS揭秘 预处理器的学习 JS JS高级程序设计 蝴蝶书 你不知道的JS 阮一峰老师的《ES6 标准入门》 JS设计模式与开发实践 高性能JS 框架 BootStrap Vue Task 百度前端学院1 百度前端学院2 阮一峰老师的全栈教程 参加2018年的百度前端学院 有意思的资料一个网友自己整理的前端学习知识 通用知识 注：属于比较杂碎的知识，不系统但很重要 Git（心中的痛，一直在用，一直不精） 数据库（还没有正儿八经地用过，项目接触多了应该就还好） webGIS three.js(算是基础比较牢靠，但需要项目的磨练) spacemacs(非常好看的emacs主题，但是emacs真**难用) 计算机知识计算机通用知识 SICP（不说了，神书，大二时看完了前两章，后来就没动过了…） 计算机程序设计 计算机程序设计中文 SICP中文教学视频 一个小的导论 SICP习题集 开始一些小项目 麻瓜炼金所 计算机系统要素 计算机系统基础 深入理解j计算机系统 c语言程序设计 数据结构和算法导论 算法导论 数据结构和算法分析 MIT算法导论 编程珠玑 程序设计实践 编程语言基础 程序设计语言-实践之路 程序设计语言公开课 构建一个浏览器的实践 python实现scheme的解释器 书籍阅读 代码大全 程序员修炼之道 估计我能把前端的部分搞好就已经很不容易了，接下来的部分以后再慢慢学吧]]></content>
      <categories>
        <category>系统学习</category>
      </categories>
      <tags>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[开始记录自己和生活...]]></title>
    <url>%2F2017%2F10%2F09%2F%E5%BC%80%E5%A7%8B%E8%AE%B0%E5%BD%95%E8%87%AA%E5%B7%B1%E5%92%8C%E7%94%9F%E6%B4%BB%2F</url>
    <content type="text"><![CDATA[开通博客的缘由大四了，突然发现周围的同学都或多或少带着这样或者那样的光环，反过来看看自己，似乎没有什么值得骄傲的地方。找了个时间专门想了想，自己原来大一大二的时候自己因为怯于自己能力有限，并没有参加各式各样的比赛，相反是将时间大量花费在了看书，练字，画画等系列杂篇上，更为致命的是，以前的那些爱好虽然随着时间和热情的流逝不断地舍弃了，但是心中反而留下了自己很难专注于某件事情的刻板印象。虽然这件事不知道有没有高中时期老师教诲的“遇到难题果断放弃，先做会做的题目”的影响，但事实就是如此，现在的我因为原来大一大二时尝试过太多事情但都半途而废，想要开始做什么事情一旦遇到什么困难就会产生放弃的想法（尤其是在配环境时…） 当然了，前面都是一些很丧的话，事情也有积极的一面:我发现自己在编程时还是很专注的，而且自己在前端方向非常感兴趣。可惜的是编程能力只是相对于班上的同学相对优秀，但倘若放在社会上的话根本不值一提。当然没有谁的能力是与生俱来的，但是我同样发现一个令我沮丧的事实，虽然编程时非常投入，也非常享受编程的状态，但是始终缺少自发学习编程的动力。就当我觉得未来漆黑一片时，突然想到了写博客输出的方法。事实上我自己平时也有输出（大三下有所懈怠），不过原来一直是记录在onenote上，只能“内部消化”。以博客的形式来进行输出我觉得有几个优点 公开平台，尽管可能没人看，但是绝对有莫名的督促作用 可以锻炼markdown写作的基本功 可以以比较完善的方式系统地整理自己学习的知识和完善自己 事实上，我同样也非常享受用一个平台全方面地展示自己，在这里我希望不仅是在编程，同样在读书，喜欢的动画，人生心得等系列方面都能慢慢积累，希望自己能坚持下去 曾经我的生活状态虽然暑假拿了夏令营的资格，也和研究生的老师联系好了，但是由于自己的不努力，没有拿到保研资格，也就是说摆在我面前的只有考研这一条路，但是到目前为止，我的考研说实话准备得还不是太好，这一点在我还有闲情来写博客就能看出来。还是老规矩，晚上到操场上反思一下，发现自己根本没有所谓的理想的生活，没有目标也就没有动力，中间还很有一段时间处于时间空余但是又不知道做什么的迷茫状态。老实说，就算是现在我的心中还是有点乱，对未来的大概构想就是考研-帮老师做事-研究生阶段巩固自身技能。现在终于有了博客的帮助，希望它能帮我走得更远。 激励我的大大 羡辙 小土刀 初次了解羡辙是在知乎上搜索百度前端学院的task发现有个人给了一个nice的作品，后来又是一次偶然的机会，我正在跟着老师做事，我负责百度echarts的部分，偶然发现了百度前端团队也有她，于是从echarts跟到github和微博，毅然决然地决定成为羡辙老师的粉丝。原因一方面当然是因为人长得漂亮（大雾），其实主要原因是我当时无（ba）聊（gua）翻了很多她的微博，发现原来她的生活轨迹和爱好和我很相似，都喜欢看书和编程，当然她比我厉害很多（主要是能付诸实践和看书能看进去吧）其实大大在编程圈子里也是个很普通的人，但是既然作为和我的爱好重叠度极高且目前已经有较为稳定工作（BAT诶，虽然百度已经没落了，但是也算很强势的互联网公司了），自然是要成为我心目中的标杆啦 小土刀是近期才了解到的，在搜索hexo相关配置问题时偶然发现了这个人的博客，顺手点进去看了看，哟发现大家的兴趣点也都很相似，说实话我最开始点到他的读书计划中心中是有点不屑的，因为他书单里的大多数书也是我的书单的部分（包括编程部分和科普类书部分），很不幸我的书单部分还没怎么开荒，但是后来在知乎里看见了对这个人的主观和客观的评价，发现他还是愿意把自己想做的事给很好地执行的。而这正是我所缺乏的能力，而且大大在自己的博客上全方面展示自己兴趣（包括动漫和武侠小说）让我觉得这就是我想要的生活，知道自己要做什么，并且不断地为这个方向努力 配置博客这两天终于折腾好了博客，配环境总是最累人的事。原先是计划采用jekyll，光是ruby的配置就花了我一晚上，没办法电脑之前brew出了问题，配置ruby之前还被brew折腾了好久，后来还是觉得hexo简单，事实上应该两者差不多，我是觉得hexo的next我比较喜欢，可以拿来直接用，所以跟着教程把hexo搞好了，事实证明一件事做的时候越困难，做完的幸福感越高，配置的过程就不发博客了，因为类似的教程很多。最后感叹一句： 有困难，上stackoverflow! 结语这两天风风火火地搞博客，不知道自己这次还能不能坚持下来，因为考研的缘故，自己这下半年肯定不会很勤快， 如果这次还是不能坚持下来的话…]]></content>
      <categories>
        <category>随想</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[初识markdown]]></title>
    <url>%2F2017%2F10%2F09%2F%E5%88%9D%E8%AF%95markdown%2F</url>
    <content type="text"><![CDATA[Intro前言markdown其实很早就有所接触，但是原来的话一是没有机会来接触，平时全部都以onenote的形式输出。原来使用的是Ulysess，这个工具页面设计非常优秀，UI非常舒服，我也在上面写过很多私人的文章，但是当我正式开始写博客之后，我突然发现ulysess还是不太方便（也有可能是我对ulysess的了解太少了）。在短暂尝试了macdown之后，我发现原来这款软件才是我喜欢的风格 优点 代码高亮 样式美观 可以即时渲染 推荐markdown软件当然这里还有一些推荐的markdown（macOSx）可供选择 mou（mac升级到sierra之后官网上下的版本都不兼容了） macdown 快捷按键想要入门一项技术，最好的方法就是找一些简单的事情来做，在动手实践中提升信息和这门技术的喜爱其实，如果你采用专业的markdown软件的话你会发现其实大部分软件都把常用的功能都绑定了快捷键这里以macdown为例，记录一下一些常用的按键 宏观操作关闭预览command+shift+H 细节操作标题command+1/2/3／... 代码块command+K 区域代码可以直接tab，或者六个‘’‘’‘’建议是六个`，因为前者在next上显示会有问题 注释command+/ 链接command+shift+K 图片command+shift+I 引用command+shift+B 顺序序列command+shift+O 非顺序序列command+shift+U 总结使用markdown中遇到的问题汇总 ’#‘章节标记后面应立即接空格，这个bug在markdown软件上没有问题，但是上传到网站上时就会出现错误 markdown默认是不换行的，直接换行认为是同一个段落。想要切换段落只能直接按enter macdown有很多快捷键本来可以使用，但用着用着就失效了，目前还没有找到原因，留着将来补充… 结语 markdown其实语法很简单，但是只有持续不断地输出才能最好发挥它的价值]]></content>
      <categories>
        <category>系统学习</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
</search>
